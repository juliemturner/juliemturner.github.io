<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Server 2010 on Veni, Vidi, Vici</title>
    <link>https://juliemturner.net/tags/server-2010/</link>
    <description>Recent content in Server 2010 on Veni, Vidi, Vici</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>julie.turner@sympraxisconsulting.com (Julie Turner)</managingEditor>
    <webMaster>julie.turner@sympraxisconsulting.com (Julie Turner)</webMaster>
    <copyright>Julie Turner ~ All rights reserved</copyright>
    <lastBuildDate>Thu, 05 Jan 2023 21:22:00 +0000</lastBuildDate><atom:link href="https://juliemturner.net/tags/server-2010/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Conquer your dev toolchain in &#39;Classic&#39; SharePoint – Part 4</title>
      <link>https://juliemturner.net/post/conquer-your-dev-toolchain-4/</link>
      <pubDate>Tue, 16 Jan 2018 14:43:38 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/conquer-your-dev-toolchain-4/</guid>
      <description>For this last post I want to take what we’ve learned and add the final pieces that have you creating web parts in the same way you would modern SPFx web parts and solutions. We’re going to start by discussing TypeScript and then briefly touch on Sass and how to include these languages into your new Webpack/Gulp environment.
TypeScript is becoming almost ubiquitous in modern web development. The pros are numerous, my favorites are the ability to write code to target older browser with modern capabilities, and the ability to use a version of intellisense to validate your objects properties and methods.</description>
    </item>
    
    <item>
      <title>Conquer your dev toolchain in &#39;Classic&#39; SharePoint - Part 3</title>
      <link>https://juliemturner.net/post/conquer-your-dev-toolchain-3/</link>
      <pubDate>Thu, 11 Jan 2018 14:29:46 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/conquer-your-dev-toolchain-3/</guid>
      <description>In our last post I went through the gulp process we were implementing to watch our files and upload them into an appropriate SharePoint library so that we can test our work inside SharePoint regardless of if SharePoint was version 2007 or SharePoint Online. Now we’re going to take things further and formalize our process. One of the tools the SharePoint Framework (SPFx) uses is Webpack. Webpack’s main goal is to take the many files that you create as a developer and bundle them all together into one JavaScript file.</description>
    </item>
    
    <item>
      <title>Conquer your dev toolchain in &#39;Classic&#39; SharePoint - Part 2</title>
      <link>https://juliemturner.net/post/conquer-your-dev-toolchain-2/</link>
      <pubDate>Tue, 09 Jan 2018 14:47:29 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/conquer-your-dev-toolchain-2/</guid>
      <description>In the first post in this series I discussed some of the benefits of formalizing your client-side development process and then a bit about starting the process of tooling up. A common scenario to develop our own client-side solutions in SharePoint is to point a Content Editor (CEWP) or Script Editor (SEWP) web part at our custom html, css, and js files that are sitting in a document library somewhere in our environment.</description>
    </item>
    
    <item>
      <title>Conquer your dev toolchain in &#39;Classic&#39; SharePoint - Part 1</title>
      <link>https://juliemturner.net/post/conquer-your-dev-toolchain-1/</link>
      <pubDate>Fri, 05 Jan 2018 16:20:59 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/conquer-your-dev-toolchain-1/</guid>
      <description>Last year, around this time, Marc and I agreed we should write a blog series on our development process. As often happens good intentions get buried in other commitments, but I’ve finally managed to circle back on this topic which I’m finding has become more important than ever. Over the last year the SharePoint Framework has taken off. Although it still doesn’t support the paradigm that I most often am developing for - the full-page app hosted in SharePoint - I still think it’s a great model for development.</description>
    </item>
    
    <item>
      <title>SharePoint REST Date/Time field Item Updates</title>
      <link>https://juliemturner.net/post/sharepoint-rest-datetime-update/</link>
      <pubDate>Mon, 06 Nov 2017 20:25:15 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/sharepoint-rest-datetime-update/</guid>
      <description>A recent comment on my blog post “SharePoint time, is not your time, is not their time.” has prompted me to create a short addendum post that specifically references updates and how your thinking might differ from displaying SharePoint date/time values. To recap our example, I was discussing how to manipulate the date values to have your client-side code mimic (or not) the regional settings of your SharePoint site. The question was raised about how to deal with dates when doing POST to a SharePoint list or library from your client-side code.</description>
    </item>
    
    <item>
      <title>How to work with SharePoint datetime localization/timezones in JavaScript</title>
      <link>https://juliemturner.net/post/sharepoint-datetime/</link>
      <pubDate>Mon, 17 Apr 2017 23:54:27 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/sharepoint-datetime/</guid>
      <description>If you develop client side solutions for SharePoint you’ve either run into this or you will run into the following scenario. SharePoint stores all its date/time fields in UTC time. The site collections, sites, and the users, can have their own time zone settings. If you’re using SharePoint out of the box because all the content is rendered on the server and pushed to the client with all the date/time translation has been done for you.</description>
    </item>
    
    <item>
      <title>Code Creep: SharePoint &#34;CDN&#34; with Document Libraries</title>
      <link>https://juliemturner.net/post/code-creep-sharepoint-cdn/</link>
      <pubDate>Tue, 06 Sep 2016 14:00:00 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/code-creep-sharepoint-cdn/</guid>
      <description>Centralizing your SharePoint client side code “Code Creep”… no it’s not the latest thriller movie out of Hollywood, although it probably could be. I’m referring to the sprawl of client side code files that are stored when implementing client side web parts or &amp;ldquo;widgets&amp;rdquo; in SharePoint. A common solution for implementing &amp;ldquo;widgets&amp;rdquo; in SharePoint is to store the files in a document library, linking to them with a CEWP that will then run and render your “widget”.</description>
    </item>
    
    <item>
      <title>Sympraxis Development Process</title>
      <link>https://juliemturner.net/post/sympraxis-development-process/</link>
      <pubDate>Tue, 16 Aug 2016 17:23:47 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/sympraxis-development-process/</guid>
      <description>Marc and I discussed in our August Sympraxis Newsletter starting a blog series to share what we’re learning while implementing a SharePoint client side development process. So this is my first post on the topic, and here’s a link to his first post… it’s interesting to see how different our perspectives on the process were.
In all my previous experience I’ve either been in a team or in a regulated industry or both.</description>
    </item>
    
    <item>
      <title>Widget Wrangler Webcast and New Release</title>
      <link>https://juliemturner.net/post/widget-wrangler-webcast-and-new-release/</link>
      <pubDate>Mon, 14 Mar 2016 20:36:26 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/widget-wrangler-webcast-and-new-release/</guid>
      <description>This content has also been posted on Bob German&amp;#39;s Vantage Point.Widget Wrangler Webcast and New Release Here’s a quick update on the Widget Wrangler – the light-weight JavaScript framework that helps you build flexible widgets that can be used in SharePoint content editor web parts, add-in parts, or really pretty much everywhere.
The Widget Wrangler was featured in a webcast on Channel 9 today (Video has been removed). The Office team’s Vesa Juvonen interviewed WW creators Julie Turner and Bob German, who explained the framework and demonstrated how to use it with AngularJS, jQuery, and plain old JavaScript.</description>
    </item>
    
    <item>
      <title>Flexible SharePoint Development with Widget Wrangler</title>
      <link>https://juliemturner.net/post/widget-wrangler/</link>
      <pubDate>Wed, 13 Jan 2016 22:00:00 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/widget-wrangler/</guid>
      <description>This content has also been posted on Bob German&amp;#39;s Vantage Point.What’s a widget, and why should I care? In economics, a widget is a name for a generic gadget or manufactured good; on the web, a widget is a generic piece of web functionality running on a page. What makes widgets special is that, unlike controls in ASP.NET or directives in AngularJS, widgets are generally released separately from the web page that hosts them, and are often deployed by end users.</description>
    </item>
    
    <item>
      <title>Quick Primer on InfoPath and SharePoint 2010 Time Zones</title>
      <link>https://juliemturner.net/post/infopath-and-sharepoint-2010-time-zones/</link>
      <pubDate>Thu, 31 Jan 2013 13:28:46 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/infopath-and-sharepoint-2010-time-zones/</guid>
      <description>InfoPath decrepcated functions such as Today() and Now() pick up the time zone based on the settings of the SharePoint server. By default the web is set to the time zone of the server, which is thereby the default of any new sites created as well as new user profiles created. For global organizations with users around the world, there are situations where you will want the automated date/time stamps to display the local time for the user rather than the server time.</description>
    </item>
    
    <item>
      <title>InfoPath - Show links to documents in a library from the form</title>
      <link>https://juliemturner.net/post/infopath-show-links-to-documents-in-a-library/</link>
      <pubDate>Fri, 11 Jan 2013 20:00:38 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/infopath-show-links-to-documents-in-a-library/</guid>
      <description>I had an interesting client issue recently where the users were copying and pasting the contents of entire e-mail messages into a text box inside an InfoPath decrepcated form. Although useful in that the information was captured with the form, the implementation was tedious at best when trying to find information potentially buried there. Long story short by putting the e-mail messages in a document library that was linked to the InfoPath form library by the ID I was able to have a parent-child relationship.</description>
    </item>
    
    <item>
      <title>Using SQL Reporting Services Report Viewer Web Part to display Access Services report.</title>
      <link>https://juliemturner.net/post/sql-reporting-services-report-viewer-web-part-access-services-report/</link>
      <pubDate>Mon, 07 Nov 2011 16:25:31 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/sql-reporting-services-report-viewer-web-part-access-services-report/</guid>
      <description>As you may or may not be aware when an Access database is published to a SharePoint site the reports in the database are converted into SQL Reporting Services reports. Great, you think&amp;hellip; that should mean you can host the report elsewhere in the SharePoint hierarchy simply by using the SQL Reporting Services Report Viewer Web Part. And in fact, you can, it&amp;rsquo;s just a little tricky getting it configured. Certainly not anything you can&amp;rsquo;t overcome but hopefully by posting this information it&amp;rsquo;ll help save some time.</description>
    </item>
    
    <item>
      <title>Setting an Application Page Title from code</title>
      <link>https://juliemturner.net/post/setting-an-application-page-title-from-code/</link>
      <pubDate>Wed, 15 Jun 2011 21:02:25 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/setting-an-application-page-title-from-code/</guid>
      <description>I&amp;rsquo;m currently dealing with a requirement where I need to the set an application page&amp;rsquo;s title from the code behind. By default the form has a ContentPlaceHolder control with a ContentPlaceHolderID=&amp;ldquo;PlaceHolderPageTitle&amp;rdquo; which in the master page is the text that will fall in the header&amp;rsquo;s title tag. Unfortunately, asp:Content controls are not added to the hierarchy at runtime so I can&amp;rsquo;t access it directly.
There are good ways to modify this title on the client side with Javascript but client side code doesn&amp;rsquo;t really suit my needs as the title will come from some custom manipulation that&amp;rsquo;s better done on the server.</description>
    </item>
    
    <item>
      <title>Maintain file version history when moving/copying files between SharePoint sites</title>
      <link>https://juliemturner.net/post/maintain-file-version-history-when-movingcopying/</link>
      <pubDate>Thu, 02 Jun 2011 13:54:43 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/maintain-file-version-history-when-movingcopying/</guid>
      <description>I&amp;rsquo;m working on a requirement to copy files from one document library to another document library in a sub-site. I figured this wouldn&amp;rsquo;t be horribly difficult to do but turns out it&amp;rsquo;s not as simple as you might think and for some reason, although I found many questions about how to do it, I found very few answers. From the things I&amp;rsquo;ve read out there it&amp;rsquo;s apparently relatively easy if you&amp;rsquo;re moving documents within the same site&amp;hellip; apparently the Move method works and I read where someone suggesting using SPExport and SPImport.</description>
    </item>
    
    <item>
      <title>Add BCS Secondary Fields to a custom list definition</title>
      <link>https://juliemturner.net/post/add-bcs-secondary-fields-in-custom-list-definition/</link>
      <pubDate>Thu, 12 May 2011 19:15:37 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/add-bcs-secondary-fields-in-custom-list-definition/</guid>
      <description>When working with BCS data and creating an external data column in a list or library it is often desirable to show some or all of the secondary fields. In the SharePoint UI, this is a simple task, completed by checking off the fields to capture for viewing, searching, filtering, and sorting later.
However, when you&amp;rsquo;re building your list or library using a custom list definition schema.xml file this is not as simple.</description>
    </item>
    
  </channel>
</rss>
