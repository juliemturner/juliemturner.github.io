<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TypeScript on Veni, Vidi, Vici</title>
    <link>https://juliemturner.net/tags/typescript/</link>
    <description>Recent content in TypeScript on Veni, Vidi, Vici</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>julie.turner@sympraxisconsulting.com (Julie Turner)</managingEditor>
    <webMaster>julie.turner@sympraxisconsulting.com (Julie Turner)</webMaster>
    <copyright>Julie Turner ~ All rights reserved</copyright>
    <lastBuildDate>Thu, 05 Jan 2023 21:22:00 +0000</lastBuildDate><atom:link href="https://juliemturner.net/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Console Log Better Practices with PnPjs V3</title>
      <link>https://juliemturner.net/post/better-practices-console-log-pnpjs/</link>
      <pubDate>Sat, 27 May 2023 09:51:56 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/better-practices-console-log-pnpjs/</guid>
      <description>I was recently asked by a conference attendee to help him understand when to use the @pnp/logging package that we ship with PnPjs.
This is an excellent question, and I&amp;rsquo;ve addressed it somewhat before in a previous post called Resolve to Log. All of the guidance I included about the package in that post still applies, however the examples references V2 of the library. To recap there is the ability to create a ConsoleLogger, a FunctionalLogger, or a custom listener class and then register that listener to the PnPjs timeline via the PnPLogging behavior.</description>
    </item>
    
    <item>
      <title>Getting Started with PnPjs</title>
      <link>https://juliemturner.net/post/getting-started-pnpjs/</link>
      <pubDate>Tue, 17 Jan 2023 15:08:31 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/getting-started-pnpjs/</guid>
      <description>This content has also been posted on Microsoft 365 Platform Community Blog.Introduction As a co-maintainer of the PnPjs library I know it can be difficult for those just starting out with the library. I wanted to introduce a blog post that goes into more depth about how to start your journey. Let&amp;rsquo;s drive right in.
What is PnPjs PnPjs is a collection of fluent libraries for consuming SharePoint, Graph, and Office 365 REST APIs.</description>
    </item>
    
    <item>
      <title>SharePoint Framework Application Customizer Cross-Site Page Loading</title>
      <link>https://juliemturner.net/post/spfx-appcustomizer-pageloading/</link>
      <pubDate>Thu, 05 Sep 2019 13:21:48 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/spfx-appcustomizer-pageloading/</guid>
      <description>I suspect, like Elio Struyf and Velin Georgiev before him, we&amp;rsquo;re all suffering from PTSD trying to properly load an application customizer into modern pages. It all started with an issue posted in the sp-dev-docs repo that was about partial page load across site collections but devolved into and issue with the OnInit function firing multiple times. Velin’s post describing his solution to the issue starts with a masterful breakdown of the page loading cycle and his need to track page hits.</description>
    </item>
    
    <item>
      <title>Tip: React JS - Fragments streamline your DOM</title>
      <link>https://juliemturner.net/post/reactjs-fragments/</link>
      <pubDate>Thu, 18 Jul 2019 14:04:15 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/reactjs-fragments/</guid>
      <description>This quick post is going to fall into my Tips &amp;amp; Tricks category as it’s information readily available but if you didn’t know to look for it you probably wouldn’t have found it. In version 16.2 React JS introduced the notion of &amp;ldquo;Fragments&amp;rdquo;. A Fragment is basically an empty container that you can use in a react component to group a set of children together without adding additional nodes into the DOM.</description>
    </item>
    
    <item>
      <title>Resolve to Log</title>
      <link>https://juliemturner.net/post/resolve-to-log/</link>
      <pubDate>Mon, 31 Dec 2018 18:51:56 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/resolve-to-log/</guid>
      <description>This post has been updated in a more recent post Console Log Better Practices with PnPjs V3.My Sympraxis partner Marc Anderson mentioned that we’ve been talking about PnPJS packages for SharePoint Framework a lot lately and called out that I would be blogging about utilizing the logging package in his post Using PnPJS and Async/Await to Really Simplify Your API Calls. If you haven’t checked it out and aren’t using PnPJS and the Async/Await method instead of Promises in your SharePoint Framework solutions, you should give it a read.</description>
    </item>
    
    <item>
      <title>Tip: Implementing &#39;Nav&#39; Office Fabric UI React Component</title>
      <link>https://juliemturner.net/post/nav-officeui-fabric-component/</link>
      <pubDate>Tue, 31 Jul 2018 23:55:05 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/nav-officeui-fabric-component/</guid>
      <description>This post is meant to be a quick supplement to the documentation provided by Microsoft around the Nav component of the Fluent UI. This Nav component gives you a control that you either create URL links or maybe more commonly, support navigation via code. For general links, where the URL is either a route or some other page, the implementation of the INavLinkGroup[] and INavLink is quite straight forward, just provide a Key, Name, and URL with a couple other optional parameters.</description>
    </item>
    
    <item>
      <title>Conquer your dev toolchain in &#39;Classic&#39; SharePoint – Part 4</title>
      <link>https://juliemturner.net/post/conquer-your-dev-toolchain-4/</link>
      <pubDate>Tue, 16 Jan 2018 14:43:38 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/conquer-your-dev-toolchain-4/</guid>
      <description>For this last post I want to take what we’ve learned and add the final pieces that have you creating web parts in the same way you would modern SPFx web parts and solutions. We’re going to start by discussing TypeScript and then briefly touch on Sass and how to include these languages into your new Webpack/Gulp environment.
TypeScript is becoming almost ubiquitous in modern web development. The pros are numerous, my favorites are the ability to write code to target older browser with modern capabilities, and the ability to use a version of intellisense to validate your objects properties and methods.</description>
    </item>
    
    <item>
      <title>Conquer your dev toolchain in &#39;Classic&#39; SharePoint - Part 3</title>
      <link>https://juliemturner.net/post/conquer-your-dev-toolchain-3/</link>
      <pubDate>Thu, 11 Jan 2018 14:29:46 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/conquer-your-dev-toolchain-3/</guid>
      <description>In our last post I went through the gulp process we were implementing to watch our files and upload them into an appropriate SharePoint library so that we can test our work inside SharePoint regardless of if SharePoint was version 2007 or SharePoint Online. Now we’re going to take things further and formalize our process. One of the tools the SharePoint Framework (SPFx) uses is Webpack. Webpack’s main goal is to take the many files that you create as a developer and bundle them all together into one JavaScript file.</description>
    </item>
    
    <item>
      <title>Conquer your dev toolchain in &#39;Classic&#39; SharePoint - Part 2</title>
      <link>https://juliemturner.net/post/conquer-your-dev-toolchain-2/</link>
      <pubDate>Tue, 09 Jan 2018 14:47:29 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/conquer-your-dev-toolchain-2/</guid>
      <description>In the first post in this series I discussed some of the benefits of formalizing your client-side development process and then a bit about starting the process of tooling up. A common scenario to develop our own client-side solutions in SharePoint is to point a Content Editor (CEWP) or Script Editor (SEWP) web part at our custom html, css, and js files that are sitting in a document library somewhere in our environment.</description>
    </item>
    
    <item>
      <title>Conquer your dev toolchain in &#39;Classic&#39; SharePoint - Part 1</title>
      <link>https://juliemturner.net/post/conquer-your-dev-toolchain-1/</link>
      <pubDate>Fri, 05 Jan 2018 16:20:59 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/conquer-your-dev-toolchain-1/</guid>
      <description>Last year, around this time, Marc and I agreed we should write a blog series on our development process. As often happens good intentions get buried in other commitments, but I’ve finally managed to circle back on this topic which I’m finding has become more important than ever. Over the last year the SharePoint Framework has taken off. Although it still doesn’t support the paradigm that I most often am developing for - the full-page app hosted in SharePoint - I still think it’s a great model for development.</description>
    </item>
    
    <item>
      <title>Streamline ADAL implementation: Extending SharePoint with the Microsoft Graph – Part 4</title>
      <link>https://juliemturner.net/post/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-4/</link>
      <pubDate>Wed, 30 Aug 2017 13:25:59 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-4/</guid>
      <description>Introduction When I last left you (in Part 3) we had completed the round-trip journey that is learning all the facets to accessing the Microsoft Graph API (MSGraph) through an Azure Application and the ADAL.js library. A significant portion of our time was spent simply on the different ways to leverage ADAL.js depending on the framework you were using. In this next installment we&amp;rsquo;re going to go one step further and streamline our implementation of ADAL, in AngularJS specifically, but with broader implications to any web based framework.</description>
    </item>
    
    <item>
      <title>SharePoint &#43; Flow (&#43; Azure Functions): Launching a Microsoft Flow from Client-Side Code</title>
      <link>https://juliemturner.net/post/launch-power-automate-with-code/</link>
      <pubDate>Wed, 05 Jul 2017 20:29:23 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/launch-power-automate-with-code/</guid>
      <description>The requirement seemed deceptively simple… and it was, somewhat… simple. I&amp;rsquo;ll start with showing you how very simple it is to launch a Microsoft Flow (&amp;ldquo;flow&amp;rdquo;) from your client-side code hosted, well… wherever. I will give you this caveat, launching a flow this way requires no authentication. The URL is entirely obscure, but if you’re concerned that the flow you’re starting does something you only want to allow authenticated users in your organization to do then you may want to rethink this.</description>
    </item>
    
    <item>
      <title>Getting Results: Extending SharePoint with ADAL and the Microsoft Graph API - Part 3</title>
      <link>https://juliemturner.net/post/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-3/</link>
      <pubDate>Tue, 31 Jan 2017 14:56:05 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-3/</guid>
      <description>Introduction In Part 1, I discussed the background and setup information you would need to successfully embark on a client site widget for SharePoint that accesses the Microsoft Graph API (MSGraphAPI). In Part 2, we went in depth to the various ways of utilizing the adal.js and adal-angular.js libraries for authentication. Now, here in Part 3 we’re going to get right into the nuts and bolts of a real solution that does the following:</description>
    </item>
    
    <item>
      <title>ADAL authorization: Extending SharePoint with the Microsoft Graph – Part 2</title>
      <link>https://juliemturner.net/post/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-2/</link>
      <pubDate>Thu, 26 Jan 2017 14:02:36 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-2/</guid>
      <description>Introduction In Part 1 of this series I covered all the setup needed to start your Microsoft Graph API (MSGraphAPI) client side widget. In Part 2, we’re going to dive into the many ways to use adal.js and its counterpart adal-angular.js. I’ve included the same resources I included in Part 1, under the section for ADAL you’ll find a lot of references to Cloud Identity blog by Vittorio Bertocci who has blogged extensively on the library, explaining in depth the technical workings of it.</description>
    </item>
    
    <item>
      <title>Getting Started: Extending SharePoint with ADAL and the Microsoft Graph API – Part 1</title>
      <link>https://juliemturner.net/post/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-1/</link>
      <pubDate>Tue, 24 Jan 2017 13:32:10 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-1/</guid>
      <description>When Marc and I were at Ignite this past September, #SharePoint was the most tweeted hashtag. We heard a lot about the new SharePoint Framework (SPFx), which was clearly the focus for developers. But another oft-discussed technology topic centered on the expansion of the Microsoft Graph API (MSGraphAPI). It’s clearly going to be the API of choice going forward to access all Office 365 content, but its maturity is still early days.</description>
    </item>
    
    <item>
      <title>Code Creep: SharePoint &#34;CDN&#34; with Document Libraries</title>
      <link>https://juliemturner.net/post/code-creep-sharepoint-cdn/</link>
      <pubDate>Tue, 06 Sep 2016 14:00:00 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/code-creep-sharepoint-cdn/</guid>
      <description>Centralizing your SharePoint client side code “Code Creep”… no it’s not the latest thriller movie out of Hollywood, although it probably could be. I’m referring to the sprawl of client side code files that are stored when implementing client side web parts or &amp;ldquo;widgets&amp;rdquo; in SharePoint. A common solution for implementing &amp;ldquo;widgets&amp;rdquo; in SharePoint is to store the files in a document library, linking to them with a CEWP that will then run and render your “widget”.</description>
    </item>
    
    <item>
      <title>Enter key gone bad</title>
      <link>https://juliemturner.net/post/enter-key-gone-bad/</link>
      <pubDate>Fri, 18 Mar 2016 16:12:50 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/enter-key-gone-bad/</guid>
      <description>This morning I had an issue trying to implement a Phone Directory on a client’s home page. The UI incorporated a First Name and a Last Name input box and a “Go” button. But as we all know, users like to hit Enter, and we all want to try and support the best user experiences we can. However, SharePoint&amp;rsquo;s default implementation of the Enter key can sometimes put the page in edit mode…</description>
    </item>
    
    <item>
      <title>Widget Wrangler Webcast and New Release</title>
      <link>https://juliemturner.net/post/widget-wrangler-webcast-and-new-release/</link>
      <pubDate>Mon, 14 Mar 2016 20:36:26 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/widget-wrangler-webcast-and-new-release/</guid>
      <description>This content has also been posted on Bob German&amp;#39;s Vantage Point.Widget Wrangler Webcast and New Release Here’s a quick update on the Widget Wrangler – the light-weight JavaScript framework that helps you build flexible widgets that can be used in SharePoint content editor web parts, add-in parts, or really pretty much everywhere.
The Widget Wrangler was featured in a webcast on Channel 9 today (Video has been removed). The Office team’s Vesa Juvonen interviewed WW creators Julie Turner and Bob German, who explained the framework and demonstrated how to use it with AngularJS, jQuery, and plain old JavaScript.</description>
    </item>
    
    <item>
      <title>Flexible SharePoint Development with Widget Wrangler</title>
      <link>https://juliemturner.net/post/widget-wrangler/</link>
      <pubDate>Wed, 13 Jan 2016 22:00:00 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/widget-wrangler/</guid>
      <description>This content has also been posted on Bob German&amp;#39;s Vantage Point.What’s a widget, and why should I care? In economics, a widget is a name for a generic gadget or manufactured good; on the web, a widget is a generic piece of web functionality running on a page. What makes widgets special is that, unlike controls in ASP.NET or directives in AngularJS, widgets are generally released separately from the web page that hosts them, and are often deployed by end users.</description>
    </item>
    
  </channel>
</rss>
