<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Veni, Vidi, Vici</title>
    <link>https://juliemturner.net/tags/javascript/</link>
    <description>Recent content in JavaScript on Veni, Vidi, Vici</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>julie.turner@sympraxisconsulting.com (Julie Turner)</managingEditor>
    <webMaster>julie.turner@sympraxisconsulting.com (Julie Turner)</webMaster>
    <copyright>Julie Turner ~ All rights reserved</copyright>
    <lastBuildDate>Thu, 05 Jan 2023 21:22:00 +0000</lastBuildDate><atom:link href="https://juliemturner.net/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Console Log Better Practices with PnPjs V3</title>
      <link>https://juliemturner.net/post/better-practices-console-log-pnpjs/</link>
      <pubDate>Sat, 27 May 2023 09:51:56 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/better-practices-console-log-pnpjs/</guid>
      <description>I was recently asked by a conference attendee to help him understand when to use the @pnp/logging package that we ship with PnPjs.
This is an excellent question, and I&amp;rsquo;ve addressed it somewhat before in a previous post called Resolve to Log. All of the guidance I included about the package in that post still applies, however the examples references V2 of the library. To recap there is the ability to create a ConsoleLogger, a FunctionalLogger, or a custom listener class and then register that listener to the PnPjs timeline via the PnPLogging behavior.</description>
    </item>
    
    <item>
      <title>SPFx Anchor Tags - Hitting the Target</title>
      <link>https://juliemturner.net/post/spfx-anchor-tags/</link>
      <pubDate>Wed, 08 Aug 2018 18:17:18 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/spfx-anchor-tags/</guid>
      <description>If you’re developing SharePoint Framework web parts you may have run across an issue whereby your anchor tags will not honor the target=”_blank” attribute allowing you to open a url in a new browser tab. The issue manifests itself only when your goal is to open another SharePoint page from a SharePoint page, i.e. the href is in the SharePoint domain. The reason for this is SharePoint’s built in but rather complex Page Router.</description>
    </item>
    
    <item>
      <title>Conquer your dev toolchain in &#39;Classic&#39; SharePoint – Part 4</title>
      <link>https://juliemturner.net/post/conquer-your-dev-toolchain-4/</link>
      <pubDate>Tue, 16 Jan 2018 14:43:38 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/conquer-your-dev-toolchain-4/</guid>
      <description>For this last post I want to take what we’ve learned and add the final pieces that have you creating web parts in the same way you would modern SPFx web parts and solutions. We’re going to start by discussing TypeScript and then briefly touch on Sass and how to include these languages into your new Webpack/Gulp environment.
TypeScript is becoming almost ubiquitous in modern web development. The pros are numerous, my favorites are the ability to write code to target older browser with modern capabilities, and the ability to use a version of intellisense to validate your objects properties and methods.</description>
    </item>
    
    <item>
      <title>Conquer your dev toolchain in &#39;Classic&#39; SharePoint - Part 3</title>
      <link>https://juliemturner.net/post/conquer-your-dev-toolchain-3/</link>
      <pubDate>Thu, 11 Jan 2018 14:29:46 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/conquer-your-dev-toolchain-3/</guid>
      <description>In our last post I went through the gulp process we were implementing to watch our files and upload them into an appropriate SharePoint library so that we can test our work inside SharePoint regardless of if SharePoint was version 2007 or SharePoint Online. Now we’re going to take things further and formalize our process. One of the tools the SharePoint Framework (SPFx) uses is Webpack. Webpack’s main goal is to take the many files that you create as a developer and bundle them all together into one JavaScript file.</description>
    </item>
    
    <item>
      <title>Conquer your dev toolchain in &#39;Classic&#39; SharePoint - Part 2</title>
      <link>https://juliemturner.net/post/conquer-your-dev-toolchain-2/</link>
      <pubDate>Tue, 09 Jan 2018 14:47:29 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/conquer-your-dev-toolchain-2/</guid>
      <description>In the first post in this series I discussed some of the benefits of formalizing your client-side development process and then a bit about starting the process of tooling up. A common scenario to develop our own client-side solutions in SharePoint is to point a Content Editor (CEWP) or Script Editor (SEWP) web part at our custom html, css, and js files that are sitting in a document library somewhere in our environment.</description>
    </item>
    
    <item>
      <title>Conquer your dev toolchain in &#39;Classic&#39; SharePoint - Part 1</title>
      <link>https://juliemturner.net/post/conquer-your-dev-toolchain-1/</link>
      <pubDate>Fri, 05 Jan 2018 16:20:59 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/conquer-your-dev-toolchain-1/</guid>
      <description>Last year, around this time, Marc and I agreed we should write a blog series on our development process. As often happens good intentions get buried in other commitments, but I’ve finally managed to circle back on this topic which I’m finding has become more important than ever. Over the last year the SharePoint Framework has taken off. Although it still doesn’t support the paradigm that I most often am developing for - the full-page app hosted in SharePoint - I still think it’s a great model for development.</description>
    </item>
    
    <item>
      <title>SharePoint REST Date/Time field Item Updates</title>
      <link>https://juliemturner.net/post/sharepoint-rest-datetime-update/</link>
      <pubDate>Mon, 06 Nov 2017 20:25:15 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/sharepoint-rest-datetime-update/</guid>
      <description>A recent comment on my blog post “SharePoint time, is not your time, is not their time.” has prompted me to create a short addendum post that specifically references updates and how your thinking might differ from displaying SharePoint date/time values. To recap our example, I was discussing how to manipulate the date values to have your client-side code mimic (or not) the regional settings of your SharePoint site. The question was raised about how to deal with dates when doing POST to a SharePoint list or library from your client-side code.</description>
    </item>
    
    <item>
      <title>Streamline ADAL implementation: Extending SharePoint with the Microsoft Graph – Part 4</title>
      <link>https://juliemturner.net/post/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-4/</link>
      <pubDate>Wed, 30 Aug 2017 13:25:59 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-4/</guid>
      <description>Introduction When I last left you (in Part 3) we had completed the round-trip journey that is learning all the facets to accessing the Microsoft Graph API (MSGraph) through an Azure Application and the ADAL.js library. A significant portion of our time was spent simply on the different ways to leverage ADAL.js depending on the framework you were using. In this next installment we&amp;rsquo;re going to go one step further and streamline our implementation of ADAL, in AngularJS specifically, but with broader implications to any web based framework.</description>
    </item>
    
    <item>
      <title>SharePoint &#43; Flow (&#43; Azure Functions): Launching a Microsoft Flow from Client-Side Code</title>
      <link>https://juliemturner.net/post/launch-power-automate-with-code/</link>
      <pubDate>Wed, 05 Jul 2017 20:29:23 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/launch-power-automate-with-code/</guid>
      <description>The requirement seemed deceptively simple… and it was, somewhat… simple. I&amp;rsquo;ll start with showing you how very simple it is to launch a Microsoft Flow (&amp;ldquo;flow&amp;rdquo;) from your client-side code hosted, well… wherever. I will give you this caveat, launching a flow this way requires no authentication. The URL is entirely obscure, but if you’re concerned that the flow you’re starting does something you only want to allow authenticated users in your organization to do then you may want to rethink this.</description>
    </item>
    
    <item>
      <title>Utilizing ngOfficeUIFabric People Picker in SharePoint</title>
      <link>https://juliemturner.net/post/utilizing-ngofficeuifabric-people-picker-in-sharepoint/</link>
      <pubDate>Wed, 24 May 2017 12:41:14 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/utilizing-ngofficeuifabric-people-picker-in-sharepoint/</guid>
      <description>One of the great joys of developing custom forms in SharePoint is developing the controls for some of the more complicated field types, specifically the Taxonomy Picker and the People Picker. If you’re sensing sarcasm, you would be correct. There are brave souls out there who recreated these components for us that utilize no less than five (and sometimes more) Microsoft Javascript libraries. The reality is, for the People Picker, which is what I’m going to be discussing today, you’re really looking for a type ahead input field that filters a list of people that you can retrieve from SharePoint.</description>
    </item>
    
    <item>
      <title>How to work with SharePoint datetime localization/timezones in JavaScript</title>
      <link>https://juliemturner.net/post/sharepoint-datetime/</link>
      <pubDate>Mon, 17 Apr 2017 23:54:27 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/sharepoint-datetime/</guid>
      <description>If you develop client side solutions for SharePoint you’ve either run into this or you will run into the following scenario. SharePoint stores all its date/time fields in UTC time. The site collections, sites, and the users, can have their own time zone settings. If you’re using SharePoint out of the box because all the content is rendered on the server and pushed to the client with all the date/time translation has been done for you.</description>
    </item>
    
    <item>
      <title>Getting Results: Extending SharePoint with ADAL and the Microsoft Graph API - Part 3</title>
      <link>https://juliemturner.net/post/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-3/</link>
      <pubDate>Tue, 31 Jan 2017 14:56:05 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-3/</guid>
      <description>Introduction In Part 1, I discussed the background and setup information you would need to successfully embark on a client site widget for SharePoint that accesses the Microsoft Graph API (MSGraphAPI). In Part 2, we went in depth to the various ways of utilizing the adal.js and adal-angular.js libraries for authentication. Now, here in Part 3 we’re going to get right into the nuts and bolts of a real solution that does the following:</description>
    </item>
    
    <item>
      <title>ADAL authorization: Extending SharePoint with the Microsoft Graph – Part 2</title>
      <link>https://juliemturner.net/post/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-2/</link>
      <pubDate>Thu, 26 Jan 2017 14:02:36 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-2/</guid>
      <description>Introduction In Part 1 of this series I covered all the setup needed to start your Microsoft Graph API (MSGraphAPI) client side widget. In Part 2, we’re going to dive into the many ways to use adal.js and its counterpart adal-angular.js. I’ve included the same resources I included in Part 1, under the section for ADAL you’ll find a lot of references to Cloud Identity blog by Vittorio Bertocci who has blogged extensively on the library, explaining in depth the technical workings of it.</description>
    </item>
    
    <item>
      <title>Getting Started: Extending SharePoint with ADAL and the Microsoft Graph API – Part 1</title>
      <link>https://juliemturner.net/post/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-1/</link>
      <pubDate>Tue, 24 Jan 2017 13:32:10 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-1/</guid>
      <description>When Marc and I were at Ignite this past September, #SharePoint was the most tweeted hashtag. We heard a lot about the new SharePoint Framework (SPFx), which was clearly the focus for developers. But another oft-discussed technology topic centered on the expansion of the Microsoft Graph API (MSGraphAPI). It’s clearly going to be the API of choice going forward to access all Office 365 content, but its maturity is still early days.</description>
    </item>
    
    <item>
      <title>Use REST to create SharePoint Document Set (and set metadata)</title>
      <link>https://juliemturner.net/post/sp-docset-metadata-rest/</link>
      <pubDate>Mon, 14 Nov 2016 20:16:14 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/sp-docset-metadata-rest/</guid>
      <description>A quick post today to augment what&amp;rsquo;s out there in the &amp;ldquo;Googleverse&amp;rdquo;. I needed to create a Document Set in client side code, and went out to find the appropriate calls to make that happen. To update the metadata on the folder you create (which is all a Document Set really is under the covers), you simply make an &amp;ldquo;almost&amp;rdquo; normal list item update call. So the following is the various &amp;ldquo;functions&amp;rdquo; you need and how to string them together to do this task.</description>
    </item>
    
    <item>
      <title>Special Characters in REST ListItem Metadata</title>
      <link>https://juliemturner.net/post/special-characters-in-rest-listitem-metadata/</link>
      <pubDate>Mon, 12 Sep 2016 21:07:17 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/special-characters-in-rest-listitem-metadata/</guid>
      <description>I&amp;rsquo;m constantly trying to remember which way to encode content when making calls to the server while developing client side solutions for SharePoint. Usually it&amp;rsquo;s some form of JavaScript&amp;rsquo;s encodeURI()/encodeURIComponent() functions&amp;hellip; but this latest one gave me a bit of trouble until I finally figured it out which encoding to use and, almost as important, when to apply it.
When making RESTful calls to update or create data in a SharePoint list you must include the &amp;ldquo;__metadata&amp;rdquo; (two underscores followed by &amp;lsquo;metadata&amp;rsquo;) property in the information object you send on the data property of the call.</description>
    </item>
    
    <item>
      <title>Code Creep: SharePoint &#34;CDN&#34; with Document Libraries</title>
      <link>https://juliemturner.net/post/code-creep-sharepoint-cdn/</link>
      <pubDate>Tue, 06 Sep 2016 14:00:00 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/code-creep-sharepoint-cdn/</guid>
      <description>Centralizing your SharePoint client side code “Code Creep”… no it’s not the latest thriller movie out of Hollywood, although it probably could be. I’m referring to the sprawl of client side code files that are stored when implementing client side web parts or &amp;ldquo;widgets&amp;rdquo; in SharePoint. A common solution for implementing &amp;ldquo;widgets&amp;rdquo; in SharePoint is to store the files in a document library, linking to them with a CEWP that will then run and render your “widget”.</description>
    </item>
    
    <item>
      <title>Sympraxis Development Process</title>
      <link>https://juliemturner.net/post/sympraxis-development-process/</link>
      <pubDate>Tue, 16 Aug 2016 17:23:47 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/sympraxis-development-process/</guid>
      <description>Marc and I discussed in our August Sympraxis Newsletter starting a blog series to share what we’re learning while implementing a SharePoint client side development process. So this is my first post on the topic, and here’s a link to his first post… it’s interesting to see how different our perspectives on the process were.
In all my previous experience I’ve either been in a team or in a regulated industry or both.</description>
    </item>
    
    <item>
      <title>Enter key gone bad</title>
      <link>https://juliemturner.net/post/enter-key-gone-bad/</link>
      <pubDate>Fri, 18 Mar 2016 16:12:50 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/enter-key-gone-bad/</guid>
      <description>This morning I had an issue trying to implement a Phone Directory on a client’s home page. The UI incorporated a First Name and a Last Name input box and a “Go” button. But as we all know, users like to hit Enter, and we all want to try and support the best user experiences we can. However, SharePoint&amp;rsquo;s default implementation of the Enter key can sometimes put the page in edit mode…</description>
    </item>
    
    <item>
      <title>Widget Wrangler Webcast and New Release</title>
      <link>https://juliemturner.net/post/widget-wrangler-webcast-and-new-release/</link>
      <pubDate>Mon, 14 Mar 2016 20:36:26 +0000</pubDate>
      <author>julie.turner@sympraxisconsulting.com (Julie Turner)</author>
      <guid>https://juliemturner.net/post/widget-wrangler-webcast-and-new-release/</guid>
      <description>This content has also been posted on Bob German&amp;#39;s Vantage Point.Widget Wrangler Webcast and New Release Here’s a quick update on the Widget Wrangler – the light-weight JavaScript framework that helps you build flexible widgets that can be used in SharePoint content editor web parts, add-in parts, or really pretty much everywhere.
The Widget Wrangler was featured in a webcast on Channel 9 today (Video has been removed). The Office team’s Vesa Juvonen interviewed WW creators Julie Turner and Bob German, who explained the framework and demonstrated how to use it with AngularJS, jQuery, and plain old JavaScript.</description>
    </item>
    
  </channel>
</rss>
