<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Veni, Vidi, Vici</title>
    <link>https://juliemturner.net/</link>
    <description>Julie Turner Blog on Microsoft 365 (O365), SharePoint, Microsoft Teams, development and extensibility expert with SharePoint Framework (SPFx)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>Julie Turner</managingEditor>
    <webMaster>Julie Turner</webMaster>
    <copyright>2023 Julie Turner ~ All rights reserved</copyright>
    
    <lastBuildDate>Fri, 01 Dec 2023 21:00:00 +0000</lastBuildDate>
    
    
    <atom:link href="https://juliemturner.net/index.xml" rel="self" type="application/rss+xml" />
    

    
    
    
    
      
    
    
    <item>
      <title>ADAL authorization: Extending SharePoint with the Microsoft Graph – Part 2</title>
      <link>https://juliemturner.net/post/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-2/</link>
      <pubDate>Thu, 26 Jan 2017 14:02:36 +0000</pubDate>
      <author>Julie Turner</author>
      <guid>https://juliemturner.net/post/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-2/</guid>
      <description>Introduction In Part 1 of this series I covered all the setup needed to start your Microsoft Graph API (MSGraphAPI) client side widget. In Part 2, we’re going to dive into the many ways to use adal.js and its counterpart adal-angular.js. I’ve included the same resources I included in Part 1, under the section for ADAL you’ll find a lot of references to Cloud Identity blog by Vittorio Bertocci who has blogged extensively on the library, explaining in depth the technical workings of it.</description>
    </item>
    
    <item>
      <title>Getting Started: Extending SharePoint with ADAL and the Microsoft Graph API – Part 1</title>
      <link>https://juliemturner.net/post/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-1/</link>
      <pubDate>Tue, 24 Jan 2017 13:32:10 +0000</pubDate>
      <author>Julie Turner</author>
      <guid>https://juliemturner.net/post/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-1/</guid>
      <description>When Marc and I were at Ignite this past September, #SharePoint was the most tweeted hashtag. We heard a lot about the new SharePoint Framework (SPFx), which was clearly the focus for developers. But another oft-discussed technology topic centered on the expansion of the Microsoft Graph API (MSGraphAPI). It’s clearly going to be the API of choice going forward to access all Office 365 content, but its maturity is still early days.</description>
    </item>
    
    <item>
      <title>Use REST to create SharePoint Document Set (and set metadata)</title>
      <link>https://juliemturner.net/post/sp-docset-metadata-rest/</link>
      <pubDate>Mon, 14 Nov 2016 20:16:14 +0000</pubDate>
      <author>Julie Turner</author>
      <guid>https://juliemturner.net/post/sp-docset-metadata-rest/</guid>
      <description>A quick post today to augment what&amp;rsquo;s out there in the &amp;ldquo;Googleverse&amp;rdquo;. I needed to create a Document Set in client side code, and went out to find the appropriate calls to make that happen. To update the metadata on the folder you create (which is all a Document Set really is under the covers), you simply make an &amp;ldquo;almost&amp;rdquo; normal list item update call. So the following is the various &amp;ldquo;functions&amp;rdquo; you need and how to string them together to do this task.</description>
    </item>
    
    <item>
      <title>Special Characters in REST ListItem Metadata</title>
      <link>https://juliemturner.net/post/special-characters-in-rest-listitem-metadata/</link>
      <pubDate>Mon, 12 Sep 2016 21:07:17 +0000</pubDate>
      <author>Julie Turner</author>
      <guid>https://juliemturner.net/post/special-characters-in-rest-listitem-metadata/</guid>
      <description>I&amp;rsquo;m constantly trying to remember which way to encode content when making calls to the server while developing client side solutions for SharePoint. Usually it&amp;rsquo;s some form of JavaScript&amp;rsquo;s encodeURI()/encodeURIComponent() functions&amp;hellip; but this latest one gave me a bit of trouble until I finally figured it out which encoding to use and, almost as important, when to apply it.
When making RESTful calls to update or create data in a SharePoint list you must include the &amp;ldquo;__metadata&amp;rdquo; (two underscores followed by &amp;lsquo;metadata&amp;rsquo;) property in the information object you send on the data property of the call.</description>
    </item>
    
    <item>
      <title>Code Creep: SharePoint &#34;CDN&#34; with Document Libraries</title>
      <link>https://juliemturner.net/post/code-creep-sharepoint-cdn/</link>
      <pubDate>Tue, 06 Sep 2016 14:00:00 +0000</pubDate>
      <author>Julie Turner</author>
      <guid>https://juliemturner.net/post/code-creep-sharepoint-cdn/</guid>
      <description>Centralizing your SharePoint client side code “Code Creep”… no it’s not the latest thriller movie out of Hollywood, although it probably could be. I’m referring to the sprawl of client side code files that are stored when implementing client side web parts or &amp;ldquo;widgets&amp;rdquo; in SharePoint. A common solution for implementing &amp;ldquo;widgets&amp;rdquo; in SharePoint is to store the files in a document library, linking to them with a CEWP that will then run and render your “widget”.</description>
    </item>
    
    <item>
      <title>Sympraxis Development Process</title>
      <link>https://juliemturner.net/post/sympraxis-development-process/</link>
      <pubDate>Tue, 16 Aug 2016 17:23:47 +0000</pubDate>
      <author>Julie Turner</author>
      <guid>https://juliemturner.net/post/sympraxis-development-process/</guid>
      <description>Marc and I discussed in our August Sympraxis Newsletter starting a blog series to share what we’re learning while implementing a SharePoint client side development process. So this is my first post on the topic, and here’s a link to his first post… it’s interesting to see how different our perspectives on the process were.
In all my previous experience I’ve either been in a team or in a regulated industry or both.</description>
    </item>
    
    <item>
      <title>The man with the “bacon covered donut” could not be ignored</title>
      <link>https://juliemturner.net/post/joining-sympraxis/</link>
      <pubDate>Mon, 09 May 2016 14:00:00 +0000</pubDate>
      <author>Julie Turner</author>
      <guid>https://juliemturner.net/post/joining-sympraxis/</guid>
      <description>I recently attended a multi-day event at the Microsoft campus in Redmond, WA. Early in the morning and blurry-eyed from battling the time change, I found my way into the event room to see Marc D. Anderson in an aisle seat plugging away at his computer with a mouthwatering bacon covered donut sitting daintily on a paper napkin at his elbow… that, my friends, is a conversation starter!
Sometimes in life, things are just obvious really quickly.</description>
    </item>
    
    <item>
      <title>Enter key gone bad</title>
      <link>https://juliemturner.net/post/enter-key-gone-bad/</link>
      <pubDate>Fri, 18 Mar 2016 16:12:50 +0000</pubDate>
      <author>Julie Turner</author>
      <guid>https://juliemturner.net/post/enter-key-gone-bad/</guid>
      <description>This morning I had an issue trying to implement a Phone Directory on a client’s home page. The UI incorporated a First Name and a Last Name input box and a “Go” button. But as we all know, users like to hit Enter, and we all want to try and support the best user experiences we can. However, SharePoint&amp;rsquo;s default implementation of the Enter key can sometimes put the page in edit mode…</description>
    </item>
    
    <item>
      <title>Widget Wrangler Webcast and New Release</title>
      <link>https://juliemturner.net/post/widget-wrangler-webcast-and-new-release/</link>
      <pubDate>Mon, 14 Mar 2016 20:36:26 +0000</pubDate>
      <author>Julie Turner</author>
      <guid>https://juliemturner.net/post/widget-wrangler-webcast-and-new-release/</guid>
      <description>This content has also been posted on Bob German&amp;#39;s Vantage Point.Widget Wrangler Webcast and New Release Here’s a quick update on the Widget Wrangler – the light-weight JavaScript framework that helps you build flexible widgets that can be used in SharePoint content editor web parts, add-in parts, or really pretty much everywhere.
The Widget Wrangler was featured in a webcast on Channel 9 today (Video has been removed). The Office team’s Vesa Juvonen interviewed WW creators Julie Turner and Bob German, who explained the framework and demonstrated how to use it with AngularJS, jQuery, and plain old JavaScript.</description>
    </item>
    
    <item>
      <title>Flexible SharePoint Development with Widget Wrangler</title>
      <link>https://juliemturner.net/post/widget-wrangler/</link>
      <pubDate>Wed, 13 Jan 2016 22:00:00 +0000</pubDate>
      <author>Julie Turner</author>
      <guid>https://juliemturner.net/post/widget-wrangler/</guid>
      <description>This content has also been posted on Bob German&amp;#39;s Vantage Point.What’s a widget, and why should I care? In economics, a widget is a name for a generic gadget or manufactured good; on the web, a widget is a generic piece of web functionality running on a page. What makes widgets special is that, unlike controls in ASP.NET or directives in AngularJS, widgets are generally released separately from the web page that hosts them, and are often deployed by end users.</description>
    </item>
    
  </channel>
</rss>