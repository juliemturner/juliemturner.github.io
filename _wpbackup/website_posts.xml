<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->
<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->
<!-- generator="WordPress/6.1.1" created="2022-12-08 20:58" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>
  <channel>
    <title>Veni, Vidi, Vici</title>
    <link>https://julieturner.net</link>
    <description>Musings and Solutions for SharePoint, Microsoft 365, and Azure</description>
    <pubDate>Thu, 08 Dec 2022 20:58:36 +0000</pubDate>
    <language>en-US</language>
    <wp:wxr_version>1.2</wp:wxr_version>
    <wp:base_site_url>https://julieturner.net</wp:base_site_url>
    <wp:base_blog_url>https://julieturner.net</wp:base_blog_url>
    <wp:author>
      <wp:author_id>1</wp:author_id>
      <wp:author_login>
        <![CDATA[jturnerwp]]>
      </wp:author_login>
      <wp:author_email>
        <![CDATA[julie@julieturner.net]]>
      </wp:author_email>
      <wp:author_display_name>
        <![CDATA[Julie Turner, MVP]]>
      </wp:author_display_name>
      <wp:author_first_name>
        <![CDATA[Julie]]>
      </wp:author_first_name>
      <wp:author_last_name>
        <![CDATA[Turner]]>
      </wp:author_last_name>
    </wp:author>
    <generator>https://wordpress.org/?v=6.1.1</generator>
    <image>
      <url>https://julieturner.net/wp-content/uploads/2017/09/cropped-julieturner_icon-32x32.png</url>
      <title>Veni, Vidi, Vici</title>
      <link>https://julieturner.net</link>
      <width>32</width>
      <height>32</height>
    </image>
    <site xmlns="com-wordpress:feed-additions:1">116959429</site>
    <item>
      <title>
        <![CDATA[Special Characters in REST ListItem Metadata]]>
      </title>
      <link>https://julieturner.net/2016/09/special-characters-in-rest-listitem-metadata/</link>
      <pubDate>Mon, 12 Sep 2016 21:07:17 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/index.php/2016/09/special-characters-in-rest-listitem-metadata/</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<p><a class="asset-img-link" href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01b8d21c1368970c-pi" style="float: right;"><img alt="Heximage" class="asset  asset-image at-xid-6a0154324289e5970c01b8d21c1368970c img-responsive" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01b8d21c1368970c-320wi" style="margin: 0px 0px 5px 5px;" title="Heximage" /></a>I&#39;m constantly trying to remember which way to encode content when making calls to the server while developing client side solutions for <a class="zem_slink" href="http://en.wikipedia.org/wiki/SharePoint" rel="wikipedia" target="_blank" title="SharePoint">SharePoint</a>. &#0160;Usually it&#39;s some form of <a class="zem_slink" href="http://en.wikipedia.org/wiki/JavaScript" rel="wikipedia" target="_blank" title="JavaScript">JavaScript</a>&#39;s <a href="http://www.w3schools.com/jsref/jsref_encodeuri.asp">encodeURI()</a>/<a href="http://www.w3schools.com/jsref/jsref_encodeuricomponent.asp">encodeURIComponent()</a> functions... but this latest one gave me a bit of trouble until I finally figured it out which&#0160;encoding to use and, almost as important, when to apply it.</p>
<p>When making RESTful calls to update or create data in a SharePoint list you must include the &quot;__metadata&quot; (two underscores followed by &#39;metadata&#39;) property in the information object you send on the data property of the call. &#0160;If you have a list with the <span style="text-decoration: underline;"><strong>internal</strong></span>&#0160;name &quot;Clients&quot; and your data property object is called &quot;item&quot; then you would do something like&#0160;the following:</p>
<p><code>item.__metadata: {&quot;type&quot;: &quot;SP.Data.ClientsListItem&quot;}</code></p>
<p>However, if your list&#39;s <span style="text-decoration: underline;"><strong>internal</strong></span> name has any spaces or special characters you must encode the list name in this property differently than you&#39;re encoding it for the REST url which (most often) uses the list&#39;s <span style="text-decoration: underline;"><strong>display</strong></span> name. &#0160;But what type of encoding you may ask... the full ASCII hex value plus a leading and trailing underscore is the answer. &#0160;So for instance:</p>
<p>List with <span style="text-decoration: underline;"><strong>internal</strong></span> name &quot;Client_Information&quot; would look like:<br /><code>item.__metadata: {&quot;type&quot;: &quot;SP.Data.Client_x005f_InformationListItem&quot;}</code></p>
<p>and a list with<span style="text-decoration: underline;"><strong> internal</strong></span> name&#0160;&quot;Client Information&quot; would look like:<br /><code>item.__metadata: {&quot;type&quot;: &quot;SP.Data.Client_x0020_InformationListItem&quot;}</code></p>
<p><em>Here&#39;s one reference to an <a href="http://www.ascii.cl/htmlcodes.htm">ASCII chart</a> but there&#39;s hundreds available.</em></p>
<p>Now,&#0160;when you&#39;re making your REST&#0160;call, in the <a class="zem_slink" href="http://en.wikipedia.org/wiki/Uniform_Resource_Locator" rel="wikipedia" target="_blank" title="Uniform Resource Locator">URL</a> you would use the lists <span style="text-decoration: underline;"><strong>display</strong></span> name (because that&#39;s what getbytitle expects) and it would look something like:</p>
<p><code>&lt;SharePoint site URL&gt;/_api/web/lists/getbytitle(&#39;Client_Information&#39;)/items(1)</code></p>
<p>or</p>
<p><code>&lt;SharePoint site URL&gt;/_api/web/lists/getbytitle(&#39;Client Information&#39;)/items(1)</code></p>
<p>In the case of the list item with these special characters you can wrap the list name in the afore mentioned encodeURIComponent() function, something like...</p>
<p><code>var url = &quot;&lt;SharePoint site URL&gt;/_api/web/lists/getbytitle(&#39;&quot; + encodeURIComponent(&#39;Client Information&#39;) + &quot;&#39;)/items(1)&quot;</code></p>
<p>but in general I find it works just fine without it.</p>
<p>Hope the clarification helps someone else.</p>
<p>UPDATE: And now that I shared all that insight, guess what?! &#0160;You don&#39;t need any of it. &#0160;Check out Marc&#39;s <a href="http://sympmarc.com/2016/05/02/making-your-rest-calls-simpler-by-changing-the-metadata-setting/">blog post</a> where he explains&#0160;the &quot;odata&quot; setting in your request header!</p>
<p>Happy Coding!</p>
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[I'm constantly trying to remember which way to encode content when making calls to the server while developing client side solutions for SharePoint.  Usually it's some form of JavaScript's encodeURI()/encodeURIComponent() functions... but this latest one gave me a bit of trouble until I finally figured it out which encoding to use and, almost as important, when to apply it.
]]>
      </excerpt:encoded>
      <wp:post_id>6</wp:post_id>
      <wp:post_date>
        <![CDATA[2016-09-12 16:07:17]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2016-09-12 21:07:17]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2016-09-12 16:07:17]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2016-09-12 21:07:17]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[closed]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[special-characters-in-rest-listitem-metadata]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="post_tag" nicename="space">
        <![CDATA[space]]>
      </category>
      <category domain="category" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="category" nicename="javascript">
        <![CDATA[Javascript]]>
      </category>
      <category domain="category" nicename="rest">
        <![CDATA[REST]]>
      </category>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="post_tag" nicename="sharepoint">
        <![CDATA[SharePoint]]>
      </category>
      <category domain="post_tag" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="post_tag" nicename="o365">
        <![CDATA[O365]]>
      </category>
      <category domain="post_tag" nicename="rest">
        <![CDATA[REST]]>
      </category>
      <category domain="post_tag" nicename="__metadata">
        <![CDATA[__metadata]]>
      </category>
      <category domain="post_tag" nicename="listitem">
        <![CDATA[ListItem]]>
      </category>
      <category domain="post_tag" nicename="javascript">
        <![CDATA[JavaScript]]>
      </category>
      <category domain="post_tag" nicename="ascii">
        <![CDATA[ASCII]]>
      </category>
      <category domain="post_tag" nicename="hex">
        <![CDATA[hex]]>
      </category>
      <category domain="post_tag" nicename="special-characters">
        <![CDATA[special characters]]>
      </category>
      <wp:comment>
        <wp:comment_id>611</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Steve]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[msdn64@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[198.81.129.193]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-11-18 09:09:03]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-11-18 14:09:03]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Julie, 

Great Post 

and also, a leading underscore in the listname must be completely removed (not just changed to _x005f_) 

Steve]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1574086144.070362091064453125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1574086454.93064594268798828125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>648</wp:comment_id>
        <wp:comment_author>
          <![CDATA[love thakker]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[lthakker02@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://developersfunworld.blogspot.com/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[43.250.158.243]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-08-24 10:33:08]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-08-24 15:33:08]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[thank you for the details of encode of space and underscore values.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1598283189.1262071132659912109375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1598283721.8103630542755126953125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Code Creep - SharePoint "CDN"]]>
      </title>
      <link>https://julieturner.net/2016/09/code-creep-sharepoint-cdn/</link>
      <pubDate>Tue, 06 Sep 2016 14:00:00 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/index.php/2016/09/code-creep-sharepoint-cdn/</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<h3><em>Centralizing your SharePoint client side code</em></h3>
“Code Creep”… no it’s not the latest thriller movie out of Hollywood, although it probably could be. I’m referring to the sprawl of client side code files that are stored when implementing client side web parts or "widgets" in SharePoint. A common solution for implementing "widgets" in SharePoint is to store the files in a document library, linking to them with a CEWP that will then run and render your “widget”. This is an effective way to implement customization when you don’t have administrator access, or you're running in SharePoint online, or you just prefer the flexibility of a client side development paradigm; as some of my colleagues in the SharePoint community like to say, “It isn’t code, it’s content.” However, depending on the complexities of your environment and your development staff, this kind of end run can cause maintenance issues at best, horror stories at worst.

There are many ways to solve the code creep problem, from simple to incredibly complicated, and of course, as with everything there is no one-size-fits-all answer. Some guidance from my perspective centers on where your code will be implemented and how big your farm/tenant(s) are.

I’ve created a matrix below that outlines my thoughts on the subject.

<img class="aligncenter wp-image-32 size-full" src="http://julieturner.net/wp-content/uploads/2016/09/solutionmatrix.png" alt="solutionmatrix" width="863" height="364" />

&nbsp;

The solution I’m going to focus on in this post is the “Store code in a site collection specifically for your client side code”, or basically creating a private CDN (<a href="https://en.wikipedia.org/wiki/Content_delivery_network">Content Delivery Network</a>) within your own tenant/farm.  In my opinion this is a fairly good solution to balance code maintenance/deployment without going all the way to the cost and complexities of implementing a full blown commercial style CDN.

The scenario is that you have developed or are developing client side “widgets” that you’re going to use in multiple site collections within a farm or tenant. My solution is to build a site collection specifically for storing the code needed to render those widgets.  And by code I mean all the html, js, and css files.  Any third party libraries that are already hosted on a CDN could be referenced separately and do not need to be added to your internal CDN, however, my rule of thumb is that if your SharePoint farm is behind a firewall and people access it from an internal network, you should consider downloading copies of the libraries you need and host them locally.  No reason why your solutions shouldn't work if the internet goes down.

So let’s say I create a new site collection and I call it CDN so that my URL is http(s)://mysharepointurl/sites/CDN

I can disable most site collection and site features, leaving enabled at a minimum:
<ul>
 	<li>SharePoint Server Standard Site Collection features</li>
 	<li>SharePoint Server Standard Site features</li>
</ul>
Everything else is optional depending on what you want to do in your CDN, create approval workflows, etc…

The key to the solution is getting the permissions right. We want to make sure that everyone that needs access to code at any time now or in the future can get it, otherwise the “widgets” won’t work for them. But what we’d also like is the ability to version and “lightly” test that code without affecting them. So to that end we’re going to give “All authenticated users”/”Everyone” read permission to our CDN site by adding them to our CDN Visitors group. We can then add our developers to the CDN Members group, and we can add our CDN Managers or Administrators to the CDN Owners group. Now, by default, unless we break inheritance, all our code “libraries” will be able to be read by everyone and managed by our developers.

With permissions taken care of, we can create a library or libraries in the site to hold our code. There’s a lot of ways this could be organized and you should certainly take some time to think it through. Maybe you want to have different groups of developers have contribute rights to different code bases, etc… the key is to make sure you don’t remove visitors read rights from any of your code libraries and that you modify the versioning settings of your library as follows, the key being that we want Draft Item Security set to "Only users who can edit items".

&nbsp;

This allows you to “publish” major versions of the code files and until you do the user will continue to use the last published version.  Now you to do some “light” testing on the modifications to make sure everything is working before you “publish” it to the users.  I do not encourage you to use this method as a full out <a href="https://en.wikipedia.org/wiki/Application_lifecycle_management">ALM </a>solution but as a light weight one it can work well.  You could also in theory create approval workflows that would “publish” the content for you, but that’s a different post.

<img class="alignnone size-full wp-image-35" src="http://julieturner.net/wp-content/uploads/2016/09/LibrarySettings.png" alt="librarysettings" width="797" height="772" />

&nbsp;

<img class="alignleft size-medium wp-image-27" src="http://julieturner.net/wp-content/uploads/2016/09/MinorVersion_LibView-300x159.png" alt="minorversion_libview" width="300" height="159" />So here’s an example of how you might use this.  I’ve uploaded some files into my “Code” library and note that they’re all minor versions of the file.  I’ve added myself as a CDN Member so I have the ability to “Contribute” to this library.

Now I need to insert the widget on the page and to do that I need to be a tad fancy.  This is because I cannot use a simple CEWP and point to the URL of an html file in my CDN Code library because CEWP cannot cross site collections.  To get around this you can either write your own binding function or utilize the <a href="https://github.com/Widget-Wrangler/ww">Widget Wrangler</a> to bootstrap your code simply into the page.  Below is an example of using a SEWP for that purpose with the Widget Wrangler to implement an AngularJS 1.x application:

<pre class="lang:xhtml decode:true " ><div>
     <div ng-controller="ctrlCDNDemo" ng-include="'/sites/cdn/Code/CDN/cdndemo.html'"/>
     <script type="text/javascript" src="/sites/cdn/Code/pnp-ww.min.js"
          ww-appName="CDNDemo"
          ww-appType="Angular"
          ww-appCss='[{"src": "~/CDN/cdndemo.css"}]'
          ww-appScripts='[
             {"src": "https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular.min.js", "priority":0},
             {"src": "~/CDN/cdndemo.js", "priority":1}]'>
    </script> 
</div></pre> 

<img class="alignright size-medium wp-image-31" src="http://julieturner.net/wp-content/uploads/2016/09/PuttingCodeOnPage-300x158.png" alt="puttingcodeonpage" width="300" height="158" />The key here is that this code embedded onto the page is benign. Other than referencing the files that implement the solution it really doesn’t do anything and therefore it won’t need to be changed in order to modify the widget’s UX.

Now if we save the page and view it we’ll see our widget. Because our files have not been published my end users see nothing.

<img class="aligncenter size-full wp-image-26" src="http://julieturner.net/wp-content/uploads/2016/09/MinorVersion_Julie.png" alt="minorversion_julie" width="686" height="432" />

&nbsp;

If I then publish all the files for this “widget” you can see that the end user now sees the same thing I do.

<img class="aligncenter size-full wp-image-37" src="http://julieturner.net/wp-content/uploads/2016/09/MajorVersion_User.png" alt="majorversion_user" width="1143" height="692" />

&nbsp;

So, as you can see there are real ways to help avoid the dreaded "code creep".  From simply storing all your code in a library in the site collection to utilizing a commercial CDN.  The moral of the story is there is no one-size-fits-all answer, so you need to assess your needs and try and centralize your client side code in a way that makes the most sense for your environment allowing you to manage your solutions from one location.]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>7</wp:post_id>
      <wp:post_date>
        <![CDATA[2016-09-06 09:00:00]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2016-09-06 14:00:00]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2016-11-14 15:29:32]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2016-11-14 20:29:32]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[closed]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[code-creep-sharepoint-cdn]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="post_tag" nicename="sharepoint">
        <![CDATA[SharePoint]]>
      </category>
      <category domain="post_tag" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="post_tag" nicename="o365">
        <![CDATA[O365]]>
      </category>
      <category domain="category" nicename="widget-wrangler">
        <![CDATA[Widget Wrangler]]>
      </category>
      <category domain="post_tag" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="post_tag" nicename="widget-wrangler">
        <![CDATA[Widget Wrangler]]>
      </category>
      <category domain="post_tag" nicename="2010">
        <![CDATA[2010]]>
      </category>
      <category domain="category" nicename="alm">
        <![CDATA[ALM]]>
      </category>
      <category domain="category" nicename="development">
        <![CDATA[Development]]>
      </category>
      <category domain="category" nicename="sharepoint-version">
        <![CDATA[SharePoint Version]]>
      </category>
      <category domain="post_tag" nicename="2016">
        <![CDATA[2016]]>
      </category>
      <category domain="post_tag" nicename="alm">
        <![CDATA[ALM]]>
      </category>
      <category domain="post_tag" nicename="development">
        <![CDATA[Development]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_jetpack_dont_email_post_to_subs]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
    </item>
    <item>
      <title>
        <![CDATA[Sympraxis Development Process - part 1]]>
      </title>
      <link>https://julieturner.net/2016/08/sympraxis-development-process-part-1/</link>
      <pubDate>Tue, 16 Aug 2016 17:23:47 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/index.php/2016/08/sympraxis-development-process-part-1/</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<p><a class="asset-img-link" href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01b7c888176d970b-pi" style="float: right;"><img alt="DevProcess" border="0" class="asset  asset-image at-xid-6a0154324289e5970c01b7c888176d970b img-responsive" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01b7c888176d970b-800wi" style="margin: 0px 0px 5px 5px;" title="DevProcess" /></a>Marc and I discussed in our <a href="http://sympraxisconsulting.com/newsletters-archive/" target="_blank">August Sympraxis Newsletter</a> starting a blog series to share what we’re learning while implementing a <a class="zem_slink" href="http://sharepoint.microsoft.com" rel="homepage" target="_blank" title="Microsoft SharePoint">SharePoint</a> client side development process.&#0160; So this is my first post on the topic, and here’s a <a href="http://wp.me/p1IDpQ-6Cb" target="_blank">link</a> to his first post… it’s interesting to see how different our perspectives on the process were.</p>
<p>In all my previous experience I’ve either been in a team or in a regulated industry or both.&#0160; All of these scenarios dictate that you have at least some process in place and in the case of the regulated pharma industry, rigorous processes in place.&#0160;</p>
<p>I’m an organized soul in general and grew up with a mother who should have been a professional organizer and is probably a tad OCD.&#0160; I remember her doing the accounting for our family business.&#0160; She had a color coding system of pens (red, green, blue) for checking off cleared checks, deposits, and other issues in the checkbook register and whose desk was always immaculate (and still is) with her black pen, red pen, and mechanical pencil diagonally aligned across the right top corner of her blotter (that she really didn’t need as the thing was/is pristine).&#0160; Don’t even get me started on how she “cleaned” the labels right off the knobs on the stove.</p>
<p>So to say that joining Marc’s rather haphazard method of source control was a shock is potentially an understatement but what’s fabulous was that he was happy, and I even might speculate a bit excited, to have something at least a little more organized.&#0160; And further, with two of us, sometimes working for the same client, and sometimes on the same project, it just really needed to happen.&#0160;</p>
<p>Ok, so first we had to agree on source control.&#0160; We knew we were going to the cloud.&#0160; As a two-person team whom work out of our homes we don’t want to have a server footprint.&#0160; I grant you we could have spun up some Azure space and built servers, but seriously, why would we do that when there are great cloud choices and as my friends know… I don’t do infrastructure!&#0160;</p>
<p>Given Marc wanted absolutely NOTHING to do with <a class="zem_slink" href="http://www.microsoft.com/visualstudio" rel="homepage" target="_blank" title="Microsoft Visual Studio">Visual Studio</a> proper as an <a class="zem_slink" href="http://en.wikipedia.org/wiki/Integrated_development_environment" rel="wikipedia" target="_blank" title="Integrated development environment">IDE</a> I felt like that somewhat ruled out <a class="zem_slink" href="http://en.wikipedia.org/wiki/Team_Foundation_Server" rel="wikipedia" target="_blank" title="Team Foundation Server">TFS</a> Online.&#0160; I should point out that TFS Online can be configured to use <a class="zem_slink" href="http://git-scm.com" rel="homepage" target="_blank" title="Git (software)">GitHub</a> so that you can have the best of both worlds.&#0160; TFS has some other tools for managing the project and tasks in addition to source control so if you’re working with a larger team or in a more regulated environment this may be a good choice for you.&#0160; You can find out more about the integration <a href="https://blogs.msdn.microsoft.com/visualstudioalm/2013/01/30/getting-started-with-git-in-visual-studio-and-team-foundation-service/" target="_blank">here</a>.</p>
<p>Now that we choose <a href="https://github.com">GitHub</a> as our repository and I had made the switch from Visual Studio proper to Visual Studio Code for most of my development we decided to start with a small GitHub plan.&#0160; I created a few private repos one of which was for clients.&#0160; Within a few weeks we realized the error of our ways.&#0160; The client’s repo although nicely organized was cumbersome to sync with since there was so much in there.&#0160; Luckily we hadn’t gotten that far and we were only at that point working on one client together.&#0160; So we upped our GitHub plan, created a repo per client, shuffled our code around, and are back on track.</p>
<p>The next thing we had to tackle was the absolutely horrendously cumbersome task of modifying files and testing them in SharePoint. &#0160;As Marc explains in his first <a href="http://wp.me/p1IDpQ-6Cb" target="_blank">post on this topic</a>, his process was to literally edit in place by opening the library where the files were with the “Open with Explorer” which while he may have been fine with I literally couldn’t even get myself to do.&#0160; I think I may have even blacked out temporarily when I saw him do it.</p>
<p>However, for all this looseness in process, I did really like that he stored his files in the site collections master page gallery.&#0160; As he <a href="http://wp.me/p1IDpQ-6Cb" target="_blank">explains</a> in his post everyone has read access to the location, but very few should have access to actually wander into the library.&#0160; So in this, I ended up picking up Marc’s process, but that meant that instead of being able to drag and drop my file changes into the browser window I had to manually upload them… I thought I was going to lose my mind.&#0160;</p>
<p>We started researching various ways to get the files into SharePoint using <a href="http://gulpjs.com/">gulp</a>.&#0160; Luckily there were some options out there, two that come to mind.&#0160; One by our respected colleague <a href="https://twitter.com/wictor" target="_blank">Wictor Wilen</a>&#0160;– <a href="https://github.com/wictorwilen/gulp-spsync" target="_blank">gulp-spsync</a>.&#0160; I think it would have been a great solution but requires you have tenant admin access and in our experience we almost never are granted that level of access to our client’s tenants so we needed something else.&#0160; If, however you’re working on your own tenant and have that level of access it’s probably worth a look.&#0160; We then found <a href="https://www.npmjs.com/package/spsave" target="_blank">spsave</a>&#0160;which we found works pretty well for uploading files to SharePoint online and SharePoint 2013 on premises and have implemented it along with <a href="https://github.com/jgable/gulp-cache" target="_blank">gulp-cache</a>&#0160;to only upload files that have changed.</p>
<p>So at this point we have a pretty streamlined process for getting the files into SharePoint as we work.&#0160; In the future we need to add more to validating the code we’re writing such as <a href="https://en.wikipedia.org/wiki/Lint_(software)" target="_blank">linting</a>&#0160;and various other things… more to come as we implement.</p>
<p>Meanwhile, if you have specific questions, please feel free to add them in the comments and we&#39;ll attempt to cover them.</p>
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[Marc and I discussed in our August Sympraxis Newsletter starting a blog series to share what we’re learning while implementing a SharePoint client side development process.  So this is my first post on the topic, and here’s a link to his first post… it’s interesting to see how different our perspectives on the process were.
]]>
      </excerpt:encoded>
      <wp:post_id>8</wp:post_id>
      <wp:post_date>
        <![CDATA[2016-08-16 12:23:47]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2016-08-16 17:23:47]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2016-08-16 12:23:47]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2016-08-16 17:23:47]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[closed]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[sympraxis-development-process-part-1]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="post_tag" nicename="sharepoint">
        <![CDATA[SharePoint]]>
      </category>
      <category domain="category" nicename="sympraxis">
        <![CDATA[Sympraxis]]>
      </category>
      <category domain="post_tag" nicename="github">
        <![CDATA[GitHub]]>
      </category>
      <category domain="post_tag" nicename="spsave">
        <![CDATA[SPSave]]>
      </category>
      <category domain="post_tag" nicename="tfs">
        <![CDATA[TFS]]>
      </category>
      <category domain="post_tag" nicename="gulp">
        <![CDATA[gulp]]>
      </category>
      <wp:comment>
        <wp:comment_id>2</wp:comment_id>
        <wp:comment_author>
          <![CDATA[John LIu]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[john-liu@outlook.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://johnliu.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[180.189.21.78]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2016-08-16 20:55:51]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2016-08-17 01:55:51]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[In the paragraph starting with "Now that we choose Git " - you probably mean GitHub.
I also wonder if Marc's SPServices being hosted there publically has some influence over this decision.
May be a future topic could cover where do you keep your development tasks - SharePoint tasks, Planner, or GitHub Issues :-)
I liked this article and laughed at your comments on Marc.  I did want to point out that Marc breaks up his articles with images e.g.  GitHub image.  And to me that seems like a better presentation style.
Watch out that sly old dog knows some pretty good tricks.
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>3</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://profile.typepad.com/6p0154324289e5970c</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2016-08-16 21:10:06]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2016-08-17 02:10:06]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hey John... you're point about referencing GitHub by just Git is well taken.  Everyone I talk with in the industry just shortens it to Git and I've probably gotten lazy about it... given the potentially more broad audience I need to probably be complete to be clear.  We'll take your ideas into consideration as we work on our next set of posts.  Thanks for the feedback.
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>4</wp:comment_id>
        <wp:comment_author>
          <![CDATA[JKerski]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://profile.typepad.com/jkerski</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[108.48.95.178]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2016-08-18 17:00:33]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2016-08-18 22:00:33]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[This was a great read.  In your upcoming posts will you be discussing how you manage your production/UAT/development environments with client-side development?  We have been following the model here: <a href="https://www.definitivelogic.com/blog/part-2-javascripting-sharepoint-setup" rel="nofollow">https://www.definitivelogic.com/blog/part-2-javascripting-sharepoint-setup</a>  but I would be very interested to hear how your team is doing it.
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>5</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://profile.typepad.com/6p0154324289e5970c</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2016-08-19 08:23:55]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2016-08-19 13:23:55]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thank JKerski,
This is an excellent question and one we'll definitely address this with some of our thoughts.  In my opinion, there are a lot of ways to handle Life-Cycle Management in SharePoint and most are acceptable as long as they meet your needs.
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[The man with the “bacon covered donut” could not be ignored]]>
      </title>
      <link>https://julieturner.net/2016/05/the-man-with-the-bacon-covered-donut-could-not-be-ignored/</link>
      <pubDate>Mon, 09 May 2016 14:00:00 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/index.php/2016/05/the-man-with-the-bacon-covered-donut-could-not-be-ignored/</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<p><a class="asset-img-link" href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01bb08f4e34a970d-pi" style="float: right;"><img alt="Maplebacondonuts2_bakedbyrachel" class="asset  asset-image at-xid-6a0154324289e5970c01bb08f4e34a970d img-responsive" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01bb08f4e34a970d-320wi" style="margin: 0px 0px 5px 5px;" title="Maplebacondonuts2_bakedbyrachel" /></a></p>
<p>I recently attended a multi-day event at the Microsoft campus in Redmond, WA.&#0160; Early in the morning and blurry-eyed from battling the time change, I found my way into the event room to see <a href="https://twitter.com/sympmarc">Marc D. Anderson</a>&#0160;in an aisle seat plugging away at his computer with a mouthwatering bacon covered donut sitting daintily on a paper napkin at his elbow… that, my friends, is a conversation starter!</p>
<p>Sometimes in life, things are just obvious really quickly.&#0160; I had met Marc years ago through our mutual friend <a href="https://twitter.com/Sadalit">Sadie Van Buren</a> but really didn’t get to know him very well, as is the case with many developer types, I’m way more comfortable talking to my computer than I am talking to people… and I do, sadly, literally talk to my computer as many of my current and former colleagues can attest to.</p>
<p>So there, at that Microsoft event over a bacon donut, we started a new conversation and got reacquainted.&#0160; In this rather short time, it became glaringly obvious that I needed to make the move and join Sympraxis Consulting.&#0160; I have had a wonderful journey at BlueMetal and I cannot say enough good things about the organization as a whole.&#0160; They have super talented people who do amazing work, more cutting edge consulting than any group I’ve ever worked with and I learned so much through that association.&#0160; But it was time for me to take on a new challenge, and spread my wings a bit more.&#0160;</p>
<p>So I’m off, and I think the future looks amazingly bright.&#0160; With our combined skills Sympraxis has a ton to offer organizations looking to implement, improve, and expand their SharePoint platform be it on premises or in the cloud through Office 365 and Azure.&#0160; I’m really excited to be joining Marc and know not only are we going to do great work, but we’re going to have an absolute blast doing it.</p>
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[With our combined skills Sympraxis has a ton to offer organizations looking to implement, improve, and expand their SharePoint platform be it on premise or in the cloud through Office 365 and Azure.  I’m really excited to be joining Marc and know not only are we going to do great work, but we’re going to have an absolute blast doing it.
]]>
      </excerpt:encoded>
      <wp:post_id>9</wp:post_id>
      <wp:post_date>
        <![CDATA[2016-05-09 09:00:00]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2016-05-09 14:00:00]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2016-05-09 09:00:00]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2016-05-09 14:00:00]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[closed]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[the-man-with-the-bacon-covered-donut-could-not-be-ignored]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="uncategorized">
        <![CDATA[Uncategorized]]>
      </category>
      <category domain="post_tag" nicename="sharepoint">
        <![CDATA[SharePoint]]>
      </category>
      <category domain="post_tag" nicename="o365">
        <![CDATA[O365]]>
      </category>
      <category domain="post_tag" nicename="sympraxis-consulting">
        <![CDATA[Sympraxis Consulting]]>
      </category>
      <category domain="post_tag" nicename="marc-d-anderson">
        <![CDATA[Marc D Anderson]]>
      </category>
      <category domain="post_tag" nicename="microsoft">
        <![CDATA[Microsoft]]>
      </category>
    </item>
    <item>
      <title>
        <![CDATA[Enter key gone bad]]>
      </title>
      <link>https://julieturner.net/2016/03/enter-key-gone-bad/</link>
      <pubDate>Fri, 18 Mar 2016 16:12:50 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/index.php/2016/03/enter-key-gone-bad/</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<p><a class="asset-img-link" href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01b8d1b09b23970c-pi" style="float: left;"><img alt="EditGoneWrong" class="asset  asset-image at-xid-6a0154324289e5970c01b8d1b09b23970c img-responsive" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01b8d1b09b23970c-320wi" style="margin: 0px 5px 5px 0px;" title="EditGoneWrong" /></a>This morning I had an issue trying to implement a Phone Directory on a client’s home page.&#0160; The UI incorporated a First Name and a Last Name input box and a “Go” button.&#0160; But as we all know, users like to hit Enter, and we all want to try and support the best user experiences we can. &#0160;However, <a class="zem_slink" href="http://sharepoint.microsoft.com" rel="homepage" target="_blank" title="Microsoft SharePoint">SharePoint</a>&#39;s default implementation&#0160;of the Enter key can sometimes put the page in edit mode…</p>
<p>&#0160;</p>
<p>&#0160;</p>
<p>&#0160;</p>
<p>So how do you get around this… two things..</p>
<ol>
<li>You need to stop the event from propagating, not that this is really the culprit but if you’re doing widget type work it’s just good practice to make sure that what you’re doing doesn’t affect the functionality of the rest of the page.</li>
<li>You need to ignore the SharePoint&#39;s default behavior of the enter key.</li>
</ol>
<p>&#0160;</p>
<p>So what does this look like?</p>
<p>Let’s say you had the following DOM:</p>
<p><code>&lt;div&gt;</code><br /> <code>&#0160;&#0160;&#0160; &lt;div&gt;</code><br /> <code>&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160; &lt;input placeholder=&quot;First&quot; onkeydown=&quot; MYCODE.onEnter();&quot; /&gt;</code><br /> <code>&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160; &lt;input placeholder=&quot;Last&quot; onkeydown=&quot; MYCODE.onEnter();&quot; /&gt;</code><br /> <code>&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160; &lt;input style=&quot;cursor: pointer;&quot; onclick=&quot; MYCODE.go();&quot; /&gt;</code><br /> <code>&#0160;&#0160;&#0160; &lt;/div&gt;</code><br /><code>&lt;/div&gt;</code></p>
<p>And the following script:</p>
<p><code>&lt;script type=&quot;text/javascript&quot;&gt;</code><br /> <code>&#0160;&#0160;&#0160; &quot;use strict&quot;</code><br /> <code>&#0160;&#0160;&#0160; var MYCODE = MYCODE || {};</code><br /> <code>&#0160;&#0160;&#0160; MYCODE.go = function () {</code><br /> <code>&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160; //Code to execute Phone Directory search goes here</code><br /> <code>&#0160;&#0160;&#0160; }</code><br /> <code>&#0160;&#0160;&#0160; MYCODE.onEnter = function onEnter() {</code><br /> <code>&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160; //See options below</code><br /> <code>&#0160;&#0160;&#0160; }</code><br /> <code>&lt;/script&gt;</code></p>
<p>There are a few ways to accomplish the same thing:</p>
<p>Option 1 (Old School):</p>
<pre><code>if (event.keyCode == 13) {
&#0160;&#0160;&#0160;&#0160;MYCODE.go(); <br />&#0160;&#0160;&#0160;&#0160;event.returnValue = false; <br />} </code></pre>
<p>Option 2 (Modern and Sexy):</p>
<pre><code>if (event.keyCode == 13) {<br />&#0160;&#0160;&#0160;&#0160;MYCODE.go(); <br />&#0160;&#0160;&#0160;&#0160;event.preventDefault(); <br />&#0160;&#0160;&#0160;&#0160;event.stopPropagation(); <br />} </code></pre>
<p>Option 3: (Perfectionist)</p>
<pre><code>if (event.keyCode == 13) {<br />&#0160;&#0160;&#0160;&#0160;MYCODE.go(); <br />&#0160;&#0160;&#0160;&#0160;if(event.preventDefault){<br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;event.preventDefault();<br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;event.stopPropagation(); <br />&#0160;&#0160;&#0160;&#0160;}else{ <br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;event.returnValue = false; <br />&#0160;&#0160;&#0160;&#0160;}<br />} <br /><br />Happy Coding!</code></pre>
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[In SharePoint, pressing the enter key on an input box can put the page in edit mode... what JavaScript code is needed to get around it.
]]>
      </excerpt:encoded>
      <wp:post_id>10</wp:post_id>
      <wp:post_date>
        <![CDATA[2016-03-18 11:12:50]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2016-03-18 16:12:50]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2016-03-18 11:12:50]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2016-03-18 16:12:50]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[closed]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[enter-key-gone-bad]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="category" nicename="javascript">
        <![CDATA[Javascript]]>
      </category>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="post_tag" nicename="o365">
        <![CDATA[O365]]>
      </category>
      <category domain="post_tag" nicename="javascript">
        <![CDATA[JavaScript]]>
      </category>
      <category domain="post_tag" nicename="sharepoint-2013">
        <![CDATA[SharePoint 2013]]>
      </category>
      <category domain="post_tag" nicename="spo">
        <![CDATA[SPO]]>
      </category>
      <category domain="post_tag" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="post_tag" nicename="enter">
        <![CDATA[Enter]]>
      </category>
      <category domain="post_tag" nicename="edit-mode">
        <![CDATA[edit mode]]>
      </category>
      <category domain="post_tag" nicename="page">
        <![CDATA[page]]>
      </category>
    </item>
    <item>
      <title>
        <![CDATA[Widget Wrangler Webcast and New Release]]>
      </title>
      <link>https://julieturner.net/2016/03/widget-wrangler-webcast-and-new-release/</link>
      <pubDate>Mon, 14 Mar 2016 20:36:26 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/index.php/2016/03/widget-wrangler-webcast-and-new-release/</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<h1>Widget Wrangler Webcast and New&#0160;Release</h1>
<p><em>(Cross posted at Bob German&#39;s blog, <a href="http://bob1german.com/2016/01/13/flexible-sharepoint-development-with-widget-wrangler/">Bob German&#39;s Vantage Point</a>)</em></p>
<p>Here’s a quick update on the Widget Wrangler – the light-weight JavaScript framework that helps you build flexible widgets that can be used in <a class="zem_slink" href="http://sharepoint.microsoft.com" rel="homepage" target="_blank" title="Microsoft SharePoint">SharePoint</a> content editor web parts, add-in parts, or really pretty much everywhere.</p>
<p><a class="asset-img-link" href="https://channel9.msdn.com/blogs/OfficeDevPnP/PnP-Web-Cast-Introducing-Widget-Wrangler-for-SharePoint-development" style="display: inline;"><img alt="WWChannel9" class="asset  asset-image at-xid-6a0154324289e5970c01b8d1ae7a06970c img-responsive" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01b8d1ae7a06970c-500wi" title="WWChannel9" /></a></p>
<p>The Widget Wrangler was featured in a webcast on Channel 9 today. The Office team’s <a href="https://twitter.com/vesajuvonen">Vesa Juvonen</a> interviewed WW creators <a href="https://twitter.com/jfj1997">Julie Turner</a> and <a href="https://twitter.com/Bob1German">Bob German</a>, who explained the framework and demonstrated how to use it with <a class="zem_slink" href="http://www.angularjs.org/" rel="homepage" target="_blank" title="AngularJS">AngularJS</a>, <a class="zem_slink" href="http://jquery.com" rel="homepage" target="_blank" title="JQuery">jQuery</a>, and plain old <a class="zem_slink" href="http://en.wikipedia.org/wiki/JavaScript" rel="wikipedia" target="_blank" title="JavaScript">JavaScript</a>. Please check it out&#0160;<a href="https://channel9.msdn.com/blogs/OfficeDevPnP/PnP-Web-Cast-Introducing-Widget-Wrangler-for-SharePoint-development">here</a>!</p>
<p>Also today we’re pleased to announce the release of Widget Wrangler version 1.0.1. This new version is backward compatible with the old one; the new release includes:</p>
<ul>
<li>CSS Support – Allows packaging CSS references from within your widget; the Widget Wrangler will efficiently load each CSS file once on each page, even if it’s referenced by multiple widgets</li>
<li>Multi-module support – Allows bootstrapping multiple AngularJS modules within a widget (thanks to Peter Wasonga for the feature suggestion; Peter writes widgets in Kenya)</li>
<li>A new <a class="zem_slink" href="http://www.typescriptlang.org/" rel="homepage" target="_blank" title="TypeScript">TypeScript</a> sample; the Widget Wrangler works the same with TypeScript or JavaScript; this is mainly useful to show how to develop an AnuglarJS widget in TypeScript</li>
<li>Improved/reorganized documentation</li>
</ul>
<p>You can get the new release on our Github repo at&#0160;<a href="https://github.com/Widget-Wrangler/ww">https://github.com/Widget-Wrangler/ww</a>. The Widget Wrangler is also a part of the <a class="zem_slink" href="http://maps.google.com/maps?ll=47.6395972222,-122.12845&amp;spn=0.01,0.01&amp;q=47.6395972222,-122.12845 (Microsoft)&amp;t=h" rel="geolocation" target="_blank" title="Microsoft">Microsoft</a> OfficeDev Patterns and Practices library, and will be updated there in the next PnP release.</p>
<p>Thanks to everyone for your interest and support, and happy widget writing!</p>
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[Here’s a quick update on the Widget Wrangler – the light-weight JavaScript framework that helps you build flexible widgets that can be used in SharePoint content editor web parts, add-in parts, or really pretty much everywhere.
]]>
      </excerpt:encoded>
      <wp:post_id>11</wp:post_id>
      <wp:post_date>
        <![CDATA[2016-03-14 15:36:26]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2016-03-14 20:36:26]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2016-03-14 15:36:26]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2016-03-14 20:36:26]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[closed]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[widget-wrangler-webcast-and-new-release]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="post_tag" nicename="knockoutjs">
        <![CDATA[KnockoutJS]]>
      </category>
      <category domain="post_tag" nicename="jquery">
        <![CDATA[JQuery]]>
      </category>
      <category domain="category" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="post_tag" nicename="office-dev-pnp">
        <![CDATA[Office Dev PnP]]>
      </category>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="post_tag" nicename="sharepoint">
        <![CDATA[SharePoint]]>
      </category>
      <category domain="post_tag" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="post_tag" nicename="o365">
        <![CDATA[O365]]>
      </category>
      <category domain="post_tag" nicename="javascript">
        <![CDATA[JavaScript]]>
      </category>
      <category domain="category" nicename="widget-wrangler">
        <![CDATA[Widget Wrangler]]>
      </category>
      <category domain="post_tag" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="post_tag" nicename="widget-wrangler">
        <![CDATA[Widget Wrangler]]>
      </category>
      <category domain="post_tag" nicename="library">
        <![CDATA[library]]>
      </category>
      <category domain="post_tag" nicename="framework">
        <![CDATA[framework]]>
      </category>
      <category domain="post_tag" nicename="widget">
        <![CDATA[widget]]>
      </category>
      <category domain="post_tag" nicename="pattern">
        <![CDATA[pattern]]>
      </category>
      <category domain="post_tag" nicename="angularjs">
        <![CDATA[AngularJS]]>
      </category>
    </item>
    <item>
      <title>
        <![CDATA[Flexible SharePoint Development with Widget Wrangler]]>
      </title>
      <link>https://julieturner.net/2016/01/widget-wrangler/</link>
      <pubDate>Wed, 13 Jan 2016 22:00:00 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/index.php/2016/01/widget-wrangler/</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<p><em>(Cross posted at Bob German&#39;s blog, <a href="http://bob1german.com/2016/01/13/flexible-sharepoint-development-with-widget-wrangler/">Bob German&#39;s Vantage Point</a>)</em></p>
<h2>What’s a widget, and why should I care?</h2>
<p>In economics, a <a href="https://en.wikipedia.org/wiki/Widget_(economics)">widget</a> is a name for a generic gadget or manufactured good; on the web, a <a href="https://en.wikipedia.org/wiki/Web_widget">widget</a> is a generic piece of web functionality running on a page. What makes widgets special is that, unlike controls in ASP.NET or directives in <a class="zem_slink" href="http://www.angularjs.org/" rel="homepage" target="_blank" title="AngularJS">AngularJS</a>, widgets are generally released separately from the web page that hosts them, and are often deployed by end users.</p>
<p>If you’re reading this blog, you probably know something about Microsoft SharePoint, and this might sound familiar. A widget is a lot like a web part, only much lighter weight. In fact, widgets can easily be hosted in content editor web parts, on a list form, in a SharePoint add-in, or outside of SharePoint. If you&#39;re careful, you can reuse the same widget in all those contexts!</p>
<p>This work comes out of projects that <a href="https://twitter.com/Bob1German">Bob German</a> and I have done at <a href="http://www.bluemetal.com/">BlueMetal</a>; for example, I&#0160;used widgets when I&#0160;developed the web parts on the BlueMetal&#39;s Office 365 intranet. The approach was to use light branding with widgets, with each widget running in a content editor web part.</p>
<p><a class="asset-img-link" href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01bb08aa7de7970d-popup" onclick="window.open( this.href, &#39;_blank&#39;, &#39;width=640,height=480,scrollbars=no,resizable=no,toolbar=no,directories=no,location=no,menubar=no,status=no,left=0,top=0&#39; ); return false" style="display: inline;"><img alt="IntranetWidgets" class="asset  asset-image at-xid-6a0154324289e5970c01bb08aa7de7970d img-responsive" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01bb08aa7de7970d-500wi" title="IntranetWidgets" /></a></p>
<p><em>Widgets on the BlueMetal intranet</em></p>
<p>The widgets in the screen shot are:</p>
<ol>
<li>News feed (driven by SharePoint content)</li>
<li>My Clients and Projects (shows links to the user&#39;s current consulting projects)</li>
<li>Tabbed Calendar, Community, and Discussions (driven by SharePoint content)</li>
<li>Tabbed New Hires and Anniversary carousel (driven by SharePoint content)</li>
<li>Twitter feed</li>
</ol>
<p>They&#39;re all written in HTML and JavaScript, and work equally well on premises or in Office 365. Each widget is an AngularJS application that can be versioned independently and dropped on any page in SharePoint. But, unlike Add-in parts, there are no IFrames. The widgets don&#39;t have to run in content editor web parts - they can run on any web page, so they&#39;re much more flexible.</p>
<p>So the answer to the question, &quot;Why should I care?&quot; is because widgets give you:</p>
<ul>
<li><strong>Flexibility:</strong> Widgets can be versioned independently and moved around freely on web pages in and out of SharePoint</li>
<li><strong>Reusability:</strong> Widgets allow one code set to run in a web part, on a SharePoint form or page, or outside of SharePoint</li>
<li><strong>Maintainability:</strong> Widgets written in an MV* framework like Angular or Knockout are easier to test and maintain</li>
</ul>
<p>Any snippet of HTML with JavaScript can be considered a widget, however good widgets have additional attributes:</p>
<ul>
<li>
<p>They&#39;re isolated so they won&#39;t interfere with the web page that hosts them, or with other widgets on the page. Ideally multiple copies of a widget can run on a page with no interference.</p>
</li>
<li>
<p>They load efficiently so users don&#39;t have to wait a long time for them to render on the page.</p>
</li>
<li>
<p>They&#39;re self contained so they can be reused easily. A widget that depends on various script tags, CSS files, and other elements on a page is more brittle and harder to reuse than a widget that is contained within a single HTML element.</p>
</li>
<li>
<p>They&#39;re developed using the power of modern JavaScript frameworks such as AngularJS for supportability and testability. (This is purely optional, however, and this article will also explore widgets written in jQuery or plain JavaScript.)</p>
</li>
</ul>
<h2>Introducing Widget Wrangler</h2>
<p>Today my colleague <a href="https://twitter.com/Bob1German">Bob German</a> and I are pleased to announce a new, light-weight JavaScript library for managing widgets called the Widget Wrangler. It&#39;s available now <a href="https://github.com/Widget-Wrangler/ww">on Github</a> for your widget wrangling pleasure. It&#39;s also part of the new&#0160;<a href="https://github.com/OfficeDev/PnP/tree/master/Samples/Core.JavaScript">JavaScript Core</a> in the January 2015 release of Microsoft&#39;s <a href="https://github.com/OfficeDev/PnP">OfficeDev Patterns and Practices</a> library (hence the file name <em>pnp-ww.js</em>).</p>
<p>Widget Wrangler:</p>
<ul>
<li>Helps avoid interference with the hosting page and other widgets</li>
<li>Loads scripts efficiently across all widgets on the page</li>
<li>Allows widgets written with MV* frameworks such as AngularJS and KnockOut, as well as plain old javascript.</li>
<li>Helps isolate your code and UI for easy portability to multiple platforms and environments</li>
</ul>
<p>A widget consists of a single HTML element (the <em>widget root</em> - usually a &lt;div&gt;) that contains HTML for the widget, and a script tag that references the Widget Wrangler. The script tag includes custom attributes that tell Widget Wrangler what JavaScript to load and how to &quot;boot&quot; the widget.</p>
<p>For example:</p>
<pre><code>&lt;div&gt;
&lt;div ng-controller=&quot;main as vm&quot;&gt;
&lt;h1&gt;Hello {{vm.name}}&lt;/h1&gt;
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;pnp-ww.js&quot;
ww-appname=&quot;HelloWorld&quot;
ww-apptype=&quot;Angular&quot;
ww-appscripts=&#39;[{&quot;src&quot;: &quot;angular.min.js&quot;, &quot;priority&quot;:0},
{&quot;src&quot;: &quot;script.js&quot;, &quot;priority&quot;:1}
]&#39;&gt;
&lt;/script&gt;
&lt;/div&gt;</code></pre>
<p>The Widget Wrangler (pnp-ww.js) will load in-line, and will take care of loading the scripts the widget needs (in this case Angular and script.js) and bootstrapping the AngularJS application. The custom attributes tell Widget Wrangler how to load the widget:</p>
<table border="1px" style="border-color: #d1d1d1;">
<thead>
<tr>
<th>Tag</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>ww-appname</td>
<td>yes</td>
<td>Used to create a name for the app. In the case of an Angular widget, this is the module that will be passed to the angular.bootstrap function when starting the widget.</td>
</tr>
<tr>
<td>ww-apptype</td>
<td>no</td>
<td>Currently &quot;Angular&quot; is the only supported framework that will auto-bind upon load completion.</td>
</tr>
<tr>
<td>ww-appbind</td>
<td>no</td>
<td>The function to be executed when all the script files have completed loading.</td>
</tr>
<tr>
<td>ww-appscripts</td>
<td>yes</td>
<td>A <a class="zem_slink" href="http://json.org/" rel="homepage" target="_blank" title="JSON">JSON</a> object that defines the javascript files the widget needs in order to run</td>
</tr>
</tbody>
</table>
<p>NOTE: It is necessary to specify ww-apptype (for an Angular widget) OR ww-appbind (to do the binding yourself).</p>
<p>The ww-appscripts element contains a JSON object that tells Widget Wrangler what scripts to load before bootstrapping the widget. This is a collection of objects in which each object contains properties as follows:</p>
<table border="1px" style="border-color: #d1d1d1;">
<thead>
<tr>
<th>Tag</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>src</td>
<td>yes</td>
<td>URL of the script to be loaded; this can be absolute, relative to the page, or by using a tilde prefix, relative to the pnp-ww.js script (for example, src=~/myscript.js)</td>
</tr>
<tr>
<td>priority</td>
<td>yes</td>
<td>An integer indicating the order in which the script should be loaded; first priority 0 scripts will be loaded, then priority 1, etc. Priorities must begin at 0 and not skip any numbers, and scripts in the collection are expected to be in priority order. Multiple scripts can be declared at the same priority level in order to load them concurrently.</td>
</tr>
</tbody>
</table>
<p>A widget can either run as an AngularJS application, which is bound to the widget root, or using a custom binding function specified in the ww-appbind attribute. In the latter case, the widget root DOM element is passed to the binding function so the widget can access the browser DOM relative to the widget root instead of having to find it on the page. This helps to isolate the widget. For example, it&#39;s common practice to hard-code an HTML element ID and then find it with jQuery; this works fine for one widget, but prevents multiple widgets with the same ID.</p>
<p>Widget Wrangler has no dependencies on SharePoint or other script libraries, and works with the same browsers as AngularJS. IE8, which is only supported by a special build of AngularJS 1.3/1.4, is not currently supported - ergo it will not work with SharePoint 2010 which forces the pages to run in IE8 emulation mode. Widget Wrangler works with the same browsers as SharePoint 2013.</p>
<p>Widget Wrangler tries to load the scripts needed by each widget as efficiently as possible, and will only load each script once even if it&#39;s used in multiple widgets. (NOTE: The current implementation determines what scripts are the same using their URL; a future version may be smart enough to identify multiple versions of common libraries at different URL&#39;s.) Use the &quot;priority&quot; property in the ww-appscripts attribute to control parallel script loading; for example all priority 0 scripts will load in parallel, followed by priority 1 scripts, etc. Priority numbers must begin at 0 and must be contiguous (i.e. 0, 1, 2...) In the example above, script.js depends on AngularJS, so AngularJS is given priority 0 (and loads first), and script.js is loaded only when Angular (and any other priority 0) scripts are loaded.</p>
<p>The main repository for the Widget Wrangler is <a href="https://github.com/Widget-Wrangler/ww">here</a>; it&#39;s also a part of the OfficeDev Patterns and Practices Library <a href="https://github.com/OfficeDev/PnP/tree/master/Samples/Core.JavaScript">here</a>. Please use the main repository for access to the Widget Wrangler tester and for pull requests.</p>
<h2><a aria-hidden="true" class="anchor" href="https://github.com/Widget-Wrangler/ww/blob/master/WWBase/Documentation/IntroducingWidgetWrangler.md#widgets-and-javascript-frameworks" id="user-content-widgets-and-javascript-frameworks"></a>Widgets and JavaScript Frameworks</h2>
<p>Widgets can be written using any number of JavaScript frameworks; this section will explore some of the most popular.</p>
<h3><a aria-hidden="true" class="anchor" href="https://github.com/Widget-Wrangler/ww/blob/master/WWBase/Documentation/IntroducingWidgetWrangler.md#angularjs-widgets" id="user-content-angularjs-widgets"></a>AngularJS Widgets</h3>
<p>AngularJS is a favorite framework to use with widgets, mainly because of its MV* design pattern and rich selection of services and directives. However AngularJS was really designed for single-page applications (SPAs) that take over an entire web page. A typical AngularJS application is &quot;auto-bootstrapped&quot; using the ng-app directive; while this is fine for SPAs, the&#0160;<a href="https://docs.angularjs.org/api/ng/directive/ngApp#!">documentation</a> clearly states that you can only have one ng-app directive on a page.</p>
<p>To get around this limitation and allow many widgets on a page, the Widget Wrangler uses the angular.bootstrap() function; there is no hard limit on the number of Angular apps that can run on a page using this method.</p>
<p>(NOTE: If you want to use Widget Wrangler in a page that already uses AngularJS, ensure that the widget doesn&#39;t overlap the existing Angular application - i.e. it can&#39;t be inside the element that is decorated with ng-app. Also ensure the versions of Angular are the same or similar enough that both the SPA and widget(s) will work with either one.)</p>
<p>You can find a simple AngularJS widget at <a href="http://bit.ly/ww-ng1">http://bit.ly/ww-ng1</a>. This sample uses <a href="http://plnkr.co/">Plunker</a> so you can run and experiment with the code right in your web browser. In this sample you&#39;ll see two instances of a Hello World widget which vary only in their view so one of them says goodbye instead of hello. This shows how to embed the view right into the widget so you can make each instance render differently.</p>
<p>A more advanced example can be found at <a href="http://bit.ly/ww-ng2">http://bit.ly/ww-ng2</a>. This example shows a weather forecast, and demonstrates how to pass configuration information - in this case the location of the weather forecast - into the application via the ng-init directive in the view. It also shows how to use ng-include to place the view in an HTML template so it&#39;s shared by all instances of the widget.</p>
<p><a class="asset-img-link" href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01b7c805cdd7970b-popup" onclick="window.open( this.href, &#39;_blank&#39;, &#39;width=640,height=480,scrollbars=no,resizable=no,toolbar=no,directories=no,location=no,menubar=no,status=no,left=0,top=0&#39; ); return false" style="display: inline;"><img alt="WeatherWidgets" class="asset  asset-image at-xid-6a0154324289e5970c01b7c805cdd7970b img-responsive" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01b7c805cdd7970b-500wi" title="WeatherWidgets" /></a></p>
<p><em>Weather Widgets</em></p>
<p>Here is the markup for one of the weather widgets:</p>
<pre><code>&lt;!-- Weather widget for Boston, MA --&gt;
&lt;div class=&quot;weather&quot;&gt;
&lt;div ng-controller=&quot;main as vm&quot; ng-init=&quot;vm.query=&#39;Boston, MA&#39;&quot;&gt;
&lt;h1&gt;{{vm.City}} Weather&lt;/h1&gt;
&lt;div ng-include=&quot;&#39;weatherDisplay.html&#39;&quot; ng-show=&quot;vm.ValidDataLoaded&quot;&gt;&lt;/div&gt;
&lt;p class=&quot;error&quot;&gt;
{{vm.error}}
&lt;/p&gt;
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;pnp-ww.js&quot;
ww-appName=&quot;WeatherApp&quot;
ww-appType=&quot;Angular&quot;
ww-appScripts=&#39;[{&quot;src&quot;: &quot;https://ajax.googleapis.com/ajax/libs/angularjs<br />/1.4.5/angular.min.js&quot;, &quot;priority&quot;:0},
{&quot;src&quot;: &quot;script.js&quot;, &quot;priority&quot;:1},
{&quot;src&quot;: &quot;weatherService.js&quot;, &quot;priority&quot;:2}
]&#39;&gt;
&lt;/script&gt;
&lt;/div&gt;</code></pre>
<p>The Angular controller includes a function to fetch the weather forecast as soon as Angular processes the ng-init binding:</p>
<pre><code>  (function() {
angular
.module(&#39;WeatherApp&#39;, [])
.controller(&#39;main&#39;, [&#39;$scope&#39;, &#39;weatherService&#39;,
function ($scope, weatherService) {
var vm = this;
$scope.$watch(vm.query, function() {
weatherService.GetWeather(vm.query)
.then(function(data) {
// Copy data from the service into the model
vm.City = data.City;
vm.Condition = data.Condition;
vm.Description = data.Description;
vm.IconUrl = data.IconUrl;
vm.Temperatures = data.Temperatures;
vm.Wind = data.Wind;
vm.Gusts = data.Gusts;
vm.Humidity = data.Humidity;
// If we got this far, we have good data
vm.ValidDataLoaded = true;
})
.catch (function(message) {
vm.error = message;
vm.ValidDataLoaded = false;
});
});
}
]); // End Controller()
}());
</code></pre>
<p>A third example at <a href="http://bit.ly/ww-ng3">http://bit.ly/ww-ng3</a> shows how to connect two Angular widgets. This is accomplished via a service that relays messages in the form of JavaScript objects from senders to receivers over named channels.</p>
<p>If you look at the code you may notice that this service communicates via a shared object that hangs off the window object. Normally in Angular a service could store such an object locally, and the service (declared as a factory) would be shared by all who reference it. But that doesn&#39;t work here since each widget is a completely separate Angular application. Modules, services, etc. with the same names are all isolated completely within each widget, and Angular does a great job keeping them separate. In the sample, each sender and receiver widget gets its own service instance, so information is shared outside of Angular in the window object.</p>
<h3><a aria-hidden="true" class="anchor" href="https://github.com/Widget-Wrangler/ww/blob/master/WWBase/Documentation/IntroducingWidgetWrangler.md#knockout-widgets" id="user-content-knockout-widgets"></a>Knockout Widgets</h3>
<p>KnockoutJS is another great example of an MVVM style JavaScript library. There&#39;s an example of simple Knockout widgets at<a href="http://bit.ly/ww-ko1">http://bit.ly/ww-ko1</a>. There are two instances of the widget on the page to demonstrate isolation; here is one of the widgets:</p>
<pre><code>&lt;div&gt;
&lt;h1&gt;Knockout Widget 1&lt;/h1&gt;
&lt;p&gt;Enter a secret message:
&lt;input data-bind=&quot;textInput: message, event: {keyup: messageChanged}&quot; /&gt;
&lt;/p&gt;
&lt;p class=&quot;hidden&quot; data-bind=&quot;css: { hidden: hideMessage }&quot;&gt;&lt;i&gt;
(psssst - don&#39;t tell other widgets, but the message was:
&lt;span class=&quot;secret&quot; data-bind=&quot;text: message&quot;&gt;&lt;/span&gt;
)
&lt;/i&gt;&lt;/p&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;pnp-ww.js&quot;
ww-appName=&quot;MyWidget&quot;
ww-appBind=&quot;myWidget.Load&quot;
ww-appScripts=&#39;[{&quot;src&quot;: &quot;https://cdnjs.cloudflare.com/ajax/libs/knockout/<br />3.4.0/knockout-min.js&quot;, &quot;priority&quot;:0},
{&quot;src&quot;: &quot;script.js&quot;, &quot;priority&quot;:1}
]&#39;&gt;
&lt;/script&gt;
&lt;/div&gt;
</code></pre>
<p>Notice that this time the ww-appBind attribute is specified; this contains the binding function myWidget.Load. script.js contains this function:</p>
<pre><code>var myWidget = myWidget || {};
// Prototype for a ViewModel
myWidget.vm = function() {
this.message = ko.observable(&quot;&quot;);
this.hideMessage = ko.observable(true);
this.messageChanged = function () {
this.hideMessage(this.message() === &#39;&#39;);
};
}
myWidget.Load = function (element) {
// Make a new ViewModel for each widget instance
ko.applyBindings(new myWidget.vm(), element);
}
</code></pre>
<p>Notice how the binding function uses the new keyword to make a new ViewModel object for each widget; without this, isolation would be lost and all the widgets would share the same ViewModel and data.</p>
<h3><a aria-hidden="true" class="anchor" href="https://github.com/Widget-Wrangler/ww/blob/master/WWBase/Documentation/IntroducingWidgetWrangler.md#jquery-widgets" id="user-content-jquery-widgets"></a>jQuery Widgets</h3>
<p>Here&#39;s an example that not only shows a jQuery widget, but demonstrates how to take existing jQuery code and make it into a Widget. In this case, it&#39;s based on <a href="https://jqueryui.com/slider/#colorpicker">this jQuery UI example</a> of a color picker. The original sample includes several references to specific element ID&#39;s, so the code would need to be modified to handle more than one color picker on a page.</p>
<p><a class="asset-img-link" href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01bb08aa7e4c970d-popup" onclick="window.open( this.href, &#39;_blank&#39;, &#39;width=640,height=480,scrollbars=no,resizable=no,toolbar=no,directories=no,location=no,menubar=no,status=no,left=0,top=0&#39; ); return false" style="display: inline;"><img alt="ColorWidgets" class="asset  asset-image at-xid-6a0154324289e5970c01bb08aa7e4c970d img-responsive" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01bb08aa7e4c970d-500wi" title="ColorWidgets" /></a></p>
<p><em>jQueryUI sample made into a widget, now supports multiple instances on a page</em></p>
<p>You can see the widget version at <a href="http://bit.ly/ww-jq1">http://bit.ly/ww-jq1</a>. As you can see, there are two instances of the widget on the page; all the code is shared yet they work independently. To make this work, the following code changes were needed:</p>
<ul>
<li>Change the element ID&#39;s to classes, so it&#39;s legal to have more than one</li>
<li>Add a bootstrap function similar to the Knockout example, that creates a new &quot;controller&quot; for each widget instance</li>
<li>When the widget bootstraps, pass the element into the jQuery code and reference the elements relative to the element. For example, $(&#39;#red&#39;) becomes $(element).find(&#39;.red&#39;)</li>
</ul>
<h3><a aria-hidden="true" class="anchor" href="https://github.com/Widget-Wrangler/ww/blob/master/WWBase/Documentation/IntroducingWidgetWrangler.md#plain-javascript-widgets" id="user-content-plain-javascript-widgets"></a>Plain JavaScript Widgets</h3>
<p>Sometimes less is more, and plain JavaScript is better and faster than using even a light-weight library like jQuery. If you want to use Widget Wrangler on its own, without any other libraries, check out the example at <a href="http://bit.ly/ww-js1">http://bit.ly/ww-js1</a>. This is a widget that Ford Prefect would love!</p>
<p>Notice that it uses the new keyword in the binding function to create a new object for each widget instance. It also generates a unique index for each instance that&#39;s used in a button click attribute. This index is passed into the click event handler to allow it to find the correct instance when the event fires.</p>
<h2><a aria-hidden="true" class="anchor" href="https://github.com/Widget-Wrangler/ww/blob/master/WWBase/Documentation/IntroducingWidgetWrangler.md#widgets-in-sharepoint" id="user-content-widgets-in-sharepoint"></a>Widgets in SharePoint</h2>
<p>The Patterns and Practices library includes <a href="https://github.com/OfficeDev/PnP/tree/master/Samples/Provisioning.MicroSurvey">an example</a> that shows how to use widgets in various kinds of SharePoint projects. The example is a Microsurvey that asks a single question, then shows a simple graph of all the responses to that question.</p>
<p><a class="asset-img-link" href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01b7c805cdfb970b-popup" onclick="window.open( this.href, &#39;_blank&#39;, &#39;width=640,height=480,scrollbars=no,resizable=no,toolbar=no,directories=no,location=no,menubar=no,status=no,left=0,top=0&#39; ); return false" style="display: inline;"><img alt="SurveyWidget" class="asset  asset-image at-xid-6a0154324289e5970c01b7c805cdfb970b img-responsive" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01b7c805cdfb970b-500wi" title="SurveyWidget" /></a></p>
<p><em>Microsurvey Widget - Question and Results Views</em></p>
<p>The example can be packaged and deployed three ways:</p>
<ul>
<li>As a SharePoint Hosted Add-in</li>
<li>Directly in a SharePoint site using drag-and-drop deployment by and end user</li>
<li>Directly in a SharePoint site using PowerShell deployment from a central site, so a single copy of the solution can be used in many sites. This has the advantage that the solution can be updated in one place and the change will be immediately available in all sites.</li>
</ul>
<p>The solution includes a web part and custom new, edit, and display forms for managing the list of questions. It&#39;s also smart enough to deploy its own list storage using JavaScript, so the questions and answers lists are generated the first time the solution is used.</p>
<p>Widgets allow a high degree of reuse in this example. For example, the code to display a question is written as a widget; it appears in the web part (or add-in part), and in the New and Edit forms. Thus one copy of the widget is used in 3 places, reducing code duplication and allowing all of them to be updated by editing the common code.</p>
<p>For a deep dive on the Microsurvey sample, including a quick introduction to AngularJS, check out Bob&#39;s Collab365 talk,<a href="https://youtu.be/bWWCrlfwnlY">Building Flexible SharePoint Solutions with AngularJS</a>. This will show you various ways of using and deploying widgets in SharePoint, however it uses the precursor to Widget Wrangler, which was called InitUI.js. The sample code in github has since been updated to use Widget Wrangler.</p>
<h2><a aria-hidden="true" class="anchor" href="https://github.com/Widget-Wrangler/ww/blob/master/WWBase/Documentation/IntroducingWidgetWrangler.md#the-widget-wrangler-manifesto" id="user-content-the-widget-wrangler-manifesto"></a>The Widget Wrangler Manifesto</h2>
<p>The Widget Wrangler is open source, and we welcome suggestions and pull requests at <a href="https://github.com/Widget-Wrangler/ww">https://github.com/Widget-Wrangler/ww</a>. (Please submit pull requests against the dev branch!) If you&#39;re thinking of contributing, please keep these points in mind. Widget Wrangler:</p>
<ol>
<li>Has no dependencies on any other scripts or frameworks</li>
<li>Is easy to use</li>
<li>Minimizes impact on the overall page when several instances are present</li>
<li>Matches AngularJS 1.x browser support</li>
<li>Is tested and works well with SharePoint Online and SharePoint 2013 or greater, however it in no way depends on SharePoint</li>
</ol>
<h2><a aria-hidden="true" class="anchor" href="https://github.com/Widget-Wrangler/ww/blob/master/WWBase/Documentation/IntroducingWidgetWrangler.md#widget-wrangler-tester" id="user-content-widget-wrangler-tester"></a>Widget Wrangler Tester</h2>
<p>The Widget Wrangler <a href="http://www.github.com/Widget-Wrangler/ww">main repo</a> includes a test program that makes it easy to exercise the library with a large number of widgets on a page.</p>
<p><a class="asset-img-link" href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01b8d18fc32c970c-popup" onclick="window.open( this.href, &#39;_blank&#39;, &#39;width=640,height=480,scrollbars=no,resizable=no,toolbar=no,directories=no,location=no,menubar=no,status=no,left=0,top=0&#39; ); return false" style="display: inline;"><img alt="WidgetTester" class="asset  asset-image at-xid-6a0154324289e5970c01b8d18fc32c970c img-responsive" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01b8d18fc32c970c-500wi" title="WidgetTester" /></a></p>
<p><em>Widget Wrangler Tester</em></p>
<p>The test program is written in ASP.NET, and it dynamically generates test scripts and Angular applications that check to ensure that dependencies are loaded, and that track the elapsed time during the test. To run it, start the WWBase project in Visual Studio on the Test/TestPage.aspx page.</p>
<p>Enter your scenario in the text box on the left side of the page. Each line in the scenario is a widget entered in the form:</p>
<pre><code>AppName:Script1,Script2
</code></pre>
<p>In this example the tester will fabricate two scripts, and set up the Widget Wrangler to first load Script1, then Script2, and then bootstrap the application called AppName. Here&#39;s the widget the test program would generate for this line in a scenario:</p>
<pre><code>&lt;div&gt;
&lt;div ng-controller=&quot;main as vm&quot; <br />         ng-class=&quot;{&#39;passed&#39;: vm.passed, &#39;failed&#39;: !vm.passed}&quot; <br />         ng-init=&quot;vm.counter=&#39;1&#39;&quot;&gt;
Widget {{vm.counter}} {{vm.appName}} {{vm.message}} {{vm.highlight}}
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;../pnp-ww.js&quot;
ww-appname=&quot;AppName&quot;
ww-apptype=&quot;Angular&quot;
ww-appscripts=&#39;[{&quot;src&quot;: &quot;https://ajax.googleapis.com/ajax/libs/<br />angularjs/1.3.15/angular.min.js&quot;, &quot;priority&quot;:0},
{&quot;src&quot;: &quot;testScript.js.aspx?name=Script1&quot;, &quot;priority&quot;:1},<br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;{&quot;src&quot;: &quot;testScript.js.aspx?name=Script2&amp;dependsOn=Script1&quot;, &quot;priority&quot;:2},
{&quot;src&quot;: &quot;testApp.js.aspx?name=AppName&amp;dependsOn=Script1,Script2&quot;,<br /> &quot;priority&quot;:3}]&#39;&gt;
&lt;/script&gt;
&lt;/div&gt;
</code></pre>
<p>You can test parallel script loading by using parenthesis; for example:</p>
<pre><code>MyApp:(S1,S2),S3
</code></pre>
<p>will generate a widget that loads scripts S1 and S2 in parallel, then loads S3 when both of those have loaded.</p>
<p>The test program shows an index for each widget to demonstrate that each one is isolated, and a blinking asterisk to show that the data binding continues to work after all the widgets are loaded. On the right of the screen, you can see a log of scripts loaded and the timings.</p>
<h2><a aria-hidden="true" class="anchor" href="https://github.com/Widget-Wrangler/ww/blob/master/WWBase/Documentation/IntroducingWidgetWrangler.md#backlog" id="user-content-backlog"></a>Backlog</h2>
<p>Here are some of the enhancement ideas on our backlog; please comment and help us set our priorities!</p>
<ul>
<li>Smarter detection of duplicate or already loaded scripts (e.g. AngularJS loaded from two different URL&#39;s)</li>
<li>Version number checking for libraries such as Angular and jQuery, so a widget can declare the range of versions it supports; possible co-existence of multiple library versions (See this <a href="http://plnkr.co/edit/UafWw8A5UucH3VlWr1z5?p=info">proof of concept</a>)</li>
<li>Angular 2.0 support</li>
<li>Diagnostic widget you can add to a page to show load sequence, timings, and exceptions</li>
<li>IE 8 support (to have parity with SharePoint 2013 browser support)</li>
</ul>
<p>&#0160;</p>
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[Announcing a new, light-weight JavaScript library for managing widgets called the Widget Wrangler.
]]>
      </excerpt:encoded>
      <wp:post_id>12</wp:post_id>
      <wp:post_date>
        <![CDATA[2016-01-13 17:00:00]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2016-01-13 22:00:00]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2016-01-13 17:00:00]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2016-01-13 22:00:00]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[closed]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[widget-wrangler]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="post_tag" nicename="knockoutjs">
        <![CDATA[KnockoutJS]]>
      </category>
      <category domain="post_tag" nicename="jquery">
        <![CDATA[JQuery]]>
      </category>
      <category domain="category" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="post_tag" nicename="office-dev-pnp">
        <![CDATA[Office Dev PnP]]>
      </category>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="post_tag" nicename="sharepoint">
        <![CDATA[SharePoint]]>
      </category>
      <category domain="post_tag" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="post_tag" nicename="o365">
        <![CDATA[O365]]>
      </category>
      <category domain="post_tag" nicename="javascript">
        <![CDATA[JavaScript]]>
      </category>
      <category domain="category" nicename="widget-wrangler">
        <![CDATA[Widget Wrangler]]>
      </category>
      <category domain="post_tag" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="post_tag" nicename="widget-wrangler">
        <![CDATA[Widget Wrangler]]>
      </category>
      <category domain="post_tag" nicename="library">
        <![CDATA[library]]>
      </category>
      <category domain="post_tag" nicename="framework">
        <![CDATA[framework]]>
      </category>
      <category domain="post_tag" nicename="widget">
        <![CDATA[widget]]>
      </category>
      <category domain="post_tag" nicename="pattern">
        <![CDATA[pattern]]>
      </category>
      <category domain="post_tag" nicename="angularjs">
        <![CDATA[AngularJS]]>
      </category>
    </item>
    <item>
      <title>
        <![CDATA[JSLink Validation – from Basic to Advanced]]>
      </title>
      <link>https://julieturner.net/2015/08/jslink-validation-from-basic-to-advanced/</link>
      <pubDate>Mon, 31 Aug 2015 13:30:00 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/index.php/2015/08/jslink-validation-from-basic-to-advanced/</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<p>Custom field validation using JSLink is an extremely powerful beast. In this post I’m going to make an effort to demystify the different levels of validation you can put into your custom template and how to put it together. Everything I’m about to cover has been covered before in different ways and in different combinations. My hope is that this will help separate out what’s needed and what’s not depending on your scenario… so to that end I’ll cover three scenarios. Basic, which will be OOB validation that is custom applied. By that I mean you want to optionally make a field required just like <a class="zem_slink" href="http://sharepoint.microsoft.com" rel="homepage" target="_blank" title="Microsoft SharePoint">SharePoint</a> does, but you want to control when it’s required.&#0160; Custom, which will be a custom validation function that renders its error message just like OOB validation error messages are rendered.&#0160; And finally, advanced, where not only do you want to write a custom validation but you want to control how the error state is communicated to the user.</p>
<p>So let’s start at the beginning and we’ll build on the solution from there. First I want to establish the framework for the solution:</p>
<pre class="lang:javascript decode:true">
window.My = window.My || {};
My.CustomTemplate = function() { 
   var taskOwnerValidator = function () {
      /* see below */
   }

   function editTaskOwner(ctx) {
      /* see below */
   }

   function registerTemplate() {
      var overrideCtx = {};
      overrideCtx.Templates = {};
      overrideCtx.Templates.Fields = {
         'TaskOwner': {'EditForm': editTaskOwner }
      }
      SPClientTemplates.TemplateManager.RegisterTemplateOverrides(overrideCtx);
   };
}
</pre>
<h2>Basic</h2>
<p>Basic validation is fairly straight forward. You would simply add this code inside of your custom field rendering function (editTaskOwner).</p>
<p>First set up the form context and then create a new “ValidatorSet”:</p>
<pre><code>1: var formCtx = SPClientTemplates.Utility.GetFormContextForCurrentField(ctx);
2: var validators = new SPClientForms.ClientValidation.ValidatorSet(); </code></pre>
<p>In the next line we add the new validator to the validation set:</p>
<pre><code>3: validators.RegisterValidator(new SPClientForms.ClientValidation.RequiredValidator()); </code></pre>
<p>And then lastly, we attach the validation set to the field. In the case of this example I’m using formCtx.fieldName… but this could obviously also be a simple string. I bring this up, because there are limitations on what types of fields you can customize using Custom Templates, namely Taxonomy fields… this is a way to add validation to them from somewhere else in your code.</p>
<pre><code>5: formCtx.registerClientValidator(formCtx.fieldName, validators);</code></pre>
<p><em>Note: If you’ve noticed I skipped line 4, more on that later.</em></p>
<p><strong>The Result</strong></p>
<p><img src="http://julieturner.net/wp-content/uploads/2016/09/basic.png" alt="" width="531" height="64" class="aligncenter size-full wp-image-53" /></p>
<h2>Custom</h2>
<p>If you want to write your own validation then you need to do a few extra steps.</p>
<p>Create the custom validation function. This function would go within your validation function but outside of the field custom render function (see the framework at the top)</p>
<pre><code>var taskOwnerValidator = function () {
taskOwnerValidator.prototype.Validate = function(value) {
   var isError = false; 
   var errorMessage = ""
   if (value === null) {
      isError = true;
      errorMessage = "You can't leave this blank.";
   } else if (documentLibrary.length > 0) {
      var vKey = eval(value.toString())[0].Key;
            if (possibleOwners !== null) {
                if (JSON.stringify(possibleOwners).indexOf(JSON.stringify(vKey)) < 0) {
                    isError = true;
                    errorMessage = "Task Owner must be a Possible Owner.";
                }
            }
        }
        return new SPClientForms.ClientValidation.ValidationResult(isError, errorMessage);
    };
};</code></pre>
<p>Modify the RegisterValidator call</p>
<pre><code>3: validators.RegisterValidator(new taskOwnerValidator());</code></pre>
<p><strong><em>&#0160;</em></strong><em>(Optional)</em> Depending on how you render the field you may have to add the following code. What I mean by that is if you use one of <a href="https://code.msdn.microsoft.com/office/Sample-8-List-add-and-edit-d228b751" target="_blank">these</a> OOB field rendering functions you do not need this line, if you develop your own layout then you will need this to “attach” the error message to the right object in the DOM. In this example my custom people picker field is rendering html wrapped with&#0160;<span style="font-family: &#39;courier new&#39;, courier;">&lt;div id=”TaskOwnerDiv”&gt;&lt;/div&gt;</span>. So I need to reference the div’s ID in the SPFormControl_AppendValidationErrorMessage call.</p>
<pre><code>4:  formCtx.registerValidationErrorCallback(formCtx.fieldName, 
   function (errorResult) { 
      SPFormControl_AppendValidationErrorMessage("TaskOwnerDiv", errorResult);
   }
);</code></pre>
<p><strong>The Result</strong></p>
<p><img src="http://julieturner.net/wp-content/uploads/2016/09/custom.png" alt="" width="557" height="67" class="aligncenter size-full wp-image-54" /></p>
<h2>Advanced</h2>
<p>So, if that didn’t seem advanced enough for you, the last scenario is that you may want to customize how the “error” is displayed to the user. Maybe you want to display an image, or collect all the validation messages into one area. That’s possible by doing the following:</p>
<p>Write custom error rendering code. This code needs to be completely outside of the custom rendering template code. Here's a really basic example.</p>
<pre><code>My.CustomError = function(errorResult) {
    var retHtml = '<div id="ErrorMsg" style="float: right; color: red;">' + errorResult.errorMessage + '</div>';
    $($("#part1")[0].children[3]).after(retHtml);
}</code></pre>
<p>Modify the registration of the error callback, which causes your custom function to be fired if the isError flag is true.</p>
<pre><code>4: formCtx.registerValidationErrorCallback(formCtx.fieldName, My.CustomError);</code></pre>
<p><strong>The Result</strong></p>
<p><img src="http://julieturner.net/wp-content/uploads/2016/09/advanced.png" alt="" width="874" height="231" class="aligncenter size-full wp-image-52" /></p>
<p>So, as you can see custom form validation is extraordinarily powerful with Custom Templates and can allow you to really take SharePoint to the next level.</p>
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[SharePoint custom field validation using JSLink is an extremely powerful beast.  In this post I’m going to make an effort to demystify the different levels of validation you can put into your custom template and how to put it together.
]]>
      </excerpt:encoded>
      <wp:post_id>13</wp:post_id>
      <wp:post_date>
        <![CDATA[2015-08-31 08:30:00]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2015-08-31 13:30:00]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2018-02-07 10:15:11]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2018-02-07 15:15:11]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[closed]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[jslink-validation-from-basic-to-advanced]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="post_tag" nicename="sharepoint">
        <![CDATA[SharePoint]]>
      </category>
      <category domain="post_tag" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="post_tag" nicename="o365">
        <![CDATA[O365]]>
      </category>
      <category domain="category" nicename="jslink">
        <![CDATA[JSLink]]>
      </category>
      <category domain="post_tag" nicename="jslink">
        <![CDATA[JSLink]]>
      </category>
      <category domain="post_tag" nicename="validation">
        <![CDATA[Validation]]>
      </category>
      <category domain="category" nicename="2016">
        <![CDATA[2016]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_jetpack_dont_email_post_to_subs]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>134</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Mike]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[bmjobs@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[146.131.120.2]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-02-06 13:35:59]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-02-06 18:35:59]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[How does 
SPClientTemplates.TemplateManager.RegisterTemplateOverrides(overrideCtx);
called?
is there typo in the script wrong {}?]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1517942160.14498996734619140625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1518016335.688375949859619140625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>135</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[69.7.127.144]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-02-07 10:13:31]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-02-07 15:13:31]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Mike,

Sadly that is a copy/paste error, that call belongs inside the registerTemplate function. I've made the correction in the post.

Thanks for reaching out.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>134</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1518016411.4893119335174560546875;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>136</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Mike]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[bmjobs@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[146.131.120.2]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-02-08 00:55:27]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-02-08 05:55:27]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[So validation error is displayed only after clicking save. Could we display it after validation is called? It is called on every value change.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1518069327.717361927032470703125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>137</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-02-14 15:03:01]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-02-14 20:03:01]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Sorry Mike, I really don't know the answer to your question. I honestly haven't used JSLink in years as much of my work is in the SharePoint online space so I wouldn't use it and if I were doing work for a 2013 client I would avoid using it because that wouldn't be a future proof solution, assuming they'd someday want that solution to be migrated.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>136</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1518638581.87864208221435546875;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[jetpack]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://s2.wp.com/wp-content/mu-plugins/highlander-comments/images/wplogo.png]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[1]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[JSLink Custom User Field Schema]]>
      </title>
      <link>https://julieturner.net/2015/08/jslink-custom-user-field-schema-1/</link>
      <pubDate>Fri, 28 Aug 2015 19:13:00 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/index.php/2015/08/jslink-custom-user-field-schema-1/</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<p>I had the requirement of setting the default value of a person field to the current user. &#0160;After looking around in the great wide internet I found a very helpful <a href="https://umeaworks.wordpress.com/2015/03/17/setting-default-value-of-person-field-in-sharepoint-2013-with-jslink/" target="_blank" title="article by Glenn Reian">article by Glenn Reian</a> which got me started.</p>
<p>Where I ran into a problem was that my user field had customized settings that weren&#39;t being pulled through into the custom implementation of my people picker. &#0160;As it turns out the issue was with the schema that is passed to the&#0160;SPClientPeoplePicker_InitStandaloneControlWrapper function. &#0160;In Glenn&#39;s example (and every other example I found out there) this schema is hard coded, which is perfectly acceptable in most cases. &#0160;However, I needed some values to be slightly different to adhere to my column settings. &#0160;</p>
<p>As it turns out there are two solutions. &#0160;The first, obvious one, is to adjust the schema manually in the code. &#0160;And again this may be a fine solution. &#0160;But as Glenn did, I had separated my concerns and created what I hoped to be a fairly reusable version of&#0160;initializePeoplePicker. &#0160;So now I needed to enhance that function to pass through adendums to the schema or maybe it&#39;s own schema.</p>
<p>What I found was something i wasn&#39;t quite expecting. &#0160;The schema I needed was actually right there in the context variable in JSLink. &#0160;So, using Glenn&#39;s implementation and extending it slightly I just modified initialzePeoplePicker to the following:&#0160;</p>
<div><code>var initUserDefaultPeoplePicker = function (ctx, peoplePickerElementId, ppSchema) {<br />&#0160;&#0160;&#0160;&#0160;if (ppSchema === null) {<br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;ppSchema = {};<br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;ppSchema[&#39;PrincipalAccountType&#39;] = &#39;User&#39;;<br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;ppSchema[&#39;ShowUserPresence&#39;] = true;<br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;ppSchema[&#39;SearchPrincipalSource&#39;] = 15;<br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;ppSchema[&#39;ResolvePrincipalSource&#39;] = 15;<br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;ppSchema[&#39;AllowMultipleValues&#39;] = false;<br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;ppSchema[&#39;MaximumEntitySuggestions&#39;] = 50;<br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;ppSchema[&#39;Width&#39;] = &#39;280px&#39;;<br />&#0160;&#0160;&#0160;&#0160;}<br />&#0160;&#0160;&#0160;&#0160;var uri = _spPageContextInfo.webAbsoluteUrl + &quot;/_api/SP.UserProfiles.PeopleManager/GetMyProperties&quot;;<br />&#0160;&#0160;&#0160;&#0160;getAjax(uri).done(function(user) { &#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;</code></div>
<div><code>&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;// Set the default user by building an array with one user object<br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;var users = new Array(1);<br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;var currentUser = new Object();<br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;currentUser.AutoFillDisplayText = user.DisplayName;<br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;currentUser.AutoFillKey = user.AccountName;<br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;currentUser.Description = user.Email;<br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;currentUser.DisplayText = user.DisplayName;<br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;currentUser.EntityType = &quot;User&quot;;<br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;currentUser.IsResolved = true;<br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;currentUser.Key = user.AccountName;<br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;currentUser.Resolved = true;<br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;users[0] = currentUser; &#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;// Render and initialize the picker<br />&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;&#0160;SPClientPeoplePicker_InitStandaloneControlWrapper(peoplePickerElementId, users, ppSchema);<br />&#0160;&#0160;&#0160;&#0160;});<br />};</code></div>
<div>and then from the custom rendering function for the user field I passed the schema associated with the field through:</div>
<div><code>function efTaskOwner(ctx) {<br />&#0160;&#0160;&#0160;&#0160;var retVal = &#39;&lt;div id=&quot;TaskOwnerDiv&quot;&gt;&#39;;<br />&#0160;&#0160;&#0160;&#0160;retVal += initDefaultPeoplePicker(ctx.CurrentItem[&quot;TaskOwner&quot;], &#39;TaskOwnerDiv&#39;, tx.CurrentFieldSchema)<br />&#0160;&#0160;&#0160;&#0160;retVal += &#39;&lt;/div&gt;&lt;span class=&quot;etmRequiredField&quot;&gt;&lt;/span&gt;&#39;; &#0160;&#0160;&#0160;&#0160;<br />&#0160;&#0160;&#0160;&#0160;return retVal;<br /> }</code></div>
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[Taking the extra step to pull in the user field schema when implementing a customized People Picker using JSLink in SharePoint.
]]>
      </excerpt:encoded>
      <wp:post_id>14</wp:post_id>
      <wp:post_date>
        <![CDATA[2015-08-28 14:13:00]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2015-08-28 19:13:00]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2015-08-28 14:13:00]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2015-08-28 19:13:00]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[closed]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[jslink-custom-user-field-schema-1]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="post_tag" nicename="sharepoint">
        <![CDATA[SharePoint]]>
      </category>
      <category domain="post_tag" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="post_tag" nicename="o365">
        <![CDATA[O365]]>
      </category>
      <category domain="category" nicename="jslink">
        <![CDATA[JSLink]]>
      </category>
      <category domain="post_tag" nicename="jslink">
        <![CDATA[JSLink]]>
      </category>
      <category domain="post_tag" nicename="field-schema">
        <![CDATA[Field Schema]]>
      </category>
    </item>
    <item>
      <title>
        <![CDATA[SharePoint 2013 JSLink - All Fields Rendered]]>
      </title>
      <link>https://julieturner.net/2015/08/sharepoint-2013-jslink-all-fields-rendered/</link>
      <pubDate>Wed, 26 Aug 2015 19:41:41 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/index.php/2015/08/sharepoint-2013-jslink-all-fields-rendered/</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<p>While creating a custom Client Template using JSLink, I came up against the issue of knowing when all the fields were rendered on the form.&#0160; To explain where the issue arises let me first take just a moment to explain when building a custom template for this type of form, where you want to manipulate the fields, you have available to you both a Pre and Post Render function. &#0160;What that does is fire the function attached to it either pre or post <span style="text-decoration: underline;"><strong>each</strong> </span>custom field rendering being executed.</p>
<p>The reason I bring this up is that there could be some misconception that it fires before field rendering starts and after all field rendering is complete, but that’s not the case. So if your form has 10 fields, these functions will each fire 10 times. &#0160;I also found document.ready to be unreliable as it often fired before all the fields were rendered, and further, if I needed to make decisions based on the context of the form, I would no longer have access to that information.</p>
<p>So, the solution does in the end involve the OnPostRender function of the Template Override, but what you do there is what counts. So just to put everything in context, and for brevity, here is the shell of the custom Client Template file. &#0160;<em>Note the declaration of the postfields variable inside of My.CustomTemplate.</em></p>
<pre><code>window.My = window.My || {};
My.CustomTemplate = function() {
   var postfields = 0;
   function onPostRenderTemplate(ctx) {
      /*See Below*/
   }
   function registerTemplate() {
      var overrideCtx = {};
      overrideCtx.Templates = {};
      overrideCtx.Templates.Fields = { /*Removed for Brevity*/ };
      overrideCtx.OnPostRender = onPostRenderTemplate;
      SPClientTemplates.TemplateManager.RegisterTemplateOverrides(overrideCtx);
   }
}
RegisterModuleInit("/_catalogs/masterpage/MyCustomTemplate.js", My.CustomTemplate);
My.CustomTemplate();
</code></pre>
<p>Ok, now we need to fill in the onPostRenderTemplate function. &#0160;Primarily, we need to know when we’ve gotten through all the fields on the form. This is accomplished by incrementing the &quot;global&quot; postfields variable within the onPostRenderTemplate function. &#0160;The question is what are we testing it against to know when we&#39;ve rendered all the fields.</p>
<pre><code>
function onPostRenderTemplate(ctx) {
   postfields++;
   if (postfields <= Object.keys(ctx.Templates.Fields).length) {
      /* Execute post field render function */
   }
}
</code></pre>
<p>The answer is JavaScript prototype function keys which seems to be fairly well <a href="http://kangax.github.io/compat-table/es5/#Object.keys" target="_blank" title="supported">supported</a>.</p>
<blockquote>
<p>The <code><strong>Object.keys()</strong></code> method returns an array of a given object's own enumerable properties, in the same order as that provided by a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in" title="The for..in statement iterates over the enumerable properties of an object, in arbitrary order. For each distinct property, statements can be executed."><code>for...in</code></a> loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).</p>
</blockquote>
<p>Ergo, if you look at the ctx.Template.Fields and get the length that gives you the number of Fields on the form that will be &quot;rendered&quot; and provides you a way of telling when the last Field has been rendered.</p>
<p>So now I can execute some fancy functions to do thinks like:</p>
<p><strong>Hide Fields</strong></p>
<pre><code>$('.hiddenField').closest('tr').hide();</code></pre>
<p><strong>Modifying the Fields label to make it look like it was Required</strong></p>
<pre><code>$('.requiredField').closest('tr').find('h3').append('<span title="This is a required field." class="ms-accentText">*</span>');</code></pre>
<p>or some other post rendering customization based as I stated on values in the ctx variable.</p>
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[While creating a custom Client Template using JSLink in SharePoint, I came up against the issue of knowing when all the fields were rendered on the form. This post helps establish one approach for solving the issue.
]]>
      </excerpt:encoded>
      <wp:post_id>15</wp:post_id>
      <wp:post_date>
        <![CDATA[2015-08-26 14:41:41]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2015-08-26 19:41:41]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2016-12-29 13:58:19]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2016-12-29 18:58:19]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[closed]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[sharepoint-2013-jslink-all-fields-rendered]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="post_tag" nicename="sharepoint">
        <![CDATA[SharePoint]]>
      </category>
      <category domain="post_tag" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="post_tag" nicename="o365">
        <![CDATA[O365]]>
      </category>
      <category domain="category" nicename="jslink">
        <![CDATA[JSLink]]>
      </category>
      <category domain="post_tag" nicename="jslink">
        <![CDATA[JSLink]]>
      </category>
      <category domain="category" nicename="2016">
        <![CDATA[2016]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_jetpack_dont_email_post_to_subs]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>6</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Christophe]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[christophe@pathtosharepoint.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://blog.pathtosharepoint.com</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[99.88.197.212]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2015-09-18 15:33:35]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2015-09-18 20:33:35]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Very useful article to help clarify the OnPostRender behavior.
For the record, document ready is reliable, it's just not meant to tell you when the page is done rendering (a confusion I have seen in a samples posted on other blogs, yours sets the record straight).
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>160</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Aubrey Robertson]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[aubrey.viu@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://plus.google.com/110842418560730845344</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[104.128.253.11]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-08-24 12:41:39]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-08-24 17:41:39]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[THANK YOU for this!  Clear, concise, and well-written!]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1535132499.5366170406341552734375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1535133530.4554879665374755859375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>163</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Aubrey Robertson]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[aubrey.viu@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://plus.google.com/110842418560730845344</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[104.128.253.19]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-09-02 13:21:57]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-09-02 18:21:57]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Your comparison operator in the OnPostRender function is less than or equal to.  This will fire on each iteration rather than only on just the last.  Changing it to &gt;= or == will fix this.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1535912518.3000609874725341796875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>178</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Yannic Hamann]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[i3illig@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[89.247.122.38]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-11-26 06:01:26]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-11-26 11:01:26]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Shoudn't it be fieldsRendered &gt;= ... not fieldsRendered &lt;= ... ?]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1543230086.5881750583648681640625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1543241451.177998065948486328125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>179</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-11-26 09:14:44]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-11-26 14:14:44]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I'm assuming you're questioning this: if (postfields <= Object.keys(ctx.Templates.Fields).length) since there is no code in this post with that particular text... and in that case no, I believe it's correct as is, but honestly all the code posted, on any blog really, should only be taken as an example and so if it doesn't function as you want it to please implement your own version.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>178</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1543241684.02620601654052734375;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[jetpack]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://s2.wp.com/wp-content/mu-plugins/highlander-comments/images/wplogo.png]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[1]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>180</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Yannic Hamann]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[i3illig@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[89.247.122.38]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-11-26 10:41:54]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-11-26 15:41:54]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[You are right, I read the comment wrong :) I was too focused on executing my function just once. Thanks for the article. Do you have an explanation or blog post about the benefits of putting your logic wrapped in an anonymous function within the window scope? I assume that way you don't pollute the global scope with the custom variables. Or are there other advantages I don't see ?]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>179</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1543246914.026648044586181640625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>182</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-11-29 16:00:19]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-11-29 21:00:19]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I have no posted anything on that topic no, but yes, you either use an IFFE or a namespace.  The code above creates a namespace (i.e. My) and an IFFE would be:
(function () {
    // logic here
})();

When creating things for SharePoint I tend to use namespaces as I may want to check if I've already got a copy of the code in the window and not create another copy.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>180</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1543525219.2178480625152587890625;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[jetpack]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://s2.wp.com/wp-content/mu-plugins/highlander-comments/images/wplogo.png]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[1]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Send Email through Visual Studio Workflow in SharePoint 2013]]>
      </title>
      <link>https://julieturner.net/2015/08/send-email-through-visual-studio-workflow-in-sharepoint-2013/</link>
      <pubDate>Tue, 25 Aug 2015 20:23:34 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/index.php/2015/08/send-email-through-visual-studio-workflow-in-sharepoint-2013/</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<p><a class="asset-img-link" href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01bb0868932f970d-pi" style="float: right;"><img alt="EmailAction" class="asset  asset-image at-xid-6a0154324289e5970c01bb0868932f970d img-responsive" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01bb0868932f970d-250wi" style="width: 220px; margin: 0px 0px 5px 5px;" title="EmailAction" /></a>When building a custom SharePoint 2013 Workflow using <a class="zem_slink" href="http://www.microsoft.com/visualstudio" rel="homepage" target="_blank" title="Microsoft Visual Studio">Visual Studio</a> I ran into a very odd problem trying to send a notification email to a group of users using the Email action (specifically Microsoft.SharePoint.DesignTime.Activities.Email).&#0160;</p>
<p>I could send email from a SharePoint 2013 workflow created using SharePoint Designer, but could not do the same from my custom workflow created in Visual Studio without the workflow throwing an error.&#0160; I’m not even going to post the error because as it turns out it’s a generic error message that could show up for any number of reasons and has little to nothing to do with the problem which was partially why it took so long to solve.</p>
<p>My colleague Bob German (<a href="http://bob1german.com/">Blog</a> ~ twitter: <a href="https://twitter.com/Bob1German">@Bob1German&#0160;</a>) gave me an assist debugging and testing out the issue… By using <a href="http://www.telerik.com/fiddler">Fiddler</a>, set up to run on my <a class="zem_slink" href="http://en.wikipedia.org/wiki/Microsoft_SharePoint" rel="wikipedia" target="_blank" title="Microsoft SharePoint">SharePoint server</a> under the Workflow Manager App Pool account, I was able to see why the call works from a SharePoint Designer workflow but not my custom VS2013 workflow. What I found was that when the call was made from the SharePoint Designer workflow, the “To” address was in the form of the users login name and not the email address.&#0160; So even though the <a href="https://msdn.microsoft.com/EN-US/library/office/microsoft.sharepoint.workflowservices.activities.email_members.aspx">documentation</a> states that the “To” property <em>“Gets or sets the user names or <span style="text-decoration: underline;">email addresses</span> that represent the recipients of the email message.”</em>, that is apparently not entirely the case.&#0160; By tweaking the value I pulled from the LookupSPUser activity from Email to LoginName and adding that value to the recipient’s collection, everything worked beautifully.</p>
<p><a class="asset-img-link" href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01b7c7c44017970b-pi" style="display: inline;"><img alt="LoginName" class="asset  asset-image at-xid-6a0154324289e5970c01b7c7c44017970b img-responsive" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01b7c7c44017970b-500wi" title="LoginName" /></a></p>
<p>As an aside, from this same Fiddler investigation, I also found that the SharePoint Designer email action formats the body as an HTML message and if you want to use that you can by embedding your body in between the following tags:</p>
<blockquote>
<p>&lt;HTML&gt;&lt;HEAD&gt; &lt;META name=GENERATOR content=\&quot;MSHTML 11.00.9600.17924\&quot;&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;FONT face=\&quot;Segoe UI\&quot;&gt;</p>
<p>&lt;Email Body Here&gt;</p>
<p>&lt;/FONT&gt;&lt;/BODY&gt;&lt;/HTML&gt;</p>
</blockquote>
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[Know the trick to sending an email notification when building a custom SharePoint 2013 Workflow using Visual Studio.
]]>
      </excerpt:encoded>
      <wp:post_id>16</wp:post_id>
      <wp:post_date>
        <![CDATA[2015-08-25 15:23:34]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2015-08-25 20:23:34]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2015-08-25 15:23:34]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2015-08-25 20:23:34]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[closed]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[send-email-through-visual-studio-workflow-in-sharepoint-2013]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="post_tag" nicename="sharepoint">
        <![CDATA[SharePoint]]>
      </category>
      <category domain="post_tag" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="category" nicename="workflow">
        <![CDATA[Workflow]]>
      </category>
      <category domain="post_tag" nicename="microsoft-sharepoint-designtime-activities-email">
        <![CDATA[Microsoft.SharePoint.DesignTime.Activities.Email]]>
      </category>
      <category domain="post_tag" nicename="visual-studio">
        <![CDATA[Visual Studio]]>
      </category>
      <category domain="post_tag" nicename="error">
        <![CDATA[error]]>
      </category>
      <wp:comment>
        <wp:comment_id>7</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Bob German]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[bobg@bluemetal.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://www.bluemetal.com</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[146.115.178.246]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2015-08-25 21:38:51]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2015-08-26 02:38:51]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Great posting Julie - credit also goes to Andrew Connell who wrote up the trick of using Fiddler to debug workflows by watching the traffic between SharePoint and Workflow Manager. <a href="http://www.andrewconnell.com/blog/SP2013-Workflow-Advanced-Workflow-Debugging-with-Fiddler" rel="nofollow">http://www.andrewconnell.com/blog/SP2013-Workflow-Advanced-Workflow-Debugging-with-Fiddler</a>
Thanks!
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>8</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://profile.typepad.com/6p0154324289e5970c</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2015-08-25 21:46:47]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2015-08-26 02:46:47]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Super!  Thank you for posting the link to that as it helps explain all the intricacies I glossed over.
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>47</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Tommi]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[tomgron@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://www.calm.fi</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[37.33.204.120]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2016-12-29 02:26:33]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2016-12-29 07:26:33]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[This is great ! This just answered the problem I tried to tackle yesterday for hours and although I haven't tried this yet, I believe I could get my emails sent without having to write some custom email activity into my client's SharePoint.

Thanks a bunch :)]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1482996394.0501639842987060546875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1483036923.4184129238128662109375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>106</wp:comment_id>
        <wp:comment_author>
          <![CDATA[APPASAHEB KAPASE]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[appasaheb.kapase@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[202.67.5.150]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-08-31 00:27:38]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-08-31 05:27:38]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I am developing Sp 2013 workflow using Visual Studio 2013. I have used OOTB "Email" activity but when I start build, it takes almost 30 mins. to build &amp; if I remove the "Email" activity it builds within 5 mins.
what's wrong with "Email" activity or the contents ? I have followed your suggestion. Any guess?]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1504157259.281436920166015625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1504177881.75846004486083984375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>107</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-08-31 06:13:39]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-08-31 11:13:39]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Unfortunately I really have no idea what could be wrong.  What I might suggest though is to do some investigation of the output window during your build.  I would suspect it may give you some clues.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1504178019.4921309947967529296875;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[jetpack]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://s2.wp.com/wp-content/mu-plugins/highlander-comments/images/wplogo.png]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[1]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>108</wp:comment_id>
        <wp:comment_author>
          <![CDATA[APPASAHEB KAPASE]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[appasaheb.kapase@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[202.67.5.150]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-08-31 06:51:03]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-08-31 11:51:03]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thank you. I have already observed the output window but nothing found. It simply says.. build started... and then after long time it do the deployment process.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>107</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1504180263.35982608795166015625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>670</wp:comment_id>
        <wp:comment_author>
          <![CDATA[oskar4f4]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[o4skarfin4@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[89.179.187.78]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2022-03-24 18:55:51]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2022-03-24 23:55:51]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[For sharepoint 2019 On premise and sharepoint 2013 platform
After a long search for a module that sends email, I can recommend a ready-made one. here is their website https://activitydeploy.com]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1648166151.6196880340576171875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[wordpress]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://0.gravatar.com/avatar/0a31f70ac0d83739f0e3c6f1bb4336af?s=25&d=https%3A%2F%2Fs0.wp.com%2Fwp-content%2Fmu-plugins%2Fhighlander-comments%2Fimages%2Fwplogo.png&r=G]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[218878246]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_wpcom_id_sig]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a8997dae6eb957df2b3118d1d120360e7e35e612]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1648501730.239512920379638671875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Future Proof - Javascript Dashboard Code Samples]]>
      </title>
      <link>https://julieturner.net/2014/04/future-proof-javascript-dashboard-code-samples/</link>
      <pubDate>Sat, 05 Apr 2014 19:29:51 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/index.php/2014/04/future-proof-javascript-dashboard-code-samples/</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<p>To support my colleague <a href="http://blogs.msdn.com/b/bobgerman/" target="_blank" title="Bob German">Bob German</a> and his great talk on Future Proofing your <a class="zem_slink" href="http://sharepoint.microsoft.com" rel="homepage" target="_blank" title="Microsoft SharePoint">SharePoint</a> solutions I helped him by building a SharePoint charting dashboard that used client side scripting libraries to pull data from a SharePoint list and display it using commercially available client side charting library.&#0160; He has asked me to share those solutions and so finally here they are.&#0160; I really appreciate all of Bob&#39;s great feedback and hope these examples can help people out there get started on building their own dashboards.</p>
<p><a class="asset-img-link" href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01a73da294ec970d-popup" onclick="window.open( this.href, &#39;_blank&#39;, &#39;width=640,height=480,scrollbars=no,resizable=no,toolbar=no,directories=no,location=no,menubar=no,status=no,left=0,top=0&#39; ); return false" style="display: inline;"><img alt="ScreenShot_2010" class="asset  asset-image at-xid-6a0154324289e5970c01a73da294ec970d img-responsive" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c01a73da294ec970d-500wi" title="ScreenShot_2010" /></a></p>
<p>For all the great information, please see Bob&#39;s article that talks about Future Proofing your apps at <a href="http://blogs.msdn.com/b/bobgerman/archive/2013/10/05/future-proof-solutions-part-1-take-a-walk-on-the-client-side.aspx">http://blogs.msdn.com/b/bobgerman/archive/2013/10/05/future-proof-solutions-part-1-take-a-walk-on-the-client-side.aspx</a></p>
<p><strong><a class="zem_slink" href="http://en.wikipedia.org/wiki/JavaScript" rel="wikipedia" target="_blank" title="JavaScript">Javascript</a> Dashboard Demo</strong></p>
<ul>
<li>2010 Sample: <a href="http://code.msdn.microsoft.com/Future-Proof-Javascript-90b223e2" target="_blank" title="http://code.msdn.microsoft.com/Future-Proof-Javascript-90b223e2">http://code.msdn.microsoft.com/Future-Proof-Javascript-90b223e2</a></li>
<li>2013 Sample: <a href="http://code.msdn.microsoft.com/2013-Javascript-Dashboard-5f0ca16a" target="_blank" title="http://code.msdn.microsoft.com/2013-Javascript-Dashboard-5f0ca16a">http://code.msdn.microsoft.com/2013-Javascript-Dashboard-5f0ca16a</a></li>
</ul>
<p><strong>More Future Proof Code Samples from Bob German</strong></p>
<ul>
<li>For 2010 - <a href="http://code.msdn.microsoft.com/SharePoint-Provisioning-88f963ab">http://code.msdn.microsoft.com/SharePoint-Provisioning-88f963ab</a></li>
<li>For 2013 - <a href="http://code.msdn.microsoft.com/SharePoint-Provisioning-416ddb5f">http://code.msdn.microsoft.com/SharePoint-Provisioning-416ddb5f</a></li>
</ul>
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[Example of building a SharePoint charting dashboard that used client side JavaScript libraries to pull data from a SharePoint list and display it using commercially available client side charting library.
]]>
      </excerpt:encoded>
      <wp:post_id>17</wp:post_id>
      <wp:post_date>
        <![CDATA[2014-04-05 14:29:51]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2014-04-05 19:29:51]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2014-04-05 14:29:51]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2014-04-05 19:29:51]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[closed]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[future-proof-javascript-dashboard-code-samples]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="category" nicename="javascript">
        <![CDATA[Javascript]]>
      </category>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="post_tag" nicename="sharepoint">
        <![CDATA[SharePoint]]>
      </category>
      <category domain="post_tag" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="post_tag" nicename="o365">
        <![CDATA[O365]]>
      </category>
      <category domain="post_tag" nicename="javascript">
        <![CDATA[JavaScript]]>
      </category>
      <category domain="category" nicename="widget-wrangler">
        <![CDATA[Widget Wrangler]]>
      </category>
      <category domain="post_tag" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="post_tag" nicename="widget">
        <![CDATA[widget]]>
      </category>
      <category domain="category" nicename="2010">
        <![CDATA[2010]]>
      </category>
      <category domain="post_tag" nicename="2010">
        <![CDATA[2010]]>
      </category>
      <category domain="post_tag" nicename="chart">
        <![CDATA[chart]]>
      </category>
      <category domain="post_tag" nicename="dashboard">
        <![CDATA[dashboard]]>
      </category>
    </item>
    <item>
      <title>
        <![CDATA[Quick Primer on InfoPath and SharePoint 2010 Time Zones]]>
      </title>
      <link>https://julieturner.net/2013/01/quick-primer-on-infopath-and-sharepoint-2010-time-zones/</link>
      <pubDate>Thu, 31 Jan 2013 13:28:46 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/index.php/2013/01/quick-primer-on-infopath-and-sharepoint-2010-time-zones/</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<p><a class="zem_slink" href="http://office.microsoft.com/infopath/" rel="homepage" target="_blank" title="Microsoft InfoPath">InfoPath</a> functions such as Today() and Now() pick up the time zone based on the settings of the <a class="zem_slink" href="http://sharepoint.microsoft.com" rel="homepage" target="_blank" title="Microsoft SharePoint">SharePoint server</a>.&#0160; By default the web is set to the time zone of the server, which is thereby the default of any new sites created as well as new user profiles created.&#0160; For global organizations with users around the world, there are situations where you will want the automated date/time stamps to display the local time for the user rather than the server time.&#0160; This article will show you how to set that up.</p>
<p>The time zone of the web can be changed in central administration.&#0160; The time zone of the site can be changed by going to site settings / regional settings.&#0160; In addition a user can change their personal time zone settings by going to “my settings / my regional settings”.&#0160;</p>
<p>The InfoPath form I created to test the scenario has 2 fields.&#0160; The first is set by default using the now() function when the form is created, the second is set by an action on form load, again using the now() function.&#0160; The first field is also used to name the form when it’s first submitted.&#0160; Using the magic of VMs, I set the time zone of the host machine and the site settings to be Hawaii time zone (GMT-10).&#0160; I then have a separate test user whose regional settings I set to Pacific (GMT-8) and am using the browser on a machine whose time zone is set to EST (GMT-5).</p>
<p>On the machine whose time zone is set to Hawaii, I created an instance of the InfoPath form.&#0160; Note that not only are the two fields set to the current Hawaii time but also the Created and Modified dates show as Hawaii time (Figure 1).</p>
<p>&#0160; <a class="asset-img-link" href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c017d40a30b96970c-popup" onclick="window.open( this.href, &#39;_blank&#39;, &#39;width=640,height=480,scrollbars=no,resizable=no,toolbar=no,directories=no,location=no,menubar=no,status=no,left=0,top=0&#39; ); return false" style="display: inline;"><img alt="Image5" class="asset  asset-image at-xid-6a0154324289e5970c017d40a30b96970c" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c017d40a30b96970c-500wi" title="Image5" /></a></p>
<p>Figure 1: Form in Hawaii time zone from machine in Hawaii time zone.</p>
<p>If I log into SharePoint as the same user but from the host machine whose time zone is set to EST I still see the exact same results.&#0160; Note the machine’s time is 12:35. (Figure 2)</p>
<p>&#0160; <a class="asset-img-link" href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c017c367492f5970b-popup" onclick="window.open( this.href, &#39;_blank&#39;, &#39;width=640,height=480,scrollbars=no,resizable=no,toolbar=no,directories=no,location=no,menubar=no,status=no,left=0,top=0&#39; ); return false" style="display: inline;"><img alt="Image6" class="asset  asset-image at-xid-6a0154324289e5970c017c367492f5970b" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c017c367492f5970b-500wi" title="Image6" /></a></p>
<p>Figure 2: Form in Hawaii time zone from machine in Eastern time zone</p>
<p>Now, by logging into SharePoint as the user who changed the regional settings to Pacific time, I see something very different (Figure 3).&#0160; Note that the Created and Modified dates in the SharePoint list are adjusted to my regional settings which are Pacific time zone.&#0160; And when I open the form the refresh date time uses the now() function which uses my regional time zone setting to set that date/time.</p>
<p>&#0160; <a class="asset-img-link" href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c017ee817d9f5970d-popup" onclick="window.open( this.href, &#39;_blank&#39;, &#39;width=640,height=480,scrollbars=no,resizable=no,toolbar=no,directories=no,location=no,menubar=no,status=no,left=0,top=0&#39; ); return false" style="display: inline;"><img alt="Image7" class="asset  asset-image at-xid-6a0154324289e5970c017ee817d9f5970d" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c017ee817d9f5970d-500wi" title="Image7" /></a></p>
<p>Figure 3: Form in Hawaii time zone from machine in Eastern time zone as user in Pacific time zone.</p>
<h2>Conclusion</h2>
<p>If you need all the date/time stamps to appear the same regardless of the user’s location, then either override or leave the default regional settings for your web and make sure the users do not change the regional settings of the web.&#0160; If the users want to see the information converted to their own time zone, they should change their regional settings to their own time zone.</p>
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[InfoPath functions such as Today() and Now() pick up the time zone based on the settings of the SharePoint server.  By default the web is set to the time zone of the server, which is thereby the default of any new sites created as well as new user profiles created.  For global organizations with users around the world, there are situations where you will want the automated date/time stamps to display the local time for the user rather than the server time.  This article will show you how to set that up.
]]>
      </excerpt:encoded>
      <wp:post_id>18</wp:post_id>
      <wp:post_date>
        <![CDATA[2013-01-31 08:28:46]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2013-01-31 13:28:46]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2013-01-31 08:28:46]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2013-01-31 13:28:46]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[closed]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[quick-primer-on-infopath-and-sharepoint-2010-time-zones]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="post_tag" nicename="sharepoint">
        <![CDATA[SharePoint]]>
      </category>
      <category domain="post_tag" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="category" nicename="2010">
        <![CDATA[2010]]>
      </category>
      <category domain="post_tag" nicename="2010">
        <![CDATA[2010]]>
      </category>
      <category domain="category" nicename="infopath">
        <![CDATA[InfoPath]]>
      </category>
      <category domain="post_tag" nicename="infopath">
        <![CDATA[InfoPath]]>
      </category>
      <category domain="post_tag" nicename="timezone">
        <![CDATA[timezone]]>
      </category>
    </item>
    <item>
      <title>
        <![CDATA[InfoPath - Show links to documents in a library from the form]]>
      </title>
      <link>https://julieturner.net/2013/01/infopath-show-links-to-documents-in-a-library-from-the-form/</link>
      <pubDate>Fri, 11 Jan 2013 20:00:38 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/index.php/2013/01/infopath-show-links-to-documents-in-a-library-from-the-form/</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<p>I had an interesting client issue recently where the users were copying and pasting<a class="zem_slink" href="http://en.wikipedia.org/wiki/Cut%2C_copy%2C_and_paste" rel="wikipedia" target="_blank" title="Cut, copy, and paste"></a> the contents of entire e-mail messages into a text box inside an <a class="zem_slink" href="http://office.microsoft.com/infopath/" rel="homepage" target="_blank" title="Microsoft InfoPath">InfoPath</a> form.&#0160; Although useful in that the information was captured with the form, the implementation was tedious at best when trying to find information potentially buried there.&#0160; Long story short by putting the e-mail messages in a document library that was linked to the InfoPath form library by the ID I was able to have a parent-child relationship.&#0160; The issue then was how to display those e-mails from within the form.&#0160;</p>
<p>Obviously the ideal solution was to be able to actually preview them, but barring the funds to take on a challenge like that, and very little hope that the exercise would be fruitful it was decided to try and at least show a list of the &quot;messages&quot; that were stored in the document library related to the form that was open.&#0160; Sounds simple I&#39;m sure, and in the end it was fairly straight forward but a few little gotcha&#39;s had to be worked around.</p>
<p>My first thought was to make a secondary data connection to the document library in question.&#0160; Unfortunately, I figured out rather quickly that getting the name of the file or the path to the file wasn&#39;t happening.&#0160; Enter <a class="zem_slink" href="http://en.wikipedia.org/wiki/Representational_state_transfer" rel="wikipedia" target="_blank" title="Representational state transfer">REST</a> services for <a class="zem_slink" href="http://sharepoint.microsoft.com" rel="homepage" target="_blank" title="Microsoft SharePoint">SharePoint</a>... i.e. /_vti_bin/listdata.svc</p>
<p>The first step was to validate the URL for the REST service that I would add as a datasource in the InfoPath form.&#0160; To do this I used the URL <strong>http://sp2010/test/_vti_bin/listdata.svc</strong> where sp2010/test is the path to the site that housed the document library.&#0160; What resulted was this:</p>
<p><a class="asset-img-link" href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c017d3fad9edc970c-popup" onclick="window.open( this.href, &#39;_blank&#39;, &#39;width=640,height=480,scrollbars=no,resizable=no,toolbar=no,directories=no,location=no,menubar=no,status=no,left=0,top=0&#39; ); return false" style="display: inline;"><img alt="listdata.svc screenshot" class="asset  asset-image at-xid-6a0154324289e5970c017d3fad9edc970c" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c017d3fad9edc970c-500wi" title="listdata.svc screenshot" /></a></p>
<p>If you then modify the URL to put /TestDocuments after the service call... in other words: <strong>http://sp2010/test/_vti_bin/listdata.svc/TestDocuments</strong> you will see the contents of the Test Documents library.&#0160; There are a lot of references on the web for quering REST data so I won&#39;t go into it here suffice to say that the best way to figure out what you need to query is to view the source of the resulting page.&#0160; So when I showed the contents of the Test Document library I saw the following:</p>
<p><a class="asset-img-link" href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c017c357ecabd970b-popup" onclick="window.open( this.href, &#39;_blank&#39;, &#39;width=640,height=480,scrollbars=no,resizable=no,toolbar=no,directories=no,location=no,menubar=no,status=no,left=0,top=0&#39; ); return false" style="display: inline;"><img alt="Test Document listing" class="asset  asset-image at-xid-6a0154324289e5970c017c357ecabd970b" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c017c357ecabd970b-500wi" title="Test Document listing" /></a></p>
<p>Then when I viewed the source of the page I could see that to filter for the Form field I would need to use &quot;FormId&quot; (I found out the hard way that this seems to be case sensitive as FormID didn&#39;t work).</p>
<p><a class="asset-img-link" href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c017c35825f12970b-popup" onclick="window.open( this.href, &#39;_blank&#39;, &#39;width=640,height=480,scrollbars=no,resizable=no,toolbar=no,directories=no,location=no,menubar=no,status=no,left=0,top=0&#39; ); return false" style="display: inline;"><img alt="Image3" class="asset  asset-image at-xid-6a0154324289e5970c017c35825f12970b" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c017c35825f12970b-500wi" title="Image3" /></a></p>
<p>Ergo, my final url to show all the documents filtered by the Form field (in this case where that value was 1) would be:<br /><strong>http://sp2010/test/_vti_bin/listdata.svc/TestDocuments?$filter=FormId eq 1</strong></p>
<p>Ok, now I needed to be able to connect to the data from InfoPath.&#0160; That&#39;s a simple enough process, simply add a data connection for a REST Service.&#0160; Use the URL from above, but do not have it retrieve data by default.</p>
<p>&#0160;Now you have a couple options about how you form the URL.&#0160; If you want to linked document to open in the browser you&#39;re going to have to jump through some serious hoops.&#0160; Certainly doable though and I&#39;ll have more on that in a moment.</p>
<p>If it&#39;s ok that the document opens in the client side applications than the solution is much simpler, all you&#39;ll need to do is create a link to the document using the following XPath function: <strong>concat(xdServerInfo:get-SharePointSiteUrl(), m:properties/ns1:Path, &quot;/&quot;, m:properties/ns1:Name)</strong></p>
<p>So step by step, here&#39;s how you&#39;ll finish configuring your InfoPath form:</p>
<p>1. Insert a repeating section and bind it to the &quot;entry&quot; of the REST service.</p>
<p>2. Add a hyperlink control into the repeating section and set it&#39;s &quot;Link To&quot; data source value to <strong>concat(xdServerInfo:get-SharePointSiteUrl(), m:properties/ns1:Path, &quot;/&quot;, m:properties/ns1:Name)</strong>.&#0160; You can also set the &quot;Display&quot; data source to m:properties/ns1:Name.</p>
<p>3. If you haven&#39;t already done so, create a secondary service to the same SharePoint list that you&#39;re submitting the InfoPath form to and get the ID value.&#0160; Make sure you&#39;re only getting the value for the current form, and that you&#39;re getting it automatically on form load.</p>
<p>4. Create an FormLoad action event (or a Action rule on a button) and set it to &quot;Change REST URL&quot;.&#0160; Set the URL for the REST call to: <strong>concat(xdServerInfo:get-SharePointSiteUrl(), &quot;_vti_bin/listdata.svc/TestDocuments?$filter=FormId eq &quot;, max(ID))</strong>.&#0160; This will then load the list of documents to display in the form.</p>
<p>Voila, a list of document hyperlinks shown in the InfoPath form.</p>
<p><strong>Open Documents In Browser</strong></p>
<p>Now, if opening the documents using the client application isn&#39;t enough here&#39;s the good, the bad and the hack you need to put together to have your hyperlink open the document in the browser window.&#0160; First, an example function:</p>
<p><strong>concat(xdServerInfo:get-SharePointSiteUrl(), &quot;_layouts/&quot;, concat(substring(&quot;Word&quot;, 1, contains(m:properties/ns1:Name, &quot;docx&quot;) * string-length(&quot;Word&quot;)), substring(&quot;xl&quot;, 1, contains(m:properties/ns1:Name, &quot;xlsx&quot;) * string-length(&quot;xl&quot;))), &quot;Viewer.aspx?id=&quot;, m:properties/ns1:Path, &quot;/&quot;, m:properties/ns1:Name)</strong></p>
<p>Told you it was going to be ugly.&#0160; This section of the function <br /><strong>concat(substring(&quot;Word&quot;, 1, contains(m:properties/ns1:Name, &quot;docx&quot;) * string-length(&quot;Word&quot;)), substring(&quot;xl&quot;, 1, contains(m:properties/ns1:Name, &quot;xlsx&quot;) * string-length(&quot;xl&quot;)))</strong><br /> is what decides which viewer you need to use.&#0160; The example above only handles .xslx and .docx documents... you&#39;ll need to expand the function to support other types of documents.</p>
<p>Now the hack.&#0160; This kills me actually.&#0160; The hyperlink control in InfoPath does not support XPath functions as the &quot;Link To&quot; value.&#0160; Ergo, you can&#39;t just put this function in the hyperlink control and have it work nice and neat.&#0160; The work around I came up with involves using a rule to set the value of one of the fields in the REST secondary datasource to the XPath for the hyperlink and then referencing that field from the hyperlink&#39;s &quot;Link To&quot; data source property.&#0160;</p>
<p>I know, this is ugly, but I figured since we&#39;re only going to be reading data I can use one of the fields I don&#39;t need to display to the users as a holding area for this information.&#0160; If you wanted to, the much cleaner solution would be to write code behind and populate a repeating field in the main section of the InfoPath form with the hyperlink values and probably the display value too.&#0160; However, code behind wasn&#39;t acceptable in my scenario.</p>
<p>Ok, so here&#39;s what I did.</p>
<p>5. Go to the REST secondary data source, expand entry and select m:properties.</p>
<p>6. Add an action rule to &quot;Set a fields value&quot; and then set a field from the properties area (I used CopySource) to the XPath value shown above.&#0160; What will happen is that as the data loads the CopySource field will be populated with the hyperlink you want that particular entry to use to load the document in the browser.</p>
<p>7. Replace the &quot;Link To&quot; data source value of the hyperlink control you added in Step 2 with the field you set the value of in step 6.&#0160; You should have already set the &quot;Display&quot; data source, but if not go ahead and do it now.</p>
<p>Voila, publish the form and the list of documents will be displayed for the user that show the linked document in the browser when clicked on.</p>
<p><a class="asset-img-link" href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c017c359bec26970b-pi" style="display: inline;"><img alt="Image4" border="0" class="asset  asset-image at-xid-6a0154324289e5970c017c359bec26970b image-full" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c017c359bec26970b-800wi" title="Image4" /></a><br /><br /></p>
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[A tutorial on how to display links to a filtered list of documents in a external document library on an InfoPath 2010 form.
]]>
      </excerpt:encoded>
      <wp:post_id>19</wp:post_id>
      <wp:post_date>
        <![CDATA[2013-01-11 15:00:38]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2013-01-11 20:00:38]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2013-01-11 15:00:38]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2013-01-11 20:00:38]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[closed]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[infopath-show-links-to-documents-in-a-library-from-the-form]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="post_tag" nicename="rest">
        <![CDATA[REST]]>
      </category>
      <category domain="category" nicename="2010">
        <![CDATA[2010]]>
      </category>
      <category domain="category" nicename="infopath">
        <![CDATA[InfoPath]]>
      </category>
      <category domain="post_tag" nicename="infopath">
        <![CDATA[InfoPath]]>
      </category>
      <category domain="post_tag" nicename="link">
        <![CDATA[link]]>
      </category>
      <category domain="post_tag" nicename="document">
        <![CDATA[document]]>
      </category>
      <category domain="post_tag" nicename="document-library">
        <![CDATA[document library]]>
      </category>
      <category domain="post_tag" nicename="form">
        <![CDATA[form]]>
      </category>
      <wp:comment>
        <wp:comment_id>9</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Amy]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[amypenbyn@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://www.evokeit.com</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[86.138.169.85]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2013-05-29 05:56:36]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2013-05-29 10:56:36]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Julie, the old cliché goes "problems are there to be solved", and this post is an illustration of that.
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>169</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Josy]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[jojosy.a@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[159.53.174.142]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-11-09 08:59:33]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-11-09 13:59:33]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thanks a lot for this!!!!]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1541771973.7717258930206298828125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1541780189.3019759654998779296875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Using SQL Reporting Services Report Viewer Web Part to display Access Services report.]]>
      </title>
      <link>https://julieturner.net/2011/11/using-sql-reporting-services-report-viewer-web-part-to-display-access-services-report/</link>
      <pubDate>Mon, 07 Nov 2011 16:25:31 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/index.php/2011/11/using-sql-reporting-services-report-viewer-web-part-to-display-access-services-report/</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<p>As you may or may not be aware when an Access database is published to a SharePoint site the reports in the database are converted into SQL Reporting Services reports.&#0160; Great, you think... that should mean you can host the report elsewhere in the SharePoint higherarchy simply by using the SQL Reporting Services Report Viewer Web Part.&#0160; And in fact, you can, it&#39;s just a little tricky getting it configured.&#0160; Certainly not anything you can&#39;t overcome but hopefully by posting this information it&#39;ll help save some time.</p>
<p>So first, we need to create the page that we&#39;re going to put our report on.&#0160; Next, you&#39;re going to want to insert a SQL Reporting Services Report Viewer Web Part.&#0160; And finally, we need to configure it, which includes setting the location of the report as well as any report aparameters.</p>
<p><strong>Configuring the Web Part</strong></p>
<p>The first step is to set the report that the Web Part should display.&#0160; To do that you need the URL to the rdl file that represents the Access report.&#0160; To get that, browse to the SharePoint site hosting the Access application.&#0160; Next, manually change the URL after the site name to show all site content.&#0160; You do this by appending &quot;_layouts/viewlsts.aspx&quot; after the site which should look something like the following where &quot;Access Services Demo&quot; is the name of my SharePoint site:</p>
<p><a href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c015392de7da0970b-pi" style="display: inline;"><img alt="ViewListURL" border="0" class="asset  asset-image at-xid-6a0154324289e5970c015392de7da0970b" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c015392de7da0970b-800wi" title="ViewListURL" /></a><span style="font-size: 8pt;"><br /></span></p>
<p>Now in the listing of the site&#39;s contents you&#39;ll see a document library called Report Definitions.&#0160; Browse to that library and you&#39;ll see all your Access Reports defined there.&#0160; Now, go back to the web part properties.&#0160; As shown below click on the ellipses of the Report parameter and then put in the URL of the report definition document library.</p>
<p><a href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c0162fc33e7ec970d-pi" style="display: inline;"><img alt="ReportViewer" border="0" class="asset  asset-image at-xid-6a0154324289e5970c0162fc33e7ec970d" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c0162fc33e7ec970d-800wi" title="ReportViewer" /></a></p>
<p>When you click the green arrow it will load a list of the reports available in that library.&#0160; Select the one you want to display and click OK.</p>
<p><a href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c015392de8958970b-pi" style="display: inline;"><img alt="SetReportLocation" border="0" class="asset  asset-image at-xid-6a0154324289e5970c015392de8958970b image-full" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c015392de8958970b-800wi" title="SetReportLocation" /></a></p>
<p>Now, back in the web part properties expand the parameters section and click on Load Parameters.</p>
<p>In Access Services all reports have the following parameters:</p>
<ul>
<li>AccSrv_SiteId: This is the GUID of the root site collection.</li>
<li>AccSrv_SiteZone: Default</li>
<li>AccSrv_WebId: This is the GUID of the site hosting the Access application</li>
<li>AccSrv_TimeOffset: TimeZone offset</li>
<li>AccSrv_Where: A where clause for the report</li>
<li>AccSrv_DataLCID: The Data Language Reference ID (1033 is the English Default)</li>
<li>AccSrv_CollationLCID: The collation Language Reference ID (2070 is the English Default)</li>
</ul>
<p>I have found that for most reports setting the AccSrv_SiteId and AccSrv_WebId are all that is necessary for the report to generate properly.&#0160; However, under certain circumstances where there was summation and grouping in the report I&#39;ve had to set the DataLCID value to 1033 (the default for English).&#0160; All the other values can be left to use the report default.</p>
<p><span style="font-size: 10pt;"><strong><em>Note:</em></strong> <em>There are many ways to get the GUID for a site but I find the quickest way is to use a tool like SharePoint Manager 2010.&#0160; </em></span></p>
<p>If you have the need to adjust the Where parameter of the report keep in mind that you need to pass the entire where clause as you would type it in the filter parameter of the report if you were working in Access.&#0160; You also must include a beginning &quot;=&quot; sign.&#0160;</p>
<p>For instance the following &quot;Where&quot; clause limits the report to those records where the value of the [Quarter] field is equal to 1.&#0160; (Even though [Quarter] is a numeric field I still have to pass it as a string).</p>
<p><a href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c0162fc33e5e9970d-pi" style="display: inline;"><img alt="WhereClause" border="0" class="asset  asset-image at-xid-6a0154324289e5970c0162fc33e5e9970d" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c0162fc33e5e9970d-800wi" title="WhereClause" /></a><br /><br /></p>
<p>And then here&#39;s what the report looks like when rendered:</p>
<p><a href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c015436b204ad970c-pi" style="display: inline;"><img alt="Report" border="0" class="asset  asset-image at-xid-6a0154324289e5970c015436b204ad970c image-full" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c015436b204ad970c-800wi" title="Report" /></a></p>
<p>If you want to pass the Where clause in using a Query String filter you can do that but you&#39;ll first need to modify the parameter of the report by going back to the Report Definition library, and modifying the parameters of the report so that the AccSrv_Where parameter is changed to &quot;Prompt&quot; instead of hidden.&#0160; The only downside is that the report shows the user the where clause when it&#39;s rendered but this can be overcome by using a little JQuery script to hide the &lt;div&gt; that shows in the report.</p>
<p><a href="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c0162fc33f0dc970d-pi" style="display: inline;"><img alt="ManageParameters" border="0" class="asset  asset-image at-xid-6a0154324289e5970c0162fc33f0dc970d image-full" src="http://sharepointvenividivici.typepad.com/.a/6a0154324289e5970c0162fc33f0dc970d-800wi" title="ManageParameters" /></a></p>
<p>Note also in the above screen shot that one of the option is &quot;Edit in Report Builder&quot;.&#0160; If you don&#39;t have a complex report you can modify the report definition using this SQL Report Builder tool, which is downloaded for you automatically.&#0160; This was how I initially determined the values of some of the parameters by showing them in the header and then running the report from within the Access UI on the SharePoint site.</p>
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[How to display a Access report in a SharePoint site using the SQL Reporting Services Report Viewer Web Part.
]]>
      </excerpt:encoded>
      <wp:post_id>20</wp:post_id>
      <wp:post_date>
        <![CDATA[2011-11-07 11:25:31]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2011-11-07 16:25:31]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2011-11-07 11:25:31]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2011-11-07 16:25:31]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[closed]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[using-sql-reporting-services-report-viewer-web-part-to-display-access-services-report]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="2010">
        <![CDATA[2010]]>
      </category>
      <category domain="category" nicename="access-services">
        <![CDATA[Access Services]]>
      </category>
      <category domain="category" nicename="sql-reporting-services">
        <![CDATA[SQL Reporting Services]]>
      </category>
      <category domain="post_tag" nicename="report-web-part">
        <![CDATA[Report Web Part]]>
      </category>
      <wp:comment>
        <wp:comment_id>10</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Dirk]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[d.grasekamp@proaktion.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://www.proaktion.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[77.188.244.223]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2012-01-25 10:23:33]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2012-01-25 15:23:33]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thank you for this report about reports :-) This has saved much time to me.
Best regards,
Dirk
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>11</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Dirk]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[d.grasekamp@proaktion.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://www.proaktion.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[88.71.238.70]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2012-02-12 07:10:17]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2012-02-12 12:10:17]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi,
I have developed a client tool which selects the two required GUIDs.
<a href="http://www.proaktion.net/client-tool-reports/" rel="nofollow">http://www.proaktion.net/client-tool-reports/</a>
Users can work from a client PC with that.
Best regards,
Dirk
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Setting an Application Page Title from code]]>
      </title>
      <link>https://julieturner.net/2011/06/setting-an-application-page-title-from-code/</link>
      <pubDate>Wed, 15 Jun 2011 21:02:25 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/index.php/2011/06/setting-an-application-page-title-from-code/</guid>
      <description></description>
      <content:encoded>
        <![CDATA[I'm currently dealing with a requirement where I need to the set an application page's title from the code behind.

By default the form has a ContentPlaceHolder control with a 
<span style="text-align: center; font-weight: 700;">ContentPlaceHolderID=&quot;PlaceHolderPageTitle&quot;</span>
which in the master page is the text that will fall in the header&#39;s title tag. Unfortunately, <em>&lt;asp:Content&gt;</em> controls are not added to the hierarchy at runtime so I can't access it directly.

There are good ways to modify this title on the client side with Javascript but client side code doesn't really suit my needs as the title will come from some custom manipulation that's better done on the server. It did cross my mind that I could do this minipulation and then post it back in script to have it update but it seemed kind of like taking the long way around. Anyway, long story short I found a way to access that title in the Page_Load event but if anyone out there has any better ideas I'd love to hear them.

<pre class="lang:c# decode:true">
using System.Web.UI.HtmlControls;

protected void Page_Load(object sender, EventArgs e)
{
  if(!Page.IsPostBack){
    HtmlTitle tagTitle = new HtmlTitle();
    //Obviously this would be more complex code in practice
    tagTitle.Text = "My new title here";
    //The parent of "PlaceHolderPageTitle" is the HtmlTitle control
    Page.Header.Controls.Remove(
        Page.Header.FindControl("PlaceHolderPageTitle").Parent);
    Page.Header.Controls.Add(tagTitle);
  }
}
</pre>
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>21</wp:post_id>
      <wp:post_date>
        <![CDATA[2011-06-15 16:02:25]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2011-06-15 21:02:25]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2017-01-25 18:50:34]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2017-01-25 23:50:34]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[closed]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[setting-an-application-page-title-from-code]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="2010">
        <![CDATA[2010]]>
      </category>
      <category domain="category" nicename="application-page">
        <![CDATA[Application Page]]>
      </category>
      <category domain="post_tag" nicename="htmltitle">
        <![CDATA[HtmlTitle]]>
      </category>
      <category domain="post_tag" nicename="application-page">
        <![CDATA[Application Page]]>
      </category>
      <category domain="post_tag" nicename="contentplaceholder">
        <![CDATA[ContentPlaceHolder]]>
      </category>
      <category domain="post_tag" nicename="placeholderpagetitle">
        <![CDATA[PlaceHolderPageTitle]]>
      </category>
      <category domain="post_tag" nicename="header">
        <![CDATA[Header]]>
      </category>
      <category domain="post_tag" nicename="title">
        <![CDATA[Title]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_jetpack_dont_email_post_to_subs]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>12</wp:comment_id>
        <wp:comment_author>
          <![CDATA[billd@boxerproperty.com]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[billd@boxerproperty.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[67.200.219.21]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2012-02-29 15:26:20]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2012-02-29 20:26:20]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[What about if it is set as IsDlg = 1?  It doesn't seem to work.
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>13</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://profile.typepad.com/6p0154324289e5970c</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2012-03-05 10:57:38]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2012-03-05 15:57:38]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Yes, I wouldn't really expect it to since I expect the page layout would be different.  I really haven't tried the scenario you're speaking of but I suspect you'd need to look at the loaded page and determine what the proper control is and change the code accordingly.
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Maintain file version history when moving/copying files between SharePoint sites]]>
      </title>
      <link>https://julieturner.net/2011/06/maintain-file-version-history-when-movingcopying-files-between-sharepoint-sites/</link>
      <pubDate>Thu, 02 Jun 2011 13:54:43 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/index.php/2011/06/maintain-file-version-history-when-movingcopying-files-between-sharepoint-sites/</guid>
      <description></description>
      <content:encoded>
        <![CDATA[I'm working on a requirement to copy files from one document library to another document library in a sub-site. I figured this wouldn't be horribly difficult to do but turns out it's not as simple as you might think and for some reason, although I found many questions about how to do it, I found very few answers.  From the things I've read out there it's apparently relatively easy if you're moving documents within the same site... apparently the Move method works and I read where someone suggesting using SPExport and SPImport. I also found a post by Ivan Sanders that said that you can use <em>Site Actions &gt; Manage Content and Structure &gt; Choose the Library  &gt; Choose the docs &gt;Use the Actions drop Down Click onMove &gt;  Choose the new Location</em> to accomplish the move on this <a href="http://www.sharepointdev.net/sharepoint--general-question-answers-discussion/cannot-maintain-versioning-on-documents-when-moving-to-different-folders-within-the-same-repository-23.shtml" target="_blank" title="http://www.sharepointdev.net/sharepoint--general-question-answers-discussion/cannot-maintain-versioning-on-documents-when-moving-to-different-folders-within-the-same-repository-23.shtml">thread</a>. Unfortunately, none of these solutions fully met my needs.

Ok, so onward and upward... I ended up started from a good post by 'Dink' on <a href="http://vspug.com/dez/2007/11/30/moving-copying-documents-between-libraries-with-metadata-including-version-history/" target="_blank" title="Copying documents between libraries with metadata – including version history">Copying documents between libraries with metadata – including version history</a> which was a great starting point but seemed like it could be optimized a bit and was posted back in 2007, so I hoped that there might be potential improvements in 2010. As it turns out there is, in the form of additional overload methods for SPFileCollection.Add

So here's my code snippet. I'll point out that this snippet is in a function that takes two parameters SPListItem itmSource which is the source item to move, and SPDocumentLibrary libDest which is the target document library.

<pre class="lang:c# decode:true">
SPFile fileSource = itmSource.File;
/*Here we'll get the created by and created on values from the source document.*/
SPUser userCreatedBy = fileSource.Author;
/*Note we need to convert the "TimeCreated" property to local time as it's stored in
 the database as GMT.*/
DateTime dateCreatedOn = fileSource.TimeCreated.ToLocalTime();
//Get the versions
int countVersions = itmSource.File.Versions.Count;
/*This is a zero based array and so normally you'd use the < not <= but we need to get
 the current version too which is not in the SPFileVersionCollection so we're going to
 count one higher to accomplish that.*/
for (int i = 0; i <= countVersions; i++)
{
   Hashtable hashSourceProp;
   Stream streamFile;
   SPUser userModifiedBy;
   DateTime dateModifiedOn;
   string strVerComment = "";
   bool bolMajorVer = false;
   if (i < countVersions)
   {
/*This section captures all the versions of the document and gathers the properties
 we need to add to the SPFileCollection.  Note we're getting the modified information
 and the comments seperately as well as checking if the version is a major version
 (more on that later).  I'm also getting a stream object to the file which is more efficient
 than getting a byte array for large files but you could obviously do that as well. 
 Again note I'm converting the created time to local time.*/
      SPFileVersion fileSourceVer = itmSource.File.Versions[i];
      hashSourceProp = fileSourceVer.Properties;
      userModifiedBy = (i == 0) ? userCreatedBy: fileSourceVer.CreatedBy;
      dateModifiedOn = fileSourceVer.Created.ToLocalTime();
      strVerComment = fileSourceVer.CheckInComment;
      bolMajorVer = fileSourceVer.VersionLabel.EndsWith("0") ? true : false;
      streamFile = fileSourceVer.OpenBinaryStream();
   }
   else
   {
/*Here I'm getting the information for the current version.  Unlike in SPFileVersion when
 I get the modified date from SPFile it's already in local time.*/
      userModifiedBy = fileSource.ModifiedBy;
      dateModifiedOn = fileSource.TimeLastModified;
      hashSourceProp = fileSource.Properties;
      strVerComment = fileSource.CheckInComment;
      bolMajorVer = fileSource.MinorVersion == 0 ? true : false;
      streamFile = fileSource.OpenBinaryStream();
   }
   string urlDestFile = libDest.RootFolder.Url + "/" + fileSource.Name;
/*Here I'm using the overloaded Add method to add the file to the SPFileCollection. 
 Even though this overload takes the created and modified dates for some reason they aren't
 visible in the SharePoint UI version history which shows the date/time the file was added
 instead, however if this were a Microsoft Word document and I opened it in Word 2010 and looked
 at the version history it would all be reflective of the values passed to this Add method.
 I'm voting for defect but there could just be something I'm missing.*/
   SPFile fileDest = libDest.RootFolder.Files.Add(
       urlDestFile, 
       streamFile, 
       hashSourceProp, 
       userCreatedBy, 
       userModifiedBy, 
       dateCreatedOn, 
       dateModifiedOn, 
       strVerComment, 
       true);
   if (bolMajorVer)
/*Here we're checking if this is a major version and calling the publish method, passing in
 the check-in comments.  Oddly when the publish method is called the passed created and
 modified dates are displayed in the SharePoint UI properly without further adjustment.*/
        fileDest.Publish(strVerComment);
   else
   {
/*Setting the created and modified dates in the SPListItem which corrects the display in the
 SharePoint UI version history for the draft versions.*/
      SPListItem itmNewVersion = fileDest.Item;
      itmNewVersion["Created"] = dateCreatedOn;
      itmNewVersion["Modified"] = dateModifiedOn;
      itmNewVersion.UpdateOverwriteVersion();
   }
}
</pre>]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>22</wp:post_id>
      <wp:post_date>
        <![CDATA[2011-06-02 08:54:43]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2011-06-02 13:54:43]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2017-01-24 12:29:25]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2017-01-24 17:29:25]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[closed]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[maintain-file-version-history-when-movingcopying-files-between-sharepoint-sites]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="2010">
        <![CDATA[2010]]>
      </category>
      <category domain="category" nicename="spdocumentlibrary">
        <![CDATA[SPDocumentLibrary]]>
      </category>
      <category domain="post_tag" nicename="spdocumentlibrary">
        <![CDATA[SPDocumentLibrary]]>
      </category>
      <category domain="post_tag" nicename="spfileversions">
        <![CDATA[SPFileVersions]]>
      </category>
      <category domain="post_tag" nicename="spfile">
        <![CDATA[SPFile]]>
      </category>
      <category domain="post_tag" nicename="history">
        <![CDATA[History]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_jetpack_dont_email_post_to_subs]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_last_editor_used_jetpack]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[classic-editor]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>14</wp:comment_id>
        <wp:comment_author>
          <![CDATA[nattuthurai]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[nattuthurai.k@live.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[182.71.226.241]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2011-07-31 06:00:16]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2011-07-31 11:00:16]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[hi Your post very useful..
Thanks,
Nattuthurai.K
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>15</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Dan]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[havenotadress@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[217.70.137.14]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2011-11-11 07:25:48]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2011-11-11 12:25:48]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[But it will lost ModifiedBy when move the file 2 times without modifying the metadata on editpage between this moves :(
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>16</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://profile.typepad.com/6p0154324289e5970c</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2011-11-11 07:37:13]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2011-11-11 12:37:13]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Dan,
Not sure I understand what you mean.  You're saying that even thought the code sets the ModifiedBy metadata if it's the second time it's been moved by the code that piece of metadata will be missing on the second move?  Only that one or others as well?
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>17</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Ali]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[ali.belherazem@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[213.41.72.26]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2012-03-20 05:11:18]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2012-03-20 10:11:18]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Julie,
You can use MoveTo Method that takes an argument which is the URL of your target (<a href="http://anotherserver.....)" rel="nofollow">http://anotherserver.....)</a>
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>18</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://profile.typepad.com/6p0154324289e5970c</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2012-03-20 06:58:28]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2012-03-20 11:58:28]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Ali, Thanks for your reply.  The MoveTo method can be used yes, but not if you want to maintain version history with it which was the point of the post.
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>19</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Ali]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[bm_svm@hotmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[212.157.112.26]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2012-04-06 06:03:55]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2012-04-06 11:03:55]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Sorry Julie,
The MoveTo method maintain version history (in the same site), and not between different sites.
Thanks for your post.
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>20</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Frederik]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[voltje@live.be]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://blog.voltje.be</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[91.183.101.37]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2012-04-16 04:48:58]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2012-04-16 09:48:58]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Ali, That's not true...
The MoveTo method does not maintain version history on a per version base.
It does remember the correct metadata for the "current version"...
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>21</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Frederik]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[voltje@live.be]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://blog.voltje.be</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[91.183.101.37]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2012-04-16 04:51:20]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2012-04-16 09:51:20]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[MoveTo does not maintain version history. It does maintain the correct metadata for the "current version". But every seperated version metadata is lost.
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>22</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Pham Trung]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[trungpv@live.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[116.193.72.130]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2012-05-04 03:56:24]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2012-05-04 08:56:24]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Another way to copy or move document between Site Collection is use: SPExport and SPImport (keep all the versions, metadata, properties ...)
A bug in:
bolMajorVer = fileSourceVer.VersionLabel.EndsWith("0") ? true : false;
-> bug if the version of document like this: 0.10; 0.20
It should be EndsWith(".0").
Another way to check a fileVersion is Major or not is (fileSourceVer.Level == SPFileLevel.Published)
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>23</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Thomas]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[thomas.bourgerette@orange.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[83.206.143.129]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2012-06-20 08:48:25]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2012-06-20 13:48:25]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[hi,
Your post is very useful but i'v got the following error :
[ArgumentException: user
Parameter name: Specified value is not supported for the user parameter.]
Microsoft.SharePoint.SPFileCollection.ValidateUser(SPUser user) +26681329
Microsoft.SharePoint.SPFileCollection.AddStreamInternal(String urlOfFile, Stream stream, Boolean bIsMigrate, Boolean bIsPublish, Boolean bcheckRequiredProps, Boolean bAutoCheckoutOnInvalidData, Boolean bForceCreateVersion, String lockIdMatch, SPUser createdBy, SPUser modifiedBy, DateTime timeCreated, DateTime timeLastModified, Object varProperties, String checkinComment, Boolean bOverwrite, Stream formatMetadata, String etagToMatch, Boolean bSyncUpdate, SPVirusCheckStatus& virusCheckStatus, String& virusCheckMessage, String& etagNew) +227
Microsoft.SharePoint.SPFileCollection.Add(String urlOfFile, Stream file, Hashtable properties, SPUser createdBy, SPUser modifiedBy, DateTime timeCreated, DateTime timeLastModified, String checkInComment, Boolean overwrite, Boolean requireWebFilePermissions) +351
Microsoft.SharePoint.SPFileCollection.Add(String urlOfFile, Stream file, Hashtable properties, SPUser createdBy, SPUser modifiedBy, DateTime timeCreated, DateTime timeLastModified, String checkInComment, Boolean overwrite) +91
Any idea ?
Thanks
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>24</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://sharepointvenividivici.typepad.com</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[98.217.149.207]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2012-06-21 12:30:23]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2012-06-21 17:30:23]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Thomas,
Unfortunately without context it's hard to say, but based simply on the error I would say you're passing in something into one of the user field that it doesn't like.  Maybe not the right type.  if you posted the line of code that it was erroring on I might be able to help you further.
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>25</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Stephen]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[stephenhendry@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[80.254.146.140]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2012-06-29 11:16:52]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2012-06-29 16:16:52]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[For me the code was falling over on:
fileDest.Publish(strVerComment);
Turning on minor versions on the list got this to work for me.
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>26</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Emad]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[emad@csharpcourses.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[121.217.222.71]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2012-07-03 01:49:41]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2012-07-03 06:49:41]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thanks for this article I had to change the code slightly for my own specific situation. Thanks so much
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>27</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Rajeev]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[writetorajeevsaklani@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[204.152.235.219]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2013-02-08 13:10:05]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2013-02-08 18:10:05]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[so there is no out of the box way on this in sharepoint 2010 and how to use ur code above ? please guide
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>28</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Jayaraja J]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://profile.typepad.com/jayaraja</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[67.98.88.213]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2013-04-26 12:41:06]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2013-04-26 17:41:06]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[When moving the user info as well, User not found(say if user is removed from AD) error will spit out , how to handle this situtation?
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>29</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Jeroen]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[jeroen.vanrijt@shareone.nl]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[212.178.132.90]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2013-06-11 04:58:29]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2013-06-11 09:58:29]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I have the same problem, did you fix it already?
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>30</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Mattias]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[mattias@dqc.se]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://www.dqc.se</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[194.17.178.40]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2013-07-10 19:51:00]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2013-07-11 00:51:00]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[A late response, but it might help someone else.
<b>Are you trying to copy between different site collections?</b> In that case, you need to ensure that the user exists on the target. SPFileCollection.ValidateUser(SPUser user) throws if user.SiteId != SPFileCollection.Web.Site.ID, which it won't be if you're trying to copy between site collections.
Example:
var webDest = libDest.ParentWeb;
SPUser userCreatedBy = webDest.EnsureUser(fileSource.Author.LoginName);
You will need to do the same for userModifiedBy.
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>31</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Guido]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[guidoforster@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[217.25.128.77]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2014-05-27 11:40:29]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2014-05-27 16:40:29]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi there!
I use your codesnippet. It works fine except for one thing: after a file is published (fileDest.Publish(strVerComment);), the "Modified"-Date is changed to "now" (current date with current time).
Do you know any way to overwrite that value (listItem["Modified"] = oldDate;) after it has been published?
I tried the following methods but always failed:
- listItem.SystemUpdate(false);
- listItem.UpdateOverwriteVersion();
Thanks for any help! Regards, Guido
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>32</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Guido]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[guidoforster@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[217.25.128.77]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2014-06-02 04:12:21]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2014-06-02 09:12:21]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I found a solution:
<a href="http://sharepoint.stackexchange.com/questions/92577/move-documents-update-modified-date-of-published-document/101422#101422" rel="nofollow">http://sharepoint.stackexchange.com/questions/92577/move-documents-update-modified-date-of-published-document/101422#101422</a>
To change the "Modified"-Date after publishing a file, you need to turn off "Minor-Versioning" for the DocLib!
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>33</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://profile.typepad.com/6p0154324289e5970c</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[173.9.88.185]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2014-06-02 07:06:18]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2014-06-02 12:06:18]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Glad you found something that worked for you.  My only "good" suggestion if you had needed minor versions (which was my assumption based on your request) that you create a separate Modified date field and update it as appropriate.
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>34</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Nitin Jagtap]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://profile.typepad.com/jagtap</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[115.119.192.18]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2014-07-28 09:54:58]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2014-07-28 14:54:58]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Juile,
Thanks for writing such wonderful blog related to version history in SharePoint.
I have used same guidelines what ever you have given regarding how to copy all document versions from one library to another library with specific Content/Document.
But my code is not working properly it giving error like ,
<b>System.UnauthorizedAccessException: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))
at Microsoft.SharePoint.SPGlobal.HandleUnauthorizedAccessException(UnauthorizedAccessException ex) </b>
I am really confused about this why it is giving such error which is out of my thinking power.
I have used this method of SPFileCollection class,
<b>
at Microsoft.SharePoint.SPFileCollection.Add(String urlOfFile, Stream file, Hashtable properties, SPUser createdBy, SPUser modifiedBy, DateTime timeCreated, DateTime timeLastModified, String checkInComment, Boolean overwrite)
</b>
Could you please give some guidelines regarding same...
Hope so I will get positive feedback from you.
Thanks,
Nitin
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>35</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://profile.typepad.com/6p0154324289e5970c</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2014-07-29 08:47:22]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2014-07-29 13:47:22]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Nitin, I'd like to help but I would need more information, like what line your getting the error on.  Also, what type of scenario are you using to execute your code, event, workflow action, timer job, etc?  Are you sure the account that you're running under has access to both the source and the destination web. Are the webs in the same farm, in the same web app?
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>36</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Nitin Jagtap]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://profile.typepad.com/jagtap</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[115.119.192.18]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2014-07-29 10:05:46]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2014-07-29 15:05:46]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Julie,
Thanks for reply,I am using this code in Event Receiver.I am copying the document with version from source to destination, these both are in same web app. <b>The user have access to site collection but limited(Contribute) privileges</b>.When I  do the same process with Administrator credentials it is working fine.Users having Contribute permissions it is giving error mentioned above.
<b> I have also tried with RunWithElevated Privileges the result will be the same error. </b>
Please suggest me the way to avoid  this error.
Thanks
Nitin Jagtap
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>37</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Oliver Lopez]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[oliverlp@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[212.112.166.34]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2015-01-20 11:53:31]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2015-01-20 16:53:31]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi,
I have the same problem as Nitin. It is just as described. The problem arises when the user is a contributor.
Did you find a solution?
Thanks,
Oliver
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>38</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Hassan]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[ah_hassanzadeh@yahoo.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[202.129.214.157]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2015-10-13 00:36:45]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2015-10-13 05:36:45]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Just wanted to thank you for this fantastic code sample. Works like a charm.
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>39</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Andy]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[andrew.gerhard.myles@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[64.39.183.242]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2016-03-15 12:51:14]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2016-03-15 17:51:14]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Julie,
Thank you for your post; it gives me hope that I can meet my team's requirements.
I am wondering if you've heard of/interacted with anyone trying to realize this functionality in Sharepoint Online?
I assume you're working with direct access to a server that, at your original time of posting, was running SP2010. Now, it seems like a lot of the powershell commands are unavailable in SPOnline:
<a href="https://technet.microsoft.com/en-us/library/fp161364.aspx" rel="nofollow">https://technet.microsoft.com/en-us/library/fp161364.aspx</a>
Also, I am looking to automate the version maintenance as part of a larger approval workflow.
Any, any, any info at all would be appreciated!
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>40</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://profile.typepad.com/6p0154324289e5970c</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[173.9.88.185]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2016-03-15 13:26:07]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2016-03-15 18:26:07]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Well, you're right about that this was code that was run against an on prem farm... for sponline you have a couple options, CSOM, JSOM, and REST, the most complete of these being CSOM.  What I would suggest is you take this code and try and rewrite it using CSOM which would then work against SharePoint online... to be clear this is what mean... <a href="https://msdn.microsoft.com/en-us/library/office/dn268594.aspx" rel="nofollow">https://msdn.microsoft.com/en-us/library/office/dn268594.aspx</a>
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>41</wp:comment_id>
        <wp:comment_author>
          <![CDATA[juerg.zellweger@hotmail.ch]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[juerg.zellweger@hotmail.ch]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[193.246.86.39]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2016-07-06 03:56:16]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2016-07-06 08:56:16]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thanks for that great code...
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>45</wp:comment_id>
        <wp:comment_author>
          <![CDATA[sweetraskels]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[sweetraskels@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://gravatar.com/sweetraskels</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[71.125.26.76]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2016-09-26 13:10:43]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2016-09-26 18:10:43]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[developed the code in Dev and works great, published on a different environment am getting User Not Found exception. Moving within the same site from libA to libB.
User cannot be found.Stack Trace :   
 at Microsoft.SharePoint.SPUserCollection.get_Item(String loginName)    on  userModifiedBy = (i == 0) ? userCreatedBy : fileSourceVer.CreatedBy;

any thoughts?]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1474913444.306591033935546875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1475543817.6626169681549072265625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>46</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[192.0.100.233]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2016-10-03 20:16:57]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2016-10-04 01:16:57]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Sorry, not without more information on what's in those variables... I would honestly break that line up and look at what the exact values are.  Probably just trying to do something with a Null or something
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>45</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1475543817.7467920780181884765625;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>48</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Ferry Martens]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[f.martens@nedcard.nl]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[62.41.114.140]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-01-03 05:14:49]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-01-03 10:14:49]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Julie,

I have been searching for this functionality. Your code seems to do everything that I want.
As I am not a programmer or developper.... how do I use this code. What are the steps I have to take if I want to move a document from source library to destination library???]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1483438489.3085401058197021484375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1484770652.4179060459136962890625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>49</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-01-18 15:17:32]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-01-18 20:17:32]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Ferry Martens,

So, this code is meant to be used by a developer and isn't really functional to be used any other way.  If you want to move document from a source library to a destination library there are a few solutions, but assuming you want to maintain history you're going to need to use a third party tool like <a href="https://en.share-gate.com/" target="_blank" rel="nofollow">ShareGate</a>.

-Julie]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>48</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1484770652.5180339813232421875;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>50</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Ferry Martens]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[f.martens@nedcard.nl]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[62.41.114.140]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-01-19 05:50:00]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-01-19 10:50:00]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I see, then I am in the wrong place. In the meantime I am testing the third party tool CopyMove2013. Also does the job.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>49</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1484823000.9088280200958251953125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>145</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Joe]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[jodelehr@gw-semi.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[167.170.98.10]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-04-04 15:05:16]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-04-04 20:05:16]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Julie,

Can you provide a full example of this code?

Thanks,]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1522872316.760840892791748046875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1523297944.95958805084228515625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>146</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-04-09 13:20:07]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-04-09 18:20:07]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Sorry, because of the uniqueness of every instance this code is an excerpt of the full implementation based on the particular needs of the solution it belongs to. I really don't have anything else I can share at this time.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>145</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1523298007.756948947906494140625;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>188</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Robin S]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[rowstah@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://plus.google.com/112214021753646691713</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[193.188.156.130]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-12-19 06:44:49]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-12-19 11:44:49]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi. Did you solve this? I Know it's a old question but I'm having this issue right now with sp 2010.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>23</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1545219889.5340158939361572265625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1545227871.9692399501800537109375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>189</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-12-19 09:00:31]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-12-19 14:00:31]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Based on the error message it appears the user is not formatted correctly, but hard to say for sure.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>188</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1545228031.452999114990234375;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[jetpack]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://s2.wp.com/wp-content/mu-plugins/highlander-comments/images/wplogo.png]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[1]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>190</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Robin S]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[rowstah@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://plus.google.com/112214021753646691713</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[193.188.156.130]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-12-19 10:39:13]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-12-19 15:39:13]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I used this for moving the documents between different site collections. So had to use SPWeb.EnsureUser (SPWeb I was moving the document to) on the SPUser objects.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>189</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1545233953.8382289409637451171875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>200</wp:comment_id>
        <wp:comment_author>
          <![CDATA[himanshu barot]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[hbarot89@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://gravatar.com/hbarot89</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[165.225.106.104]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-01-03 03:36:15]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-01-03 08:36:15]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hello Julie,

Please provide your feedback on this. 

I want to move folders along with sub folders and files to another folder into same document library.

https://sharepoint.stackexchange.com/questions/255115/move-folders-along-with-sub-folders-and-files-to-another-existing-folder-with-me]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1546504576.0126039981842041015625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1546513256.6706359386444091796875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>201</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-01-03 06:15:35]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-01-03 11:15:35]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[So I read your question but not sure how I can help you. I should correct one of your assumptions in you question... you don’t run CSOM on the server, (although you can) you just need the client side dlls included to run it on whatever machine you’re developing on. It’s been a really long time since I did CSOM for SP2010 but going by my own post I suspect this is the best way I found to maintain metadata when moving a file. Since powershell is a wrapper from CSOM you could reproduce this code in PoweShell but if I were in your shoes I’d be looking to use a purpose made tool for this like ShareGate. Or just temporarily change your threshold on off hours move the bulk of stuff out and set it back... although you’d want to test that your metadata is saved if that’s one of your goals.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>200</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1546514135.7124559879302978515625;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>202</wp:comment_id>
        <wp:comment_author>
          <![CDATA[himanshu barot]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[hbarot89@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://gravatar.com/hbarot89</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[165.225.106.104]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-01-03 06:30:37]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-01-03 11:30:37]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Many Thanks, Julie for your response, I appreciate your reply.

Regarding CSOM, I know we can do the same things with Power shell and I prefer Power shell over REST or CSOM, JSOM. 

Share Gate I will evaluate but I want to learn to make it So I will give it a go with my programming approach.

As I mentioned In my Question, Even though I increase threshold but the path is not getting open with Open with Explorer issue.

The solution is below but I don't want to make Registry level changes. 

https://support.microsoft.com/en-us/help/912152/you-cannot-access-a-webdav-web-folder-from-a-windows-based-client-comp

The script which I am trying to create will help me to overcome Open with Explorer issue and Threshold Limit issue.

Yes, I want each metadata intact.

Does Microsoft has not provided Move Folder function in Power Shell or Out of the box like we move files?]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>201</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1546515037.099958896636962890625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>630</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Georgi Lubomirov]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[glubomirov@abilitics.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://chatbotpop.com/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[78.83.77.1]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-02-19 16:02:04]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-02-19 21:02:04]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Many thanks! Works beautifully. Translated it to PowerShell:
https://github.com/GLubomirov/SharePointServerSideCopyFilesWithVersions/blob/master/copySP.ps1

Greetings,
George Lubomirov]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1582146125.07116794586181640625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1582844569.5900859832763671875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>631</wp:comment_id>
        <wp:comment_author>
          <![CDATA[marouane]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[marouane1190@hotmail.be]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[212.161.98.166]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-02-27 04:39:18]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-02-27 09:39:18]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Julie,
How can i implement this code in c# to copy all files that i have in a sharepoint to another preserving metadata ?
Must I have already made the copy before using this code, and then use it to modify the metadata ?
thank you in advance]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1582796358.150392055511474609375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1582829806.2367839813232421875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>632</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-02-27 13:57:54]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-02-27 18:57:54]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[No, this code does both.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>631</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1582829874.1673901081085205078125;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>633</wp:comment_id>
        <wp:comment_author>
          <![CDATA[marouane]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[marouane1190@hotmail.be]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[212.161.98.166]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-02-28 10:05:23]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-02-28 15:05:23]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[ok good, but can you give me more information about what you have done before this code, because it not work for me, and i dont understand everythink.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>632</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1582902323.232719898223876953125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>647</wp:comment_id>
        <wp:comment_author>
          <![CDATA[kalluu]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[phongchoi@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://gravatar.com/phongchoi</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[113.161.75.200]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-08-13 22:00:04]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-08-14 03:00:04]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I have the same error when I try to copy the file to a different site collection.
My solutio: ensure the user again in the target web (destination web)
userCreatedBy = targetWeb.EnsureUser(userCreatedBy.LoginName);]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>23</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1597374004.949884891510009765625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1597410625.9862658977508544921875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>661</wp:comment_id>
        <wp:comment_author>
          <![CDATA[laurent LABROUCHE]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[laurent.labrouche@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[194.167.179.10]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2021-04-20 10:06:22]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2021-04-20 15:06:22]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi,
Thanks for this usefull snippet. I did some corrections 
- bolMajorVer = fileSourceVer.VersionLabel.EndsWith(".0") ? true : false; avoid to have major version when minor version like 0.10 etc appear
- when having major version 
                        fileDest.Publish(strVerComment);
                    
                    SPListItem itmNewVersion = fileDest.Item;
                    itmNewVersion["Created"] = dateCreatedOn;
                    itmNewVersion["Modified"] = dateModifiedOn;
                    itmNewVersion.SystemUpdate();

 this allow to publish with the every major version with the right date, except .. for the first ?
can you help me ?]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1618931182.449388027191162109375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1620060866.631916046142578125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>664</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Simona B]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[simonabushevska99@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[46.217.28.6]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2021-09-13 02:38:22]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2021-09-13 07:38:22]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hello Andy, have you found any solution about SPOnline? I'm trying to copy files from one document library to another without losing the version history]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>39</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1631518702.9303839206695556640625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1631543342.443643093109130859375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Add BCS Secondary Fields to a custom list definition]]>
      </title>
      <link>https://julieturner.net/2011/05/add-bcs-secondary-fields-in-custom-list-definition/</link>
      <pubDate>Thu, 12 May 2011 19:15:37 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/index.php/2011/05/add-bcs-secondary-fields-in-custom-list-definition/</guid>
      <description></description>
      <content:encoded>
        <![CDATA[When working with BCS data and creating an external data column in a list or library it is often desirable to show some or all of the secondary fields. In the SharePoint UI, this is a simple task, completed by checking off the fields to capture for viewing, searching, filtering, and sorting later.

<img class="size-full wp-image-73 aligncenter" src="http://julieturner.net/wp-content/uploads/2016/09/BCSSecondaryFields1.gif" alt="bcssecondaryfields1" width="320" height="348" />

However, when you're building your list or library using a custom list definition schema.xml file this is not as simple. After struggling a bit trying to code the XML myself, it dawned on me that I could mock up the field using the UI and then extract the properly formated field tags by getting the schemaxml property of the list.

<img class="aligncenter size-full wp-image-74" src="http://julieturner.net/wp-content/uploads/2016/09/BCSSecondaryFields2.gif" alt="bcssecondaryfields2" width="704" height="163" />

There are various ways to do this but I've found the simplest way it to use a tool like <a title="SharePoint Manager 2010" href="http://spm.codeplex.com/" target="_blank" rel="noopener noreferrer">SharePoint Manager </a>

<ol>
 	<li>Browse to the list/library definition using SharePoint Manager</li>
 	<li>Copy and paste the SchemaXML property into a text file</li>
 	<li>Save the text file with an XML extention</li>
 	<li>Open the XML file in Visual Studio (or some other XML editor). If using Visual Studio, select "Format Document" from the Edit/Advanced menu (Ctrl+E, D)</li>
 	<li>Scroll down to find the external data field you created through the UI. You're looking for a &lt;Field&gt; tag with the Type attribute equal to "BusinessData" The next &lt;Field&gt; tag with Type="Note" will be the hidden field that stores the key value for the selected value. All the additional &lt;Field&gt; tags that follow will be the secondary fields you selected in the UI.</li>
</ol>

<img class="aligncenter size-full wp-image-75" src="http://julieturner.net/wp-content/uploads/2016/09/BCSSecondaryFields3.gif" alt="bcssecondaryfields3" width="800" height="69" />

If you copy and paste those Field tags into your list definition schema file and remove the "SourceID" attribute, the list definition will generate a list with the appropriately defined external data column including the secondary fields.

To dig a little deeper note that you could potentially do this by hand. Creating the field tags for the hidden primary key field and the additional secondary fields isn't all that difficult.

Where this all gets tricky is trying to figure out how to format the SecondaryFieldBdcNames, SecondaryFieldWssNames, SecondaryFieldsWssStaticNames attributes of the primary "BusinessData" field tag. Below is our example field tag for the primary business data field.

 
<pre class="lang:xhtml decode:true " title="Field Definition" >&lt;Field Type="BusinessData" DisplayName="Order" Required="FALSE" ID="{5a261e1a-e157-436c-83a2-fda125d72266}" 
    StaticName="Order0" BaseRenderingType="Text" Name="Order0" ColName="nvarchar3" RowOrdinal="0" 
    Version="6" Group="" SystemInstance="MSSExternal" EntityNamespace="http://sharepoint/bidemo" 
    EntityName="Order" BdcField="OrderNumber" Profile="/_layouts/ActionRedirect.aspx?EntityNamespace=http%3A%2F%2Fjturner%2Dsrv08r2%2Fbidemo&amp;amp;EntityName=Order&amp;amp;LOBSystemInstanceName=MSSExternal&amp;amp;ItemID=" 
    HasActions="True" 
    SecondaryFieldBdcNames="15%2014%2015%208%20CustomerRegion%20CustomerState%20CustomerTarget%20Product%2011" 
    RelatedField="Order_ID" 
    SecondaryFieldWssNames= "33%2033%2033%2027%20Order%5Fx003a%5F%5Fx0020%5FCustomerRegio%20Order%5Fx003a%5F%5Fx0020%5FCustomerState%20Order%5Fx003a%5F%5Fx0020%5FCustomerTarge%20Order%5Fx003a%5F%5Fx0020%5FProduct%2012" 
    RelatedFieldBDCField="" 
    RelatedFieldWssStaticName="Order_ID" 
    SecondaryFieldsWssStaticNames="33%2033%2033%2027%20Order%5Fx003a%5F%5Fx0020%5FCustomerRegio%20Order%5Fx003a%5F%5Fx0020%5FCustomerState%20Order%5Fx003a%5F%5Fx0020%5FCustomerTarge%20Order%5Fx003a%5F%5Fx0020%5FProduct%2012" 
    AddFieldOption="AddToDefaultContentType, AddFieldToDefaultView"/&gt;</pre> 


If you take the value of SecondaryFieldBdcNames attribute for instance and decode it you get:

15 14 15 8 CustomerRegion CustomerState CustomerTarget Product 11

The text <em>CustomerRegion</em>, <em>CustomerState</em>, etc all make sense, they are the root BDC field names. However the numbers that proceed and follow the field names allude me completely.

Regardless, I hope this workaround helps anyone out there who too was struggling to define secondary fields in a custom list definition.]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[When working with BCS data and creating an external data column in a list or library it is often desirable to show some or all of the secondary fields.  In the SharePoint UI this is a simple task, this post shows a simple solution for doing the same task using the field tags in a custom list definition schema.xml file.
]]>
      </excerpt:encoded>
      <wp:post_id>23</wp:post_id>
      <wp:post_date>
        <![CDATA[2011-05-12 14:15:37]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2011-05-12 19:15:37]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2020-01-18 09:12:35]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2020-01-18 14:12:35]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[closed]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[add-bcs-secondary-fields-in-custom-list-definition]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="post_tag" nicename="visual-studio">
        <![CDATA[Visual Studio]]>
      </category>
      <category domain="category" nicename="2010">
        <![CDATA[2010]]>
      </category>
      <category domain="category" nicename="bcs">
        <![CDATA[BCS]]>
      </category>
      <category domain="post_tag" nicename="bcs">
        <![CDATA[BCS]]>
      </category>
      <category domain="post_tag" nicename="secondary-field">
        <![CDATA[secondary field]]>
      </category>
      <category domain="post_tag" nicename="custom-list-definition">
        <![CDATA[custom list definition]]>
      </category>
      <category domain="post_tag" nicename="schema-xml">
        <![CDATA[schema.xml]]>
      </category>
      <category domain="post_tag" nicename="external-data">
        <![CDATA[external data]]>
      </category>
      <category domain="post_tag" nicename="code">
        <![CDATA[code]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>42</wp:comment_id>
        <wp:comment_author>
          <![CDATA[sadalit]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://profile.typepad.com/sadalit</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[67.134.207.224]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2011-05-12 14:25:52]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2011-05-12 19:25:52]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[There's always a "However," isn't there!  Nice post in an area where others may fear to tread!
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>43</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://profile.typepad.com/6p0154324289e5970c</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.147.14.33]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2011-05-12 14:31:28]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2011-05-12 19:31:28]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thanks for your support Sadalit!
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>44</wp:comment_id>
        <wp:comment_author>
          <![CDATA[dotNetFollower]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[djgrave@rambler.ru]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://dotnetfollower.com</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[74.96.57.39]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2012-04-17 21:58:08]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2012-04-18 02:58:08]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hello!
I have a relative post in my blog - <a href="http://dotnetfollower.com/wordpress/2012/04/sharepoint-working-with-bdc-secondary-fields/." rel="nofollow">http://dotnetfollower.com/wordpress/2012/04/sharepoint-working-with-bdc-secondary-fields/.</a> Also I described how to encode/decode secondary fields attributes programmatically.
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>618</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Dmytro Lapshyn]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[dmytrol@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[94.179.61.119]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-01-18 03:37:46]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-01-18 08:37:46]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Julie,

This post has (potentially) saved my day! One small clarification, if you please: did you also have to add FieldRefs for the secondary fields to the list content type so that they appear in the list forms and not only in the list views?

Thanks!]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1579336667.0750958919525146484375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1579354992.6463909149169921875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>619</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-01-18 08:48:23]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-01-18 13:48:23]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I'm sorry to say that I really have no idea. This article was written in 2011 and is related to the work I was doing on a 2010 server. That said it is just a Field definition and looking at my post I note that none of the settings for whether it shows up in forms has been added so you may want to try working with one of the following:

ShowInDisplayForm="TRUE" | "FALSE"
ShowInEditForm="TRUE" | "FALSE"
ShowInFileDlg="TRUE" | "FALSE"
ShowInListSettings="TRUE" | "FALSE"
ShowInNewForm="TRUE" | "FALSE"
ShowInVersionHistory="TRUE" | "FALSE"
ShowInViewForms="TRUE" | "FALSE"

taken from: https://docs.microsoft.com/en-us/sharepoint/dev/schema/field-element-field]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>618</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1579355303.85752010345458984375;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>623</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Dmytro Lapshyn]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[dmytrol@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[194.24.186.59]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-01-22 11:10:13]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-01-22 16:10:13]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thanks, Julie! 

I've performed an investigation on SharePoint 2013 on-prem, so just in case anyone still cares:

The secondary fields are created by SharePoint itself, hence no chance to set the ShowIn..properties declaratively. To add insult to injury, the secondary fields are created with ReadOnly="TRUE" and none of the ShowIn... properties are defined by default in the field schema XML, which effectively hides the secondary fields from all the list forms. I gather this is what you mean by saying "none of the settings for whether it shows up in forms has been added".

Modifying the field schema XML by adding ShowInDisplayForm="TRUE" for the secondary fields with PowerShell _after the list has been provisioned_ does the job.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>619</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1579709413.55768489837646484375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Create SharePoint Document Set (and set metadata) using REST]]>
      </title>
      <link>https://julieturner.net/2016/11/create-sharepoint-document-set-and-set-metadata-using-rest/</link>
      <pubDate>Mon, 14 Nov 2016 20:16:14 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/?p=83</guid>
      <description></description>
      <content:encoded>
        <![CDATA[A quick post today to augment what's out there in the "Googleverse".  I needed to create a Document Set in client side code, and went out to find the appropriate calls to make that happen.  To update the metadata on the folder you create (which is all a Document Set really is under the covers), you simply make an "almost" normal list item update call.  So the following is the various "functions" you need and how to string them together to do this task.  As you read through, I'll point out in the code where other older posts on this topic steer you wrong.

<p style="font-size:.75em;">
<i>WARNING, this code is not optimized for best practices but is generalized for reuse. As sample code, it may not work in all scenarios without modification.</i>
<i>NOTE: this code requires jQuery to execute the AJAX calls and the promise</i>
<i>NOTE: The use of odata=verbose is no longer required and better practices would suggest that it should not be used in production.  See this <a href="http://sympmarc.com/2016/05/02/making-your-rest-calls-simpler-by-changing-the-metadata-setting/">post</a> from my partner Marc Anderson more information.</i>
</p>
<p>This first function is what is used to create the document set folder.  The function uses the folderName parameter as the title of the Document Set</p>
<pre class="lang:js decode:true " >
var webUrl = window.location.protocol + "//" + window.location.host + _spPageContextInfo.webServerRelativeUrl;

var createDocSet = function(listName, folderName, folderContentTypeId){
    var listUrl = webUrl + "/" + listName;
    var folderPayload = {
        'Title' : folderName,
        'Path' : listUrl
    };

    //Create Folder resource
    return $.ajax({
        url: webUrl + "/_vti_bin/listdata.svc/" + listName,
        method: "POST",
        contentType: "application/json;odata=verbose",
        data: JSON.stringify(folderPayload),
        headers: {
            "Accept": "application/json;odata=verbose",
            "Slug": listUrl + "/" + folderName + "|" + folderContentTypeId
        }
    });
};
</pre> 
<p>The following code is a generic update function, we'll use it to update our Document Set's metadata after its been created.  In other posts out there, you'll see the <strong>url</strong> of the AJAX call set to the folder.__metadata.uri.  Unfortunately, that uri is no longer valid as a way to update the metadata and the call will fail.  Also, when updating list items there's a standard "type" that defines the object your updating, with our Document Set this type is different than a generic list item, and so I'm passing it in from our calling function.  It can partially be retrieved from the folder creation response's metadata, but it's not exactly correct and the call will fail.</p>
<p style="font-size:.75em;">
<i>NOTE: the list's display name in this case has no spaces or odd characters, if yours does you will need to escape those characters when creating the list type, for example a list containing an "_" you would use the following code: "SP.Data." + list.replace('_', '_x005f_') + "ListItem"</i></p>
<pre class="lang:js decode:true " >
var update = function (list, item, type) {
    var eTag = item.eTag;
    delete item.eTag;
    //You may need to escape the list name when setting the __metadata property "type".
    if(type != undefined){
        item["__metadata"] = {"type": type};
    }else{
        item["__metadata"] = {"type": "SP.Data." + list + "ListItem"};
    }

    return $.ajax({
        method: 'POST',
        headers: {
            "Content-Type": "application/json;odata=verbose",
            "Accept": "application/json;odata=verbose",
            "X-RequestDigest": document.getElementById("__REQUESTDIGEST").value,
            "X-HTTP-Method": "MERGE",
            "If-Match": '"' + eTag + '"'
        },
        data: JSON.stringify(item),
        url: webUrl + "/_api/web/lists/getbytitle('" + list + "')/items(" + item.Id + ")"
    });
};</pre> 

<p>So now we have functions that do the work for us we just need to call them.  In this case I'm showing the code encapsulated in a function that does the calls but returns a promise to the calling function so that the caller can be notified when the document set has been created completely.</p>
<p>The call to <i>createDocSet</i> includes the Document Set's content type, this can be retrieved from the URL of the Content Type definition page.  Also note in this code that you need to do a bit of manipulation of the eTag if you're going to pass it.  You technically could use a wildcard instead of extrapolating the eTag, but for completeness I've included it.</p>
 
<pre class="lang:js decode:true " >var createDocSetObject = function(title, item){
    var list = 'MyList';
    var defer = $.Deferred();
    //Your list name, the title of the Document Set, and the Document Set's content type 
    createDocSet(list, title, '0x0120D520007ACA148760DDC646BBA59538FC81DBF9').then(function(response){
        var folder = response.data.d;
        //Make sure to get the eTag version by pulling off the leading info
        item.Id = folder.Id;
        item.eTag = folder.__metadata.etag.split('\"')[1].toString();
        var type = "SP.Data." + list + "Item";
        update(list, item, type).then(function(response2){
            //Formulate your response to the calling funciton
            var result = {ID: folder.Id, MyItemTitle: folder.Name};
            defer.resolve(result);
        }, function(error){
            defer.reject(error);
        });
    }, function(error){
        defer.reject(error);
    });
    return defer.promise;
};</pre> 
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>83</wp:post_id>
      <wp:post_date>
        <![CDATA[2016-11-14 15:16:14]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2016-11-14 20:16:14]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2016-11-14 16:24:31]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2016-11-14 21:24:31]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[create-sharepoint-document-set-and-set-metadata-using-rest]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="rest">
        <![CDATA[REST]]>
      </category>
      <category domain="post_tag" nicename="sharepoint">
        <![CDATA[SharePoint]]>
      </category>
      <category domain="post_tag" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="post_tag" nicename="o365">
        <![CDATA[O365]]>
      </category>
      <category domain="post_tag" nicename="rest">
        <![CDATA[REST]]>
      </category>
      <category domain="post_tag" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="category" nicename="sharepoint-version">
        <![CDATA[SharePoint Version]]>
      </category>
      <category domain="post_tag" nicename="document-set">
        <![CDATA[Document Set]]>
      </category>
      <category domain="post_tag" nicename="2016">
        <![CDATA[2016]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wpas_done_all]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_jetpack_dont_email_post_to_subs]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>171</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Gregg B]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[gregg@realmlabs.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[184.100.137.71]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-11-17 22:22:14]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-11-18 03:22:14]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Have you actually tried this with SP 2016 on prem?  It appears to me that listdata.svc has been changed so that code like this no longer works.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1542511334.9713189601898193359375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1542636027.2372739315032958984375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>172</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-11-19 09:04:07]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-11-19 14:04:07]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I have not specifically tried this with with 2016 on prem, that said the example was done on SharePoint Online in 2016 which would have been a subset of SharePoint online... so I'd be shocked to hear that they disabled some of the features.  You don't say what your error is, so I can't speculate further but in my opinion it should work.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>171</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1542636247.779014110565185546875;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[jetpack]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://s2.wp.com/wp-content/mu-plugins/highlander-comments/images/wplogo.png]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[1]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>590</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Srinu]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[srinutamada@outlook.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[45.117.65.38]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-05-29 09:41:48]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-05-29 14:41:48]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thanks for the post, it's useful for me]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1559140908.52352809906005859375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1559141703.700747013092041015625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>614</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Kerry]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[kwgump@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[107.12.36.84]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-12-13 20:02:25]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-12-14 01:02:25]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[How does one call createDocSetObject(title, item)? I get that what one wants as the doc set name is 'title'. What for 'item'?]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1576285346.237513065338134765625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1576333989.67467403411865234375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>616</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-12-14 09:33:26]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-12-14 14:33:26]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[item is the JSON representation of the item in the library.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>614</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1576334006.453895092010498046875;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Extending SharePoint with ADAL and the Microsoft Graph API – Part 1 (The Setup)]]>
      </title>
      <link>https://julieturner.net/2017/01/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-1-the-setup/</link>
      <pubDate>Tue, 24 Jan 2017 13:32:10 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/?p=132</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<div class="alignright size-full wp-image-164" style="background-color: black; padding: 10px;"><img class="size-full wp-image-164" src="http://julieturner.net/wp-content/uploads/2017/01/20170118_graph_logo.png" alt="" width="288" height="33" /></div>
When <a href="http://sympmarc.com/" target="_blank">Marc </a>and I were at Ignite this past September, #SharePoint was the most tweeted hashtag. We heard a lot about the new SharePoint Framework (SPFx), which was clearly the focus for developers. But another oft-discussed technology topic centered on the expansion of the <a href="https://graph.microsoft.io/en-us/" target="_blank">Microsoft Graph API</a> (MSGraphAPI). It’s clearly going to be the API of choice going forward to access all Office 365 content, but its maturity is still early days. At Ignite, Microsoft announced the beta endpoints for accessing SharePoint through the Microsoft Graph API.

Overall I think this is a good thing, as the API has significantly better adherence to the <a href="http://www.odata.org/" target="_blank">OData standard</a> compared to the SharePoint REST services. That said, as users of the SharePoint REST services we’re very used to the simplicity of those calls and we literally pay no attention to authentication if we’re operating on SharePoint pages. The tokens we need are already made available right on the page, we just pluck them out, and so there’s little effort. As the features and functionality of the MSGraphAPI leap ahead and we’re trying to extend the SharePoint UI to take advantages of all the new features and functionality, we’re going to have to become comfortable dealing with authentication issues so we can leverage all that power.

As I worked to understand all the ways I could utilize the MSGraphAPI I realized that I was collecting a rather lengthy list of resources and reaching out to the various experts I know in the community to get clarification on what I was finding. It seemed appropriate to consolidate that information into a series of blog posts. Part 1 will cover all the background information on Azure Active Directory, authentication methods and flows. Part 2 will go into the SDK library for getting an authorization token. And Part 3 will bring it all together in a demo application that runs as a widget on a SharePoint page, but accesses the MSGraphAPI to create and manipulate an Excel document in a SharePoint library. As we move forward with other solutions based on the MSGraphAPI, I may do additional posts to demonstrate useful techniques.

So, let’s begin. Our goal is to access a SharePoint document library and use the Excel API (included in the MSGraphAPI) that will allow us to manipulate Excel files in code. An example use-case for this solution is to generate an “export” of the data you’re tracking on your site so that others can do analysis on it for a data analytics project. Before we write any code, we need to do the following:
<ol style="margin: 0 0 10px 20px;">
 	<li>Select an authentication method</li>
 	<li>Determine the type of flow (small “f”, not the <a href="https://flow.microsoft.com/" target="_blank">Flow</a> automation tool) you will use to get an access token that you can utilize to authenticate with a resource that trusts Azure Active Directory.</li>
 	<li>Register your application with Azure Active Directory to define your set up and the permissions it needs.</li>
 	<li>Select the SDK library that is right for your project based on the Operating System or Access Application (e.g.., web browser) and development language.</li>
</ol>
Once that’s done, you can write your application – this is almost the easy part. But first I’ll provide some detail on the steps above.
<h2>Authentication Choices</h2>
There are two authentication choices when trying to access the MSGraphAPI from client side code. I’m going to focus here on JavaScript and access specifically for users who are already authenticated in SharePoint. The two authentication providers the MSGraphAPI support are:
<ul style="margin: 0 0 10px 20px;">
 	<li>To authenticate users with personal Microsoft accounts, such as live.com or outlook.com accounts, AND authenticate users with enterprise (that is, work or school) accounts, use the Azure Active Directory (Azure AD) v2.0 endpoint.</li>
 	<li>To authenticate users with enterprise (that is, work or school) accounts ONLY,  use Azure AD.</li>
</ul>
The second one of these, “authenticating users with enterprise accounts” is the one that is appropriate for our scenario. The “<a href="https://graph.microsoft.io/en-us/docs/authorization/auth_overview" target="_blank">App Authentication with Microsoft Graph</a>” will walk you through a more extensive decision matrix about which endpoint is right for you, so if you have a more complicated scenario than what I’m focused on, e.g.., authenticating users to your application that isn’t hosted in SharePoint and utilizes live.com or outlook.com accounts, please review that documentation. You’re also going to want to review “<a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-limitations#restrictions-on-libraries-amp-sdks" target="_blank">Should I use the v2.0 endoint?</a>” as well, as there are a significant number of restrictions that may affect you.
<h2>Implicit Flow (aka Implicit Grant Flow)</h2>
When you utilize one of the aforementioned authentication choices you need to decide on what type of “flow” you’re going to use. Your choices are “Implicit Grant Flow” or “Authorization Code Grant Flow” or “Client Credentials Grant Flow.” Andrew Connell’s <a href="http://www.andrewconnell.com/blog/looking-at-the-different-oauth2-flows-supported-in-azuread-for-office-365-apis" target="_blank">blog post</a> on this subject can help you learn more about the three types that are supported. In this case, because of how we’re going to access the MSGraphAPI (via the browser) and the language we’ll use to do it (JavaScript), the decision has been made for us in the sense that the SDK we’re going to utilize forces you to use Implicit Grant Flow. The idea is to get an access token to impersonate a user. However, unlike an authorization code grant flow, instead of requesting an authorization code first, the client is issued the access token directly. The access token has a life of only one hour before it expires and the user would need to request a new token to make additional requests.

Why the one-hour expiration? In basic terms because we are operating in a browser, if the access token was always valid, it becomes easier for any other application or user to “steal” said token and access the server without authorization. All the mucking around with tokens and authentication flows is a way to make sites more secure.
<h2>Registering your Application</h2>
<strong>Updated Guidance 2/9/2017</strong> – Use the <a href="https://portal.azure.com" target="_blank">https://portal.azure.com</a> vs https://manage.windowsazure.com to create your Application

<em>This section has been re-written to use the newer portal.  I was under the impression that by doing so I would be creating an application that was incompatible with ADAL.js… however, based on comments from <a href="https://twitter.com/johnnliu" target="_blank">John Liu (@johnnliu)</a> as well as a conversation with <a href="https://twitter.com/yina_arenas" target="_blank">Yina Arenas (@yina_arenas)</a>, Principal Program Manager Lead for the Microsoft Graph, it appears I was misguided.  So, my error becomes your gain as I will attempt to completely document creating an application in the new portal that will work with ADAL.js, and has some added benefits to boot as many things are much simpler.

That said, one thing remains the same, you still need to have access to the Azure portal for your tenant. Ergo, you’re going to have to find the individual who does and bake them cookies.  Maybe a lot of cookies.</em>

After launching the https://portal.azure.com site, I navigated to Active Directory, then I clicked on the “App registrations” heading.  You can see here that the application I created in the old manage.windowsazure.com is still there (“ADALTest”) and a new one I created for this test called “ADALTest2” has been added -  I did so by clicking “Add” at the top.
<a href="http://julieturner.net/wp-content/uploads/2017/02/20170209_NewApp.png"><img src="http://julieturner.net/wp-content/uploads/2017/02/20170209_NewApp.png" alt="" width="913" height="830" class="aligncenter size-full wp-image-281" /></a>
<h3>Configuration</h3>
Once your application is created you need to set the properties and permissions.  This is where things are slightly different from creating an application in the old portal.  As you can see below you’ll get an “Application ID” assigned automatically.  This takes the place of the client key from the old portal, this is confusing if you’ve done this in the old portal, but honestly given were using Implicit Flow it makes a whole lot more sense that you wouldn’t need a client secret because you’re technically not using one.  Ok, so what you’ll need to do is give your application and App ID URI, I used the URL of my site collection.  This URL can be used only once, so if I wanted to create a second app, I would need to give it a different URI.  This is a much bigger discussion regarding governance, and reuse of these applications which I’m not going to go into now, but rest assured I will at some point when I’ve solidified my position.  
<a href="http://julieturner.net/wp-content/uploads/2017/02/20170209_AppProperties.png"><img src="http://julieturner.net/wp-content/uploads/2017/02/20170209_AppProperties.png" alt="" width="637" height="827" class="aligncenter size-full wp-image-277" /></a>
You will also need to set up a “Reply URL”. In this case, because we will access the application from SharePoint, this needs to just be your SharePoint host name.  I will cover the “Required permissions” section below.  There’s also an “Owners” section and a “Keys” section.  That “Keys” section is what threw me off originally, because in the old portal we used the key it generated as the client id, but as I said in the new portal we use the Application ID. 
<a href="http://julieturner.net/wp-content/uploads/2017/02/20170209_AppReplyURL.png"><img src="http://julieturner.net/wp-content/uploads/2017/02/20170209_AppReplyURL.png" alt="" width="905" height="256" class="aligncenter size-full wp-image-278" /></a>
In addition, you will need your Tenant ID (Guid), in the old portal we got this from the URL, but in the new portal they’ve given us a nice little tool to get it.  Go to the top right and click on the “?” and then choose “Show diagnostics”.  That will bring up a new page that will show you a JSON object that has a tenant’s section, you’re going to want the guid for your domain’s tenant, although multiple other tenants may show up.
<a href="http://julieturner.net/wp-content/uploads/2017/02/20170209_GetTenantID.png"><img src="http://julieturner.net/wp-content/uploads/2017/02/20170209_GetTenantID.png" alt="" width="480" height="273" class="aligncenter size-full wp-image-280" /></a>
<a href="http://julieturner.net/wp-content/uploads/2017/02/20170209_TenantID.png"><img src="http://julieturner.net/wp-content/uploads/2017/02/20170209_TenantID.png" alt="" width="395" height="130" class="aligncenter size-full wp-image-283" /></a>
<h3>Permissions</h3>
One of the things that can be confusing about setting up your application in Azure AD is configuring the permissions scopes for the application itself. This <a href="https://graph.microsoft.io/en-us/docs/authorization/permission_scopes" target="_blank">article</a> gives you the full details on setting up the proper permissions based on what you need to access in the MSGraphAPI. It also includes several scenarios. For our scenario, which you’ll see in more detail in <a href="http://julieturner.net/2017/01/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-3-the-execution/" target="_blank">Part 3</a>, I only needed to grant the application the delegated permission “Have full access to all files user can access”. By default, the application has the “Sign in and read user profile” delegated permission for Windows Azure Active Directory. Since I do some testing by accessing the “me” endpoint, that gives me my user profile information I’m leaving this, but feel free to remove it if you’re not reading the user’s profile.

So, you will first “add” the “Microsoft Graph” application to the “Required Permissions” section.  Then click on it to see the available application and delegated permissions that can be assigned.  The gotcha with permission in the new portal is that after you select the permissions you want and “save” the changes, you then need to do an additional step and “grant” them.  You do so by click on the “Grant Permissions” button from the “Required Permissions” page.
<a href="http://julieturner.net/wp-content/uploads/2017/02/20170209_AppPermissions.png"><img src="http://julieturner.net/wp-content/uploads/2017/02/20170209_AppPermissions.png" alt="" width="899" height="396" class="aligncenter size-full wp-image-285" /></a>
<a href="http://julieturner.net/wp-content/uploads/2017/02/20170209_AppGraphPermissions.png"><img src="http://julieturner.net/wp-content/uploads/2017/02/20170209_AppGraphPermissions.png" alt="" width="587" height="457" class="aligncenter size-full wp-image-284" /></a>
If after you’ve gotten through <a href="http://julieturner.net/2017/01/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-2-the-authorization/" target="_blank">Part 2</a>, you get the error “The user or administrator has not consented to use the application with ID….” in the browser console it most likely means that you forgot to do the “grant” step I outlined above.
<a href="http://julieturner.net/wp-content/uploads/2017/02/20170209_NoGrantError.png"><img src="http://julieturner.net/wp-content/uploads/2017/02/20170209_NoGrantError-1024x59.png" alt="" width="660" height="38" class="aligncenter size-large wp-image-282" /></a>
<h3>Enabling Implicit Flow</h3>
In the new portal, there’s a nice easy way to modify the manifest for your application to allow Implicit Flow.  Click on the “Manifest” button for your application.  A window will appear that gives you the JSON object that is the applications manifest. 
<a href="http://julieturner.net/wp-content/uploads/2017/01/20170209_EditManifest1.png"><img src="http://julieturner.net/wp-content/uploads/2017/01/20170209_EditManifest1.png" alt="" width="600" height="266" class="aligncenter size-full wp-image-289" /></a>
Find the “oauth2AllowImplicitFlow” property and change its value to “true”.  Then click “Save”.
<a href="http://julieturner.net/wp-content/uploads/2017/01/20170209_EditManifest.png"><img src="http://julieturner.net/wp-content/uploads/2017/01/20170209_EditManifest.png" alt="" width="864" height="396" class="aligncenter size-full wp-image-290" /></a>
<h2>Summary</h2>
I hope that this part can help others understand the various building blocks of setting up a client based widget for SharePoint that accesses the MSGraphAPI. In Part 2, we’ll cover the ADAL library and its various configurations to actually get the authorization we need, and then in Part 3, I’ll use everything we’ve covered in Parts 1 and 2 in a demo that will provide a complete end to end solution for creating an Excel file (currently utilizing a third-party JavaScript library as the functionality doesn’t exist yet in the MSGraphAPI), putting that file into a SharePoint library, and changing the data values in it.
<h2>Resources</h2>
<h5>OAuth Flows</h5>
<a href="http://www.andrewconnell.com/blog/looking-at-the-different-oauth2-flows-supported-in-azuread-for-office-365-apis">Andrew Connell - Looking at the Different OAuth2 Flows Supported in AzureAD for Office 365 APIs</a>
<a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-integrating-applications#updating-an-application">Microsoft - Integrating applications with Azure Active Directory</a>
<a href="http://www.matvelloso.com/2015/01/30/troubleshooting-common-azure-active-directory-errors/">Matt Velloso - Troubleshooting common Azure Active Directory Errors</a>
<a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-limitations#restrictions-on-libraries-amp-sdks">Microsoft - Should I use the v2.0 endpoint?</a>
<h5>ADAL</h5>
<a href="https://github.com/AzureAD/azure-activedirectory-library-for-js">GitHub - Azure Active Directory Library for JS</a>
<a href="http://www.cloudidentity.com/blog/2015/02/19/introducing-adal-js-v1/">Cloud Identity - Introducing ADAL JS v1</a>
<a href="http://www.cloudidentity.com/blog/2014/10/28/adal-javascript-and-angularjs-deep-dive/">Cloud Identity - ADAL JavaScript and AngularJS – Deep Dive</a>
<a href="http://www.cloudidentity.com/blog/2013/09/16/getting-acquainted-with-authenticationresult/">Cloud Identity - Getting Acquainted with AuthenticationResult</a>
<a href="http://www.cloudidentity.com/blog/2013/10/01/getting-acquainted-with-adals-token-cache/">Cloud Identity - Getting Acquainted with ADAL’s Token Cache</a>
<a href="https://dev.office.com/sharepoint/docs/spfx/web-parts/guidance/call-microsoft-graph-from-your-web-part">Microsoft - Call the Microsoft Graph API using OAuth from your web part</a>
<h5>Microsoft Graph API (MSGraphAPI)</h5>
<a href="https://graph.microsoft.io/en-us/docs/authorization/permission_scopes">Microsoft – Microsoft Graph permission scopes</a>
<a href="https://graph.microsoft.io/en-us/docs/authorization/auth_overview">Microsoft - App authentication with Microsoft Graph</a>]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>132</wp:post_id>
      <wp:post_date>
        <![CDATA[2017-01-24 08:32:10]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2017-01-24 13:32:10]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2017-09-03 13:50:33]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2017-09-03 18:50:33]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-1-the-setup]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="javascript">
        <![CDATA[Javascript]]>
      </category>
      <category domain="category" nicename="rest">
        <![CDATA[REST]]>
      </category>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="category" nicename="microsoft-graph-api">
        <![CDATA[Microsoft Graph API]]>
      </category>
      <category domain="series" nicename="extending-sharepoint-with-adal-and-the-microsoft-graph-api">
        <![CDATA[Extending SharePoint with ADAL and the Microsoft Graph API]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_publicize_twitter_user]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[@jfj1997]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wpas_mess]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[Extending SharePoint with ADAL and the Microsoft Graph API – Part 1 (The Setup)]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wpas_done_all]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_jetpack_dont_email_post_to_subs]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_series_part]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[277]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>51</wp:comment_id>
        <wp:comment_author>
          <![CDATA[John Liu (@johnnliu)]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[johnnliu@twitter.example.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://twitter.com/johnnliu</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[203.7.1.77]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-01-24 10:21:36]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-01-24 15:21:36]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Julie, this is a really clear writing and easy to follow.

I want to suggest you try the new Azure Portal - of the several tasks in the post: 

Directory ID (tenant ID) is available as a field.  
Edit manifest can be done inline (without download/upload).  
ClientSecret can be created that "never" expires (actually expires in about two centuries).  
And there's a button for admin-grant so users don't have to individually grant permission.

Some of the fields have moved around though.

There's probably more stuff, but I'm liking the new portal a lot more over the old one now.  :-)  
looking forward to your next part 2!]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[true]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1485271296.6995151042938232421875;s:5:"event";s:10:"check-spam";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[twitter]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[http://pbs.twimg.com/profile_images/818768515368783874/sdbwikt6_normal.jpg]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[17532000]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1485897728.573997020721435546875;s:5:"event";s:10:"report-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_user_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_user]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[jturnerwp]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1485897769.0268409252166748046875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>53</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-01-31 16:23:48]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-01-31 21:23:48]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[This is great news, I haven't yet got around to using the new portal, but I will definitely take a look at it.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>51</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1485897828.7210290431976318359375;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>59</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-02-10 12:56:30]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-02-10 17:56:30]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Blog Post now reflects using the new Azure Portal to create the applications, Thanks John]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>51</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1486749391.0014851093292236328125;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[jetpack]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://s2.wp.com/wp-content/mu-plugins/highlander-comments/images/wplogo.png]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[1]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>91</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Mike LaPointe]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[mlapointe@rmrgroup.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://www.rmrgroup.com</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[96.47.240.10]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-06-01 10:19:17]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-06-01 15:19:17]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Great article! I searched all over and couldn't find anyone else giving advice on how to leverage the ADAL library in SharePoint. You saved me a ton of time. My issue was a bit different in that I was pulling data from a custom web api hosted in Azure and not the Microsoft Graph API but the idea was sill the same. Thanks a lot.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1496330358.2808110713958740234375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1496334241.8449420928955078125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>92</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[208.115.90.243]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-06-01 11:24:15]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-06-01 16:24:15]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Really glad it helped you!]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>91</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1496334255.95462799072265625;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>93</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Alex Buys]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[alex.buys88@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://plus.google.com/113904577551758940724</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[124.157.115.34]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-06-05 22:35:21]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-06-06 03:35:21]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Julie, is there a way I can buy you a coffee for this great blog entry :)  I have been struggling all day with this and your post is the first clear guide. Thanx a million!]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1496720122.31443309783935546875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1496756609.574079036712646484375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>94</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-06-06 08:44:16]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-06-06 13:44:16]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I'm always up for coffee!!! Thanks Alex, I'm really happy it helped you!]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>93</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1496756656.749700069427490234375;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>111</wp:comment_id>
        <wp:comment_author>
          <![CDATA[SharePointGuy]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[jain.ashish21@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[202.135.238.200]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-09-10 11:57:10]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-09-10 16:57:10]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Followed your blog post and did the setup as documented. I creaed an html page and uploaded it in Site Assets library. When calling the html page, it gives me an error 'https://tenant.sharepoint.com/sites/mysite/SiteAssets/ADALTest.html' does not match the reply addresses configured for the application: 'app guid'. I am sure I am doing somethng wrong specifying the reply address, which I specified as https://tenant.sharepoint.com. Any help resolving the issue would be appreciated.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1505062631.2971179485321044921875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1505086439.7619130611419677734375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>112</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[192.0.101.132]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-09-10 18:34:55]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-09-10 23:34:55]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Make sure the Azure App registration "Reply URLs" has an entry for https://tenant.sharepoint.come/sites/mysite
]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>111</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1505086495.1168689727783203125;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>156</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Accessing MS Graph from static HTML page on SharePoint Online &#8211; Dennis Vinther Jensen]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://dennisvintherjensen.eu/accessing-ms-graph-from-static-html-page-on-sharepoint-online/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[93.191.156.19]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-06-27 17:15:59]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-06-27 22:15:59]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] Julie Turners post series &#8211; Extending SharePoint with ADAL and the Microsoft Graph API [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1530137760.5776059627532958984375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1530149784.5019800662994384765625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>176</wp:comment_id>
        <wp:comment_author>
          <![CDATA[30DaysMSGraph – Day 24 – Use case: Calling Microsoft Graph from a single-page application Part 2 - Office 365 Developer Blog]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://officedevblogs.wpengine.com/30daysmsgraph-day-24-use-case-calling-microsoft-graph-from-a-single-page-application-part-2/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[104.239.139.189]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-11-24 06:00:42]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-11-24 11:00:42]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] drawn from elsewhere; the Azure AD V1 sample is from Julie Turner&#8217;s awesome article series, Extending SharePoint with ADAL and the Microsoft Graph API; the V2 example is from this Microsoft [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1543057243.0244100093841552734375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1543064838.0609629154205322265625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Extending SharePoint with ADAL and the Microsoft Graph API – Part 2 (The Authorization)]]>
      </title>
      <link>https://julieturner.net/2017/01/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-2-the-authorization/</link>
      <pubDate>Thu, 26 Jan 2017 14:02:36 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/?p=171</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<h2>Introduction</h2>
In <a href="http://julieturner.net/2017/01/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-1-the-setup/" target="_blank">Part 1</a> of this series I covered all the setup needed to start your Microsoft Graph API (MSGraphAPI) client side widget. In Part 2, we’re going to dive into the many ways to use adal.js and its counterpart adal-angular.js. I’ve included the same resources I included in <a href="http://julieturner.net/2017/01/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-1-the-setup/" target="_blank">Part 1</a>, under the section for ADAL you’ll find a lot of references to Cloud Identity blog by Vittorio Bertocci a Principal Program Manager at Microsoft who has blogged extensively on the library, explaining in depth the technical workings of it. I encourage you to read those posts I’ve included below to get a complete understanding of the library. Also, included in the references is a post about utilizing ADAL in the SharePoint Framework (SPFx). As is, ADAL was never meant to be used as part of a widget architecture as ADAL isn’t a singleton, so if you have multiple web parts on your page all referencing ADAL you’re going to have issues. The post “<a href="https://dev.office.com/sharepoint/docs/spfx/web-parts/guidance/call-microsoft-graph-from-your-web-part" target="_blank">Call the MSGraphAPI using OAuth from your web part</a>” gives you an extension that will help isolate ADAL so that you can utilize it as part of a more strongly developed widget pattern. Since my demo is just that, and since my solution will be the only one running on the page that uses the ADAL library I’m not going to address those modifications here. But, I encourage you do so if that is part of your use case.
<h2>The ADAL library for JavaScript</h2>
<a href="http://julieturner.net/wp-content/uploads/2017/01/20170118_ADALLibs.png"><img class="alignright size-medium wp-image-199" src="http://julieturner.net/wp-content/uploads/2017/01/20170118_ADALLibs-300x261.png" alt="" width="300" height="261" /></a>
Finally, we get to the part where we talk about writing some code. ADAL stands for “Active Directory Authentication Library”. Based on the client you’re using and which authentication endpoint you’re using, there are a multitude of different examples and SDK’s available as you can see on the MSGraphAPI, <a href="https://graph.microsoft.io/en-us/docs/get-started/get-started" target="_blank">Getting Started</a> page. Because we’re going to write client side code (aka JavaScript, either <a href="https://en.wikipedia.org/wiki/Source-to-source_compiler" target="_blank">transpiled</a> from Typescript or native) and access via Implicit Flow to the MSGraphAPI, we’ll use the adal.js library. It comes in two parts, adal.js and adal-angular.js. If you’re going to use the <a href="https://angularjs.org/" target="_blank">AngularJS</a> framework, you’ll want both pieces. If not, you can just include adal.js, but there will be more work to do to authenticate and get a token. You can find the source in the <a href="https://github.com/AzureAD/azure-activedirectory-library-for-js" target="_blank">ADAL GitHub</a> repo.
<h3>User Authentication</h3>
One of the things that bothered me was the idea that the user would have to “log in” manually every time the ADAL library would need to authenticate them. In my mind, I envisioned a pop-up that would prompt them for credentials. In the scenario where you’re running this code on your on-premises server in a hybrid scenario, and haven’t set up federated sign-in to your O365 tenant that would be valid, however, in the most likely scenarios I can envision the code would be running in your SharePoint site in your O365 tenant… therefore asking the user to log in again would be annoying at best. Well, sure enough that’s not what happens, the library uses a hidden iframe on the page to make the call to get the user authenticated, since they are technically already authenticated to O365 this is just a matter of “confirming” it for lack of a better term. So, the page does flicker but otherwise this is unnoticeable to the user.

*Note: Thanks to <a href="http://twitter.com/wictor" target="_blank">Wictor Wilen</a> for bringing up the issue with using adal.js in IE with a trusted site.  Please check out this <a href="https://github.com/AzureAD/azure-activedirectory-library-for-js/issues/102" target="_blank">issue</a>, from the GitHub repo. 

<h3>ADAL Config</h3>
A big part of utilizing the adal.js libraries is to get all the configuration settings correct. I want to highlight some of the configuration properties that I reviewed and what was useful. You’ll see how to put it together and pass it to adal.init() later. The definitions here come straight from the documentation in the adal.js file itself.
<ul style="margin: 0 0 10px 20px;">
 	<li>tenant: string - Your target tenant.</li>
 	<li>clientID: string - Client ID assigned to your app by Azure Active Directory.</li>
 	<li>endpoints: array - Collection of {Endpoint-ResourceId} used for automatically attaching tokens in webApi calls.</li>
 	<li>popUp: boolean - Set this to true to enable login in a popup window instead of a full redirect.Defaults to `false`.</li>
 	<li>cacheLocation: string - Sets browser storage to either 'localStorage' or sessionStorage'. Defaults to 'sessionStorage'.</li>
 	<li>anonymousEndpoints: array - Array of keywords or URI's. ADAL will not attach a token to outgoing requests that have these keywords or uri. Defaults to 'null'.</li>
</ul>
<h3>Using ADAL.js with No Framework</h3>
The most tedious coding scenario with ADAL is utilizing it without the AngularJS add-on. I found this <a href="http://nickvandenheuvel.eu/2016/01/06/authenticate-an-office-365-user-with-adal-js/" target="_blank">blog article</a> on how to do it, but unfortunately for me although it worked initially, when it came time to renew the token the ADAL library was throwing errors. After quite a bit of time on it, reviewing the adal-angular.js file and various other blog posts, I managed to work out a scenario that seems to work reliably.

For simplicity's sake, I’m showing an entire html file including the JavaScript in one code snippet. I commented the code extensively but in a nutshell, we’ll do the following:
<ul style="margin: 0 0 10px 20px; list-style-type: none;">
 	<li><b>1.</b> For simplicity code is executed on page load using jQuery's document.ready function. The goal of that bit of code is to determine if AAD is doing a callback and if so, let the adal.js library handle it.
<ul style="margin: 0 0 10px 20px; list-style-type: none;">
 	<li><b>a.</b> If not a callback, check if the user is authenticated, if not, call the ADAL login function</li>
 	<li><b>b.</b> If not a callback, and user is authenticated, then execute any initialization code we want to run.</li>
</ul>
</li>
 	<li><b>2.</b> When a call needs to be made against the MSGraphAPI, e.g., the sympraxis.getGraphData function, first get the token by calling the sympraxis.getAuthToken function (which returns a promise since it may need to make an asynchronous call to AAD, and if so we need to wait until that completes.
<ul style="margin: 0 0 10px 20px; list-style-type: none;">
 	<li><b>a.</b> If the token is in the cache, return it by resolving he promise.</li>
 	<li><b>b.</b> If the token is not in the cache, acquire a new one and then resolve the promise with the new token.</li>
</ul>
</li>
 	<li><b>3.</b> Make the REST call to the MSGraphAPI and include the token in the header.</li>
</ul>
<pre class="lang:js decode:true">
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
<script src="https://secure.aadcdn.microsoftonline-p.com/lib/1.0.13/js/adal.min.js"></script>

<div>
  <h1>My Great ADAL Test</h1>
  <div id="message"></div>
  <br/>
  <div id="displayName"></div>
  <div id="jobTitle"></div>
  <div id="mail"></div>
  <div id="mobilePhone"></div>
  <div id="officeLocation"></div>
</div>

<script type="text/javascript">
  "use strict";
  var sympraxis = window.sympraxis || {};
  sympraxis.clientId = '<client id guid>';
  sympraxis.tenant = '<tenant guid>';

  sympraxis.config = {
      tenant: sympraxis.tenant,
      clientId: sympraxis.clientId,
      endpoints: {
          graphUri: 'https://graph.microsoft.com'
      },
      cacheLocation: "localStorage"
  };
  //Create the autentication context
  sympraxis.authContext =  new AuthenticationContext(sympraxis.config);

  sympraxis.getAuthToken = function(endpoint){
      var d = jQuery.Deferred();
      
      //Read the token from the cache
      var tokenCache = sympraxis.authContext.getCachedToken(endpoint);

      if(tokenCache == undefined) {
          //If token is undefined, then call AAD to get a new token
          sympraxis.authContext.acquireToken(endpoint, function (error, token) {
              if (error || !token) {
                  d.reject(error);
              }
              else {
                  d.resolve(token);
              }
          });
      }else{
          d.resolve(tokenCache);
      }
      //Return a promise for acquiring token
      return d.promise();
  };

  sympraxis.getGraphData = function(){
      //Get the token, either from the cache or from the server
      var tokenPromise = sympraxis.getAuthToken(sympraxis.config.endpoints.graphUri);
      tokenPromise.then(function(token){
          //Promise for token resolved
          if(token != undefined) {
              //Valid token, make a REST call to the MSGraphAPI
              var meUri = "https://graph.microsoft.com/v1.0/me";
              $.ajax
              ({
                  type: "GET",
                  url: meUri,
                  headers: {
                      //Include the token
                      "Authorization": "Bearer " + token
                  }
              }).done(function (response) {
                  $("#message").text("Got the data.");
                  $("#displayName").text(response.displayName);
                  $("#jobTitle").text(response.jobTitle);
                  $("#mail").text(response.mail);
                  $("#mobilePhone").text(response.mobilePhone);
                  $("#officeLocation").text(response.officeLocation);
              }).fail(function () {
                  $("#message").text("Failed to get the data.");
              });
          }
      }, function(error){console.log(JSON.stringify(error));});
  };

  $(document).ready(function() {
      // Check For & Handle Redirect From AAD After Login or Acquiring Token
      var isCallback = sympraxis.authContext.isCallback(window.location.hash);

      if (isCallback && !sympraxis.authContext.getLoginError()) {        
          sympraxis.authContext.handleWindowCallback(window.location.hash);
      }else{
          var user = sympraxis.authContext.getCachedUser();
          if (!user) {
              //Log in user
              sympraxis.authContext.login();
          }else{
              sympraxis.getGraphData();
          }
      }
              
  });
</script>
</pre>
<h3>Using Angular 1.x framework with ngRoute</h3>
If you’re a fan of the AngularJS framework, then the adal-angular.js library does all the heavy lifting for you. It extends both AngularJS’s $http provider and the ngRoute directive. It adds the bearer token that was retrieved using the adal.js library to the $httpProvider in your REST calls for you. In addition, it accepts an additional configuration setting on each of your routes which determines whether AD login should be required or not. If set to true, when you navigate to the particular route, the adal-angular.js library makes sure the user is logged in, and then also makes sure the $httpProvider appends the token. If it’s not set - or set to false - then the token will not be appended to the $http calls. Also, note here that I’ve utilized html5Mode on the $locationProvider. I did that because of a recommendation in the documentation that indicated that having it on fixes issues with endless callbacks. I too found this to be an issue, but only when bypassing ngRoute. For safety, I put it in both examples, but I'll leave it to you to test whether it’s necessary in your solution or not.

So, at this point I’m sure you can see that this scenario is significantly simplified from our “No Framework” version above. Other than the changes to the .config, no other changes are necessary. You just go about your business making $http calls and the adal-angular.js library does the rest .
<pre class="lang:js decode:true">sympraxis.adaltestapp = angular.module('ADALTestApp', ['ngRoute','AdalAngular'])
.config(['$routeProvider', '$httpProvider', 'adalAuthenticationServiceProvider', '$locationProvider',
function ($routeProvider, $httpProvider, adalProvider, $locationProvider) {
  $locationProvider.html5Mode({
      enabled: true,
      requireBase: false
  }).hashPrefix('!');
  
  $routeProvider.when("/", {
      controller: "ADALTestCtrl",
      templateUrl: "/sites/Julie/_catalogs/masterpage/_ADALTest/html/adaltestview.html",
      requireADLogin: true
  }).otherwise({ redirectTo: "/" });

  adalProvider.init(
      {
          tenant: '',
          clientId: '',
          endpoints: {
              'https://graph.microsoft.com': 'https://graph.microsoft.com'
          },
          cacheLocation: "localStorage"
      },
      $httpProvider);
}]);
</pre>
<h3>Angular 1.5+ using Components</h3>
Angular version 1.5 introduced a new concept called “Components” which was viewed widely as a superior architectural strategy for building Angular applications. So much so a very similar schema was adopted for Angular 2. With components, you generally do not use ngRoute. Further, with many <a href="http://julieturner.net/2016/01/widget-wrangler/" target="_blank">widget solutions</a>, routing is overkill. So, we need to consider another strategy for managing when the $http provider should include the token and, because ngRoute was making sure the user is authenticated for us (as I noted in the previous section), we’re going to need to handle that as well.

For authentication, we’ll reuse the concepts we discussed in the “No Framework” section by making sure on page load we trap the callback and allow the ADAL.js library to handle it. Because this is a component there is the handy $onInit() function. That will work perfectly for our needs.

Now to handle server calls that are not meant to have the token amended… enter, anonymousEndpoints. In this scenario, our configuration would not include the $routeProvider. Instead we would include relative URLs we want to ignore when making $http calls. In this case I included two anonymous endpoints, one for the location of my component templates, and the other is the SharePoint REST APIs.
<pre class="lang:js decode:true">sympraxis.adaltestapp = angular.module('ADALTestApp', ['AdalAngular'])
.config(['$httpProvider', 'adalAuthenticationServiceProvider', '$locationProvider',
  function ($routeProvider, $httpProvider, adalProvider, $locationProvider) {
    $locationProvider.html5Mode({
        enabled: true,
        requireBase: false
    }).hashPrefix('!');

    adalProvider.init(
        {
            tenant: '5a3f949f-70ba-467b-b915-b40feeadc67d',
            clientId: '45c1ba25-1b90-44fd-8ab9-cfb2f45920e8',
            endpoints: {
                'https://graph.microsoft.com': 'https://graph.microsoft.com'
            },
            cacheLocation: "localStorage",
            //endpoints you want ADAL to ignore, they are inclusive paths, also you must use relative paths, if you include http/https it will look for a resource and automatically append the token of the loginResource
            anonymousEndpoints: ['/sites/CDN/Samples/GraphExcel/', '/sites/Julie/_api/']
        },
        $httpProvider
    );
  }])
.constant("_CONFIG", {
    "ONEDRIVE_EP":"https://graph.microsoft.com/v1.0/me/drive/",
    "SP_EP":"https://graph.microsoft.com/beta/sharepoint/sites/78f3f43c-7845-4273-8be7-f253552a173f/lists/7bc97907-9a6c-4959-9474-946d854a81a8/drive/"
  }
);
</pre>
I specified relative URLs in the anonymousEndpoints array we want to ignore because if you review the code that decides if the $http call should append the bearer token to it, you can see that if the URL includes http or https it will try to find a matching endpoint. If it does not find one, it will utilize the token that was used for the login resource. For example, if you try to make a call against the SharePoint REST API and the URL you use includes https://mytenant.sharepoint.com it’s going to append the bearer token and subsequently fail. Also, note that I only included the root of the URLs I want ADAL to ignore. That is because the test for anonymous endpoint uses a “contains” check.

The controller for the component we create would then define an $onInit() function that would handle login for those components that need it. There are certainly other ways architecturally to handle this, but I wanted to keep things simple so I wouldn't lose the point in the elegance of the architecture. At a baseline this is what it would look like. We’re going to expand on this, and explain the SP_EP url in the _CONFIG in Part 3.
<pre class="lang:js decode:true">function geController($http, $q, adalProvider, _CONFIG) {
  var vm = this;
  var adalAuthContext = new AuthenticationContext(adalProvider.config);

  vm.$onInit = function() {
    var isCallback = adalAuthContext.isCallback(window.location.hash);
    if (isCallback &amp;&amp; !adalAuthContext.getLoginError()) {
        adalAuthContext.handleWindowCallback();
    }
    else {
        var user = adalAuthContext.getCachedUser();
        if (!user) {
            //Log in user
            adalAuthContext.login();
        }
    }
  };
}
</pre>
<h2>Summary</h2>
Now we’ve completed Part 2, you should have everything you need to go off and start making calls to the MSGraphAPI. But, if you’re interested, <a href="http://julieturner.net/2017/01/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-3-the-execution/">Part 3</a> will bring all of this together and show you how to create an Excel spreadsheet from scratch, add it to a SharePoint document library, and then manipulate it with the Excel API’s. Please stay tuned...
<h2>Resources</h2>
<h5>OAuth Flows</h5>
<a href="http://www.andrewconnell.com/blog/looking-at-the-different-oauth2-flows-supported-in-azuread-for-office-365-apis">Andrew Connell - Looking at the Different OAuth2 Flows Supported in AzureAD for Office 365 APIs</a>
<a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-integrating-applications#updating-an-application">Microsoft - Integrating applications with Azure Active Directory</a>
<a href="http://www.matvelloso.com/2015/01/30/troubleshooting-common-azure-active-directory-errors/">Matt Velloso - Troubleshooting common Azure Active Directory Errors</a>
<a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-limitations#restrictions-on-libraries-amp-sdks">Microsoft - Should I use the v2.0 endpoint?</a>
<h5>ADAL</h5>
<a href="https://github.com/AzureAD/azure-activedirectory-library-for-js">GitHub - Azure Active Directory Library for JS</a>
<a href="http://www.cloudidentity.com/blog/2015/02/19/introducing-adal-js-v1/">Cloud Identity - Introducing ADAL JS v1</a>
<a href="http://www.cloudidentity.com/blog/2014/10/28/adal-javascript-and-angularjs-deep-dive/">Cloud Identity - ADAL JavaScript and AngularJS – Deep Dive</a>
<a href="http://www.cloudidentity.com/blog/2013/09/16/getting-acquainted-with-authenticationresult/">Cloud Identity - Getting Acquainted with AuthenticationResult</a>
<a href="http://www.cloudidentity.com/blog/2013/10/01/getting-acquainted-with-adals-token-cache/">Cloud Identity - Getting Acquainted with ADAL’s Token Cache</a>
<a href="https://dev.office.com/sharepoint/docs/spfx/web-parts/guidance/call-microsoft-graph-from-your-web-part">Microsoft - Call the Microsoft Graph API using OAuth from your web part</a>
<h5>Microsoft Graph API</h5>
<a href="https://graph.microsoft.io/en-us/docs/authorization/permission_scopes">Microsoft – Microsoft Graph permission scopes</a>
<a href="https://graph.microsoft.io/en-us/docs/authorization/auth_overview">Microsoft - App authentication with Microsoft Graph</a>]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>171</wp:post_id>
      <wp:post_date>
        <![CDATA[2017-01-26 09:02:36]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2017-01-26 14:02:36]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2017-09-03 13:48:51]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2017-09-03 18:48:51]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-2-the-authorization]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="javascript">
        <![CDATA[Javascript]]>
      </category>
      <category domain="category" nicename="rest">
        <![CDATA[REST]]>
      </category>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="category" nicename="microsoft-graph-api">
        <![CDATA[Microsoft Graph API]]>
      </category>
      <category domain="series" nicename="extending-sharepoint-with-adal-and-the-microsoft-graph-api">
        <![CDATA[Extending SharePoint with ADAL and the Microsoft Graph API]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_publicize_twitter_user]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[@jfj1997]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wpas_mess]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[Extending SharePoint with ADAL and the Microsoft Graph API – Part 2 (The Authorization)]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wpas_done_all]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_jetpack_dont_email_post_to_subs]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_series_part]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[2]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[199]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>52</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Wictor Wilén]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[wictor@wictorwilen.se]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://www.facebook.com/app_scoped_user_id/10154336645225753/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[94.246.102.130]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-01-26 09:28:37]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-01-26 14:28:37]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[One thing to bear in mind is that ADAL.js does not work properly with Internet Explorer and SharePoint Online, if SharePoint Online is in your trusted zone - which you normally have for SSO to work.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[true]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1485440917.3114459514617919921875;s:5:"event";s:10:"check-spam";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[facebook]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[http://graph.facebook.com/v2.2/10154336645225753/picture?type=large&_md5=467a03d945e8b06d9938a1becea68cac]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[10154336645225753]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1485897726.17496204376220703125;s:5:"event";s:10:"report-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_user_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_user]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[jturnerwp]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1485897770.4390289783477783203125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>54</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-01-31 16:24:23]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-01-31 21:24:23]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thanks Wictor, I added a note in the post itself as this does seem like a pretty big gotcha.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>52</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1485897863.5293409824371337890625;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>66</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Rob Windsor (@robwindsor)]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[robwindsor@twitter.example.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://twitter.com/robwindsor</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[99.250.231.13]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-03-16 13:28:59]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-03-16 18:28:59]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I just tried this and it works fine Internet Explorer. I have .sharepoint.com, -my.sharepoint.com, and login.microsoftonline.com in Trusted Sites.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[true]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1489688939.810028076171875;s:5:"event";s:10:"check-spam";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[twitter]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[http://pbs.twimg.com/profile_images/1865244869/ObjectSharp02_normal.jpg]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[14399269]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1489689806.02890110015869140625;s:5:"event";s:10:"report-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_user_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_user]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[jturnerwp]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1489689839.438869953155517578125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>67</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Rob Windsor (@robwindsor)]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[robwindsor@twitter.example.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://twitter.com/robwindsor</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[99.250.231.13]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-03-17 23:09:42]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-03-18 04:09:42]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[After going back and forth with Wictor on a private Slack I think I finally get the Internet Explorer zones issue. Basically, every site that uses ADAL,js has to be in the same zone as login.microsoftonline.com. This is a problem for SharePoint users because tenantname.sharepoint.com and tenantname-my.sharepoint.com are often in the Local Intranet or Trusted Sites zone. So, if you want to access the Graph API from a SharePoint web part you need to put login.microsoftonline.com in the same zone as the sharepoint.com URLs. Now, what if you also use abc.azurewebsites.net and xyz.azurewebsites.net which both use ADAL.js? You're going to have to put those sites in the same zone as login.microsoftonline.com too or they won't work properly. As time goes on and more and more sites use ADAL.js you end up having a huge list of sites in whatever zone login.microsoftonline.com is in.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>66</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1489810182.262444019317626953125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[twitter]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[http://pbs.twimg.com/profile_images/1865244869/ObjectSharp02_normal.jpg]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[14399269]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>69</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-03-27 16:37:11]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-03-27 21:37:11]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Got it, thanks so much for doing the leg work and helping us all understand the ramifications, which feel like (don't use IE?) :)]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>67</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1490650631.9388229846954345703125;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[jetpack]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://s2.wp.com/wp-content/mu-plugins/highlander-comments/images/wplogo.png]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[1]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>79</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Paul Willen]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[paul@willen.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://www.willen.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[185.22.141.38]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-05-23 13:14:51]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-05-23 18:14:51]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Julie, 

Thanks a lot for your post. Sadly It doesn't work out the way I want it to.
I've created an complete empty aspx page with your code from "Using ADAL.js with No Framework" in it. I've added the html, header and body tag so that it is a 'real' page; and obviously I've changed 

sympraxis.clientId = '';
sympraxis.tenant = '';

This page is uploaded to the Library SitePages in my Site Collection. Sadly when go to the page the first time; I see some kind of token beïng obtained when I look in the address-bar of Chrome; but other nothing happens.

When I hit F5 I get the valid data and I see the displayname and message (and other data) beïng returned.

Any idea why I always need to hit F5, when the application doesn't have a correct token yet? Obviously I'm signed in into SharePoint online and I want this solution to work "single-sign-on"...

Best Regards, 

Paul]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1495563292.0861389636993408203125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1495569119.5489261150360107421875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>80</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[192.0.102.35]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-05-23 14:55:22]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-05-23 19:55:22]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Paul,  Without seeing your code this is fairly hard to answer.  However, based on your description is sounds like you're not handling the callback.  The code I have in the section you mention includes a jQuery "document.ready" function that performs that action.  Given you're seeing the URL change to include the token then I'd say it must be working in general but somehow you're not getting ADAL to handle the callback... did you include that section and have you tried debugging to see what's happening?]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>79</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1495569322.3094589710235595703125;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>81</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Paul Willen]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[paul@willen.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://www.willen.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[89.20.170.118]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-05-24 02:46:00]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-05-24 07:46:00]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Julie... Thanks for your answer...

Yep - I copied your complete code; so the jQyery document.ready is included as well.

First time I get on the page isCallback is obviously false; 
No user can be retreived from cache thus sympraxis.authContext.login(); runs

After the callback isCallback is true; and !getLoginError() is true, so it comes into 
sympraxis.authContext.handleWindowCallback(window.location.hash)

window.location.hash has a value of something like....

"#id_token=eyJ0qXAiOyJKV1qiLCJhbGciOKJ......." 

after the function sympraxis.authContext.handleWindowCallback(window.location.hash) runs the original url of the page (without the token and with the "#"-sign remains)

After that - the debugger stops........... and nothing happens. - no information is displayed in the message div as wel......

When hitting F5 the user can be retreived from cache and thus it  runs the getGraphData function correctly.......

Hope this helps you.. Would be great to receive some feedback.....

P.S. I'm using Chrome - but other browsers have similar results....]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>80</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1495611961.0993111133575439453125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>82</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-05-24 07:59:23]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-05-24 12:59:23]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[The section where you say "the original url of the page (without the token and with the "#"-sign remains" implies that the page has again reloaded (at least that's what it does for me) so you should have entered the document ready function again... I assume you have a breakpoint on what is line 87 in my example and it's not getting back there after handleWindowCallback is called?]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1495630763.1893370151519775390625;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[jetpack]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://s2.wp.com/wp-content/mu-plugins/highlander-comments/images/wplogo.png]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[1]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>85</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Paul Willen]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[paul@willen.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://www.willen.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[89.20.170.118]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-05-24 09:48:29]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-05-24 14:48:29]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Julie - Thanks sooo much for helping this far... 

I have a breakpoint on line 87 and it IS getting back there... (So it enters the document.Ready twice in total)....

The first time it isn't a callback and therefore goes into the else satement (line 91); hasn't got a user from cache and tries to login the user (line 95)...

It then returns on the page is indeed a callback and therefor goes to the handleWindowCallback (line 90) - After that function it stops and doesn't enter line 92 anymore...

However when I hit F5 - it tries the same thing but has a user from cache and it enters the else statement on (line 96)...

Hopes that makes sense....

I just think the handleWindowCallback doesn't work the way it should, but I'm really not sure what's wrong here......]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1495637309.1647799015045166015625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>86</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[192.0.101.101]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-05-24 10:19:42]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-05-24 15:19:42]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[The handleWindowCallback should refresh the page a third time... so a total of 3 screen refreshs... first to get the token, second to handle token, third to execute your function (at least until it's cached).  That's why I asked you if you have a breakpoint on that line to see if the handleWindowCallback was indeed refreshing the page a third time, in that case it should fall through the code to the point of calling your init function.  If it is not in fact refreshing a third time then yes, I am stumped because I have always seen that behave properly.  What version of ADAL.js are you using?]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>85</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1495639182.9025781154632568359375;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>89</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Paul Willen]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[paul@willen.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://www.willen.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[80.112.227.61]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-05-26 04:24:29]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-05-26 09:24:29]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Julie - Thanks!

I've switched to version 1.0.13 (was using the newest 1.0.14) and now I see three pageloads and could build my solution further... It works the way I want it to work now!

Thanks for your help; without you I guess I wouldn't have solved it anytime soon....

Paul]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>86</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1495790670.268580913543701171875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>90</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[192.0.101.101]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-05-26 09:18:36]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-05-26 14:18:36]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Great news!  Very glad you solved it, and yes, my demo was using v1.0.13... ]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>89</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1495808316.39943695068359375;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>96</wp:comment_id>
        <wp:comment_author>
          <![CDATA[mario van den Eijnde]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[mario@delafini.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://gravatar.com/mariodelafini</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[213.127.22.182]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-07-10 05:00:48]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-07-10 10:00:48]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hello Julie,

I am trying to use Adal.js for authentication in a mobile app (cordova)
But I receive the following return after authentication:

Do you have a solution?

Sign In
Sorry, but we’re having trouble signing you in.
We received a bad request.
•	
Additional technical information:
Correlation ID: e414ef65-16fe-4702-bbfd-686f0b26dda3
Timestamp: 2017-07-10 09:51:27Z
AADSTS50011: Reply address 'file:///var/mobile/Containers/Data/Application/55CDBFD1-8F17-470E-A8D1-263C400F6B4F/Library/Caches/launch/1499680266/57bac3b37e2193c2198b2691/www/index.html' specified by the request is not a valid URL. Allowed schemes: 'http,https'

Kind regards,
Mario]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1499680849.1647179126739501953125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1499693023.332775115966796875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>97</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-07-10 08:25:50]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-07-10 13:25:50]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Mario, First I should say I don't do any kind of native mobile programming so this is not my area of expertise but my opinion would be that you're using the wrong ADAL library, there is a version of ADAL specifically for Cordova https://github.com/AzureAD/azure-activedirectory-library-for-cordova which I think will get you a lot farther.  The ADAL.js library is meant specifically for building web based solutions, specifically SPAs.  Hope that helps.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>96</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1499693150.969120025634765625;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>98</wp:comment_id>
        <wp:comment_author>
          <![CDATA[mario van den Eijnde]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[mario@delafini.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://gravatar.com/mariodelafini</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[213.127.22.182]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-07-10 08:33:18]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-07-10 13:33:18]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hello Julie,

I have already investigated the "https://github.com/AzureAD/azure-activedirectory-library-for-cordova" but cannot get it to work.
If you know anyone in your network who can help me I would be very much interested.

Thanks and Kind regards,
Mario]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>97</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1499693598.999576091766357421875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>101</wp:comment_id>
        <wp:comment_author>
          <![CDATA[vidhiVidhi]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[vidhi.garg@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://gravatar.com/vidhi</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[46.226.2.98]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-08-17 11:01:18]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-08-17 16:01:18]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Julie,

I am using adal.js to get access token to access Microsoft Graph from my SharePoint Web Part. However, every time I am getting the error 'Token renewal operation failed due to timeout'. When I see the network I can see an access token successfully returned. But not sure what is going wrong there. Any pointers would be really helpful.

Thanks in advance,
Vidhi]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1502985679.0034210681915283203125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1503002429.66465091705322265625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>102</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-08-17 15:41:55]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-08-17 20:41:55]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Vidhi, 
I have seen that error as well, but only while I was trying to figure out how to correctly use the adal library... once I did, I no longer got that error.  
Are you following one of my code samples?

-Julie]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>101</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1503002515.6199820041656494140625;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>103</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Vidhi]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[vidhi.garg@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://gravatar.com/vidhi</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[46.226.2.98]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-08-18 04:06:47]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-08-18 09:06:47]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Julie,

My code is not exactly same as yours but mostly it is. I am following the below guidance as I am implementing for SharePoint webpart:
https://dev.office.com/sharepoint/docs/spfx/web-parts/guidance/call-microsoft-graph-from-your-web-part
However, I am trying to acquire the access token in the same way as specified in your code. Also, want to mention that I am using Adal JS v1.0.12 as specified in the above link. Not sure if this problem can be because of that? 

Many Thanks,
Vidhi]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>102</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1503047207.9494380950927734375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1503059975.7800180912017822265625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>104</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-08-18 08:17:24]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-08-18 13:17:24]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Vidhi, 

Yes I see what your issue is.  Unfortunately, my code mixed with the SPFx code isn't really going to work exactly right.  The example is showing you is everything you would to extend the adal-angular.js library, but then not showing you how to actually implement it. So, yes you would need to leverage the this.authCtx to log the user in and handle the callback to get the token. I have not gotten to the point of actually writing that article in my series (it will be part 5). Never fear all is not lost, my friend <a href="https://blog.mastykarz.nl/" target="_blank" rel="nofollow">Waldek Mastykarz</a> has done the heavy lifting to show you the complete implementation (I suspect his code was what the article is based on) in his github repo. It's using the React framework, but if you're not the code is still valid and should get you what you need -- <a href="https://github.com/SharePoint/sp-dev-fx-webparts/tree/master/samples/react-aad-implicitflow" target="_blank" rel="nofollow">react-aad-implicitflow</a>

-Julie]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>103</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1503062244.4906990528106689453125;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>105</wp:comment_id>
        <wp:comment_author>
          <![CDATA[vidhi]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[vidhi.garg@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://gravatar.com/vidhi</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[46.226.2.98]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-08-21 07:06:19]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-08-21 12:06:19]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Julie,

Thank you for getting back to me. I am referring that code as well, probably I am missing out something somewhere. I will keep my quest on to resolve this and hopefully soon I get a solution.

Many Thanks,
Vidhi]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>104</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1503317179.737339019775390625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>115</wp:comment_id>
        <wp:comment_author>
          <![CDATA[ankur garg]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[ankur27.engineer@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://plus.google.com/116120251528318157590</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[106.201.116.48]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-11-06 07:32:24]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-11-06 12:32:24]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi.

I am building SPA using angular JS and routing. Trying to access Azure AD using Microsoft GRAPH. Implementing using ADAL angular js. Set RequireADLogin:true in one of the routes. When i try to use $http.get('https://graph.microsoft.com/v1.0/me/getMemberGroups') , it throws an error  "Token renewal operation failed due to timeout|Token Renewal Failed" . Next time i do the same thing, it works as the token gets renewed after an error and gets saved in session storage. I am not sure why this happening and what needs to be done. I am stuck here. Please suggest. It would be really great if you can help me out.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1509971544.4331290721893310546875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1510000334.2464210987091064453125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>117</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-11-06 15:38:31]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-11-06 20:38:31]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Ankur, 
I can't say I've run into that.  Since I moved to components and ui.router I haven't touched the adal-angular library... what it feels like you're running into is not having the RequireADLogin on the route from where you're making the call and therefore it's trying to get a token before the user is there, but that's just a big guess. If it were me I'd download the non-minified version of the adal-angular library so that I could walk through the code and figure out where the timing was off. Sorry, I don't know that I'm going to be able to be much more help.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>115</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1510000711.3523728847503662109375;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[jetpack]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://s2.wp.com/wp-content/mu-plugins/highlander-comments/images/wplogo.png]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[1]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>121</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Devarshi Dave]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[dave.devarshi.soulkiller@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://www.facebook.com/app_scoped_user_id/1720833647961936/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[117.247.63.68]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-12-07 13:14:34]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-12-07 18:14:34]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[you're a real lifesaver...the internet/github literally have nothing to show as a solution to the "Token renewal failed due to timeout" error...finally after reading around 20 diff links i stumbled across your post, first of all thanks for putting this, i am actually making an outlook add-in that will be integrated with MS Graph API using adal-angular.js for my angular app, reading your article has made me realize that i will have to ditch the ngRoute logins and handle login and callback into my controller. I hope i will solve this...this error has been keeping me awake for a couple of nights, i just hope that your article will help me...please let me know if i understood correctly and point out if i am wrong.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1512670474.773725986480712890625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[facebook]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[http://graph.facebook.com/v2.9/1720833647961936/picture?type=large&_md5=54b1c88988994bc92bea9e871f2c372f]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[1720833647961936]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1512672807.241754055023193359375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>122</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[107.171.60.126]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-12-07 13:56:23]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-12-07 18:56:23]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Yep, I think you've got it. In part 4 of the series I've streamlined this even more for a more Model-ViewModel-View type architecture but in general yes I include adal-angular.js only if I want to use the $http augmentation... that said, I am often doing calls to both SharePoint REST endpoints as well as MSGraph endpoints so in my scenario I do not want the $http modifications that come with the adal-angular.js library and thereby don't use it at all.  Hope it all helps you.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>121</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1512672983.427319049835205078125;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>123</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Devarshi Dave]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[dave.devarshi.soulkiller@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://www.facebook.com/app_scoped_user_id/1720833647961936/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[117.247.63.68]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-12-07 14:02:24]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-12-07 19:02:24]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thanks for the quick feedback, So you're saying that i should completely ditch the adal-angular.js? because i dont need $http changes...i simply want to get/post data to Graph Api, so i am better off with the normal adal.js library right? i can call those functions and i wont get the "Token renewal failed" error.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>122</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1512673344.974730014801025390625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[facebook]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[http://graph.facebook.com/v2.9/1720833647961936/picture?type=large]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[1720833647961936]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>124</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-12-11 11:03:36]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-12-11 16:03:36]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[If you're not using ngRoute and are going to use something other than $http (or you're going to manage when you put the token on the header yourself) then yes, I'm saying you don't even need to include adal-angular.js.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>123</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1513008216.6616699695587158203125;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>125</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Devarshi Dave]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[dave.devarshi.soulkiller@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://www.facebook.com/app_scoped_user_id/1720833647961936/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[117.247.63.89]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-12-15 13:43:05]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-12-15 18:43:05]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thanks for the reply ma'm, i need my app to be in angular framework, so what do you suggest, i am still facing the issue "token renewal failed", some points i need to clear with you first. assume that i am still using ngRoute and using adal-angular.js
1. My app is calling the login in start up
2. token is coming, i also checked that when the token arrives, my app is calling the "Processhash" function in angular-adal that is equal to "handlewindowcallback" in adal.
3. the userInfo object is also getting filled after login, 
4. now when i make a call to graph api, the first call goes to authorize endpoint which gets a 200 (OK) response...but after exact 6 seconds i get a token renewal failed error.

below is the failed error message.

Possibly unhandled rejection: {"method":"GET","transformRequest":[null],"transformResponse":[null],"jsonpCallbackParam":"callback","url":"https://graph.microsoft.com/v1.0/groups?$orderby=displayName","headers":{"Accept":"application/json, text/plain, */*"},"data":"Token renewal operation failed due to timeout|Token Renewal Failed"}

i think its because the transform request and transform response has null values?

Please help,
Thank you.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>124</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1513363385.3979489803314208984375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[facebook]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[http://graph.facebook.com/v2.9/1720833647961936/picture?type=large&_md5=aa286ba5688d650b1bdae45c1a03c217]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[1720833647961936]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>174</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Rajesh]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[rajesh.lohar@ignatiuz.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[103.231.44.106]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-11-23 04:50:14]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-11-23 09:50:14]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I am using plain JS and adaj.js in my SharePoint web part as mentioned above in your article. But I am getting error as "Token renewal operation failed due to timeout". Sometimes it works sometimes not. Also for few users it works.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1542966615.2187969684600830078125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1543064849.7881491184234619140625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>607</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Tony Ishigami]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[m.ishigami@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[162.213.78.141]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-08-15 00:57:24]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-08-15 05:57:24]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thank you so much Julie. I'm a weekend programmer to help a local Non Profit Org as SPO admin. So, I have more challenges to catch up the Microsoft graph technologies. But your article saved my weeks of study.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1565848645.128242015838623046875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1565868454.7119190692901611328125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>608</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-08-15 06:32:22]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-08-15 11:32:22]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[@Tony -- So happy to have helped, however... if you're on SPO then things have changed some since I wrote these articles.  In summary, Microsoft added "native" support for calling the graph in the SharePoint Framework.  If you're doing customizations on SPO (in classic or modern pages) I would strongly recommend you use the SharePoint Framework. There are lots of tutorials out there to get you started, IMHO the best is from Andrew Connell's Voitanos.. check out this link (<a href="https://www.voitanos.io/a/8282/LsNcTTWz" rel="nofollow">https://www.voitanos.io/a/8282/LsNcTTWz</a>) and then scroll down to see the free "Starter Bundle". If you get up and running then consuming the graph in SPFx is as simple as adding a property to a config file and using the right built-in endpoint, here's a link to the docs: <a href="https://docs.microsoft.com/en-us/sharepoint/dev/spfx/use-aad-tutorial" rel="nofollow">https://docs.microsoft.com/en-us/sharepoint/dev/spfx/use-aad-tutorial</a> Happy Coding!!]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>607</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1565868742.7426049709320068359375;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Extending SharePoint with ADAL and the Microsoft Graph API - Part 3 (The Execution)]]>
      </title>
      <link>https://julieturner.net/2017/01/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-3-the-execution/</link>
      <pubDate>Tue, 31 Jan 2017 14:56:05 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/?p=179</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<h2>Introduction</h2>
<a href="http://julieturner.net/wp-content/uploads/2017/01/20170118_GraphExample.png"><img src="http://julieturner.net/wp-content/uploads/2017/01/20170118_GraphExample-300x300.png" alt="" width="300" height="300" class="alignright size-medium wp-image-200" /></a>
In <a href="http://julieturner.net/2017/01/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-1-the-setup/" target="_blank">Part 1</a>, I discussed the background and setup information you would need to successfully embark on a client site widget for SharePoint that accesses the Microsoft Graph API (MSGraphAPI).  In <a href="http://julieturner.net/2017/01/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-2-the-authorization/" target="_blank">Part 2</a>, we went in depth to the various ways of utilizing the adal.js and adal-angular.js libraries for authentication.  Now, here in Part 3 we’re going to get right into the nuts and bolts of a real solution that does the following:
<ul style="margin: 0 0 10px 20px;">
<li>Utilizes a third-party JavaScript library to create an Excel file</li>
<li>Uses the MSGraphAPI to upload the file into a SharePoint document library</li>
<li>Manipulates the file using the Excel endpoints that are part of the MSGraphAPI</li>
</ul>
To be fair the third party library we’re using can manipulate the Excel file, but I want to leverage the API built by Microsoft that does more. Plus, it’s just a fun demo.
<h2>Setup</h2>
In <a href="http://julieturner.net/2017/01/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-2-the-authorization/" target="_blank">Part 2</a>, I gave three different examples of configuring and utilizing the ADAL library.  The first step would be to create your “solution” and configure ADAL appropriately depending on whether you’re going to use AngularJS with ngRoute or Components or something else.  I’m assuming you know how to implement one or the other of those patterns so I will only be including the code for the functions themselves in the text and not the overall project.  Keep in mind I wrote my code using AngularJS so if you see a reference to “vm.”, in the code, that’s a reference to a UI binding property.

The MSGraphAPI root URL for the SharePoint library requires a couple of components that you’re going to have to gather together.  The first is the site collection id, which is a GUID you can get by pasting "https://&lt;your tenant&gt;.sharepoint.com/&lt;your site collection&gt;/_api/site/id" in a browser.  The second is the GUID of the library you want to access. You can get that most easily by navigating to the settings page of the library and decoding it from the URL.

<span style="color: red;font-weight: 700;">UPDATE 5/2017</span>
Due to a change in the SharePoint beta endpoints as a result of the sites endpoint going to v1.0 you will also need the web id, also a GUID you can get by pasting "https://&lt;your tenant&gt;.sharepoint.com/&lt;your site collection&gt;/_api/site/rootweb/id" in a browser.  Or, if the site you're referencing is a sub site you will need to reference that instead and get the GUID.

On the page, we have a button that executes the “createFile” function.  I’ve used promise chaining here so that we can make sure we execute the asynchronous calls to do the various pieces of work in the right order.  Here are the steps with a brief description and some highlights (if applicable) and then the actual code.

<table style="font-size: .75em;">
<thead>
<tr><th style="width: 50px;">Step</th><th style="width: 120px;">Function</th><th>Description</th><th>Return Values</th></tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>createXlsx</td>
<td>Utilizes the SheetJS/xlsx library to create an empty Excel file.</td>
<td>A JavaScript arraybuffer that can be uploaded to SharePoint/OneDrive.</td>
</tr>
<tr>
<td>2</td>
<td>saveXlsx</td>
<td>Utilizes the MSGraphAPI to upload the file to the specified SharePoint library.</td>
<td>The id of the file, and a temporary URL which can be used to download the file. This is more applicable to OneDrive but can be handy if you want to put the URL into the page after you complete your operations on it.</td>
</tr>
<tr>
<td>3</td>
<td>getWorksheets</td>
<td>Utilizes the MSGraphAPI Excel endpoint to get a list of worksheets in the Excel File</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>updateCell</td>
<td>Utilizes the MSGraphAPI Excel endpoint to change the value of a cell</td>
<td></td>
</tr>
</tbody>
</table>

There is obviously a huge number of other things you could do with Excel file, including adding and retrieving charts and tables, etc.
Some “global” variables I’ll reference in some of the functions:
<pre class="lang:js decode:true">
vm.message = "";
vm.Worksheets = [];

var fileName = null;
var tempID = null;

var _CONFIG.SP_EP = "https://graph.microsoft.com/beta/sites/sympraxis.sharepoint.com,78f5843c-7845-4273-8be7-9253552a473f,caff9905-d491-49ea-a625-1c279cb0bc4d/lists/7bc97907-9a6c-4959-9474-946d854a81a8/drive/"
</pre>
<span style="color: red;font-weight: 700;">UPDATE 5/2017</span>
The url for the beta endpoint changed slightly in that https://graph.microsoft.com/beta/sharepoint/sites became https://graph.microsoft.com/beta/sites and the documentation that says {site-id} is really a triplet that includes the &lt;hostname&gt;,&lt;spsite-guid&gt;,&lt;spweb-guid&gt;

The createFile function is executed by the user clicking a button/link.
<pre class="lang:js decode:true">
var createFile = function () {
    //Get the XLSX array buffer.
    var xlsBuffer = createXlsx();
    //Save the file to the SP Doc Library
    saveXlsx(xlsBuffer).then(function (response) {
        vm.message = "File: " + fileName + " was written succesfully.";
        tempID = response.data.id;
        //Get an array of worksheets in the XLSX file.
        return getWorksheets();
    }, function (error) {
        $q.reject(error);
    })
    .then(function (response) {
        //Display the worksheet array in the UI
        vm.Worksheets = response.data.value;
        var dateNow = new Date();
        //Define the array of values and their format, there are other options too see documentation for more examples.
        var rangeVals = { values: [[(dateNow.getMonth() + 1) + "/" + (dateNow.getDate()) + "/" + (dateNow.getFullYear())]], numberFormat: [["mm-dd-yyyy"]] };
        //Update a range in the workbook, in this case only one cell.
        return updateCell(rangeVals);
    }, function (error) {
        $q.reject(error);
    })
    .then(function (response) {
        //We're done
        vm.message = "File " + fileName + " updated";
    }, function (error) {
        $q.reject(error);
    })
    .catch(function (error) {
        console.log(JSON.stringify(error));
    });
};
</pre>
<h2>Creating the Excel File</h2>
As I said earlier, we’re going to utilize a third-party library to create the Excel file. To me this seems like obvious missing functionality from the MSGraphAPI, but there may be reasons for this of which I’m unaware. So until it’s added, we can use <a href="https://github.com/SheetJS/js-xlsx" target="_blank">SheetJS/js-xlsx</a>.  The documentation provides a nice simple example for creating a valid xlsx document.
<pre class="lang:js decode:true">
var sheet_from_array_of_arrays = function (data, opts) {
    //Taken from example provided by SheetJS/XLSX documentation.
    var ws = {};
    var range = { s: { c: 10000000, r: 10000000 }, e: { c: 0, r: 0 } };
    for (var R = 0; R != data.length; ++R) {
        for (var C = 0; C != data[R].length; ++C) {
            if (range.s.r > R)
                range.s.r = R;
            if (range.s.c > C)
                range.s.c = C;
            if (range.e.r < R)
                range.e.r = R;
            if (range.e.c < C)
                range.e.c = C;
            var cell = { v: data[R][C] };
            if (cell.v == null)
                continue;
            var cell_ref = XLSX.utils.encode_cell({ c: C, r: R });
            cell["t"] = 's';
            ws[cell_ref] = cell;
        }
    }
    if (range.s.c < 10000000)
        ws['!ref'] = XLSX.utils.encode_range(range);
    return ws;
};

var createXlsx = function () {
    //Create an empty workbook
    var emptyWB = { SheetNames: [], Sheets: {} };
    //Get a new worksheet that has nothing in it.
    var ws = sheet_from_array_of_arrays([[null]], null);
    var wsName = "Sheet1";
    //Add the blank worksheet to the workbook
    emptyWB.SheetNames.push(wsName);
    emptyWB.Sheets[wsName] = ws;
    //Create the xlsx file
    var wbOut = XLSX.write(emptyWB, { bookType: 'xlsx', bookSST: true, type: 'binary' });
    //Create an array buffer from the file.
    var buf = new ArrayBuffer(wbOut.length);
    var view = new Uint8Array(buf);
    for (var i = 0; i != wbOut.length; ++i)
        view[i] = wbOut.charCodeAt(i) & 0xFF;
    //Return the array buffer so that it can be uploaded.
    return buf;
};
</pre>
<h2>Saving the Excel File to a SharePoint Document Library</h2>
The saveXlsx function utilizes the new beta endpoints that access SharePoint through the MSGraphAPI rather than the SharePoint REST endpoints.  So, to save the file to the SharePoint library we use the base URL defined by the _CONFIG.SP_EP variable.  See the Setup section for details on putting this URL together.

Because we are using adal-angular.js we can create a function that will execute the $http request and will append the authentication token to the header all without having to do anything extra.
<pre class="lang:js decode:true ">
var saveXlsx = function (fileArrayBuffer) {
    var dateValue = new Date();
    var dateString = dateValue.getMilliseconds().toString();
    fileName = 'newXlsx' + dateString + ".xlsx";
    //_CONFIG passed in from AngularJS constants
    var fileUrl = _CONFIG.SP_EP + "root:/" + fileName + ":/content";
    //Create a Blob out of the array buffer of type octet-stream
    var fileBlob = new Blob([fileArrayBuffer], { type: "application/octet-stream" });
    //Call MSGraphAPI to put new XLSX file in SharePoint library.
    return $http({
        url: fileUrl,
        method: "PUT",
        data: fileBlob,
        headers: {
            "Content-Type": "application/octet-stream",
            Accept: "application/json;odata.metadata=minimal"
        }
    });
};
</pre>
We could, alternatively use the SharePoint REST endpoints to get the file into place; using the MSGraphAPI to upload the file is certainly not a requirement.  However, since we are using the MSGraphAPI, the return payload includes an id that will then use later. We’re going to save that value in a variable called tempID.

At this point, our new, empty Excel file is sitting in our document library.  In and of itself, this is pretty darn cool.  Ok, let’s move on.
<h2>Manipulating the Excel File</h2>
I’ve included a simple read method and a very basic update method here, just to give the general idea.  First, the read method gets an array of Worksheets in the Excel file.  If you recall from the createXlsx function we only put one sheet in the file, so the result is an array with one item.  We then assign the array to a binding variable and display it in the UI.
<pre class="lang:js decode:true ">
var getWorksheets = function () {
    //Get an array of worksheets from the workbook, you'll recall we only made one.
    var xlsFileUrl = _CONFIG.SP_EP + "items/" + tempID + "/workbook/worksheets";
    return $http({
        url: xlsFileUrl,
        method: "GET",
        headers: {
            Accept: "application/json;odata.metadata=minimal"
        }
    });
};
</pre>
Second, we’ll update a cell in the worksheet.  To do this we’ll have to provide a payload of data and then identify the range we want to update.  I’ve hardcoded it here but obviously, you can make this dynamic.
Here’s the payload, that we set up in the createXlsx function…
<pre class="lang:js decode:true ">
var dateNow = new Date();
var rangeVals = { values: [[(dateNow.getMonth() + 1) + "/" + (dateNow.getDate()) + "/" + (dateNow.getFullYear())]], numberFormat: [["mm-dd-yyyy"]] };
</pre>

...and then passed to the updateCell function in the data payload of the $http call.
<pre class="lang:js decode:true ">
var updateCell = function (rangeData) {
    //Update a range (or cell) of data
    var xlsUpdateCell = _CONFIG.SP_EP + "items/" + tempID + "/workbook/worksheets('Sheet1')/range(address='A1')";
    return $http({
        url: xlsUpdateCell,
        method: "PATCH",
        headers: {
            Accept: "application/json;odata.metadata=minimal"
        },
        data: rangeData
    });
};
</pre>
<h2>Summary</h2>
I’m excited to be able to provide this coverage of the process of utilizing the MSGraphAPI from a client side solution in SharePoint.  I really hope that it helps someone somewhere get up to speed quicker and create some awesome solutions of their own.  I’m providing a link to my <a href="https://github.com/juliemturner/Public-Samples" target="_blank">GitHub repo</a> where you can download this AngularJS sample in its entirety. You’ll need to provide your own tenant id, client id, site collection id, and library id, but otherwise it should work as described here.
Please feel free to comment or reach out to me on <a href="https://twitter.com/jfj1997" target="_blank">Twitter (@jfj1997)</a> if you have any questions.
<h2>Resources</h2>
<h5>OAuth Flows</h5>
<a href="http://www.andrewconnell.com/blog/looking-at-the-different-oauth2-flows-supported-in-azuread-for-office-365-apis">Andrew Connell - Looking at the Different OAuth2 Flows Supported in AzureAD for Office 365 APIs</a>
<a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-integrating-applications#updating-an-application">Microsoft - Integrating applications with Azure Active Directory</a>
<a href="http://www.matvelloso.com/2015/01/30/troubleshooting-common-azure-active-directory-errors/">Matt Velloso - Troubleshooting common Azure Active Directory Errors</a>
<a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-limitations#restrictions-on-libraries-amp-sdks">Microsoft - Should I use the v2.0 endpoint?</a>
<h5>ADAL</h5>
<a href="https://github.com/AzureAD/azure-activedirectory-library-for-js">GitHub - Azure Active Directory Library for JS</a>
<a href="http://www.cloudidentity.com/blog/2015/02/19/introducing-adal-js-v1/">Cloud Identity - Introducing ADAL JS v1</a>
<a href="http://www.cloudidentity.com/blog/2014/10/28/adal-javascript-and-angularjs-deep-dive/">Cloud Identity - ADAL JavaScript and AngularJS – Deep Dive</a>
<a href="http://www.cloudidentity.com/blog/2013/09/16/getting-acquainted-with-authenticationresult/">Cloud Identity - Getting Acquainted with AuthenticationResult</a>
<a href="http://www.cloudidentity.com/blog/2013/10/01/getting-acquainted-with-adals-token-cache/">Cloud Identity - Getting Acquainted with ADAL’s Token Cache</a>
<a href="https://dev.office.com/sharepoint/docs/spfx/web-parts/guidance/call-microsoft-graph-from-your-web-part">Microsoft - Call the Microsoft Graph API using OAuth from your web part</a>
<h5>Microsoft Graph API</h5>
<a href="https://graph.microsoft.io/en-us/docs/authorization/permission_scopes">Microsoft – Microsoft Graph permission scopes</a>
<a href="https://graph.microsoft.io/en-us/docs/authorization/auth_overview">Microsoft - App authentication with Microsoft Graph</a>
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>179</wp:post_id>
      <wp:post_date>
        <![CDATA[2017-01-31 09:56:05]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2017-01-31 14:56:05]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2017-09-03 13:48:00]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2017-09-03 18:48:00]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-3-the-execution]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="javascript">
        <![CDATA[Javascript]]>
      </category>
      <category domain="category" nicename="rest">
        <![CDATA[REST]]>
      </category>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="category" nicename="microsoft-graph-api">
        <![CDATA[Microsoft Graph API]]>
      </category>
      <category domain="series" nicename="extending-sharepoint-with-adal-and-the-microsoft-graph-api">
        <![CDATA[Extending SharePoint with ADAL and the Microsoft Graph API]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_publicize_twitter_user]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[@jfj1997]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wpas_done_all]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_jetpack_dont_email_post_to_subs]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_series_part]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[3]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[200]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>55</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Episode 116 on Sage and Office 365 bundling with Richard Custance—Office 365 Developer Podcast | Com-Tech of Miami, Inc.]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://www.comtechok.com/news/microsoft-info/episode-116-on-sage-and-office-365-bundling-with-richard-custance-office-365-developer-podcast/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[184.154.228.5]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-02-02 19:59:45]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-02-03 00:59:45]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] Extending SharePoint with ADAL and the Microsoft Graph API – Part 3 (The Execution) by Julie Turner [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1486083585.847445964813232421875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1486087609.868629932403564453125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>56</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Episode 116 on Sage and Office 365 bundling with Richard Custance—Office 365 Developer Podcast | Alt-Tech Inc.]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://www.alt-tech.ca/2017/02/02/episode-116-on-sage-and-office-365-bundling-with-richard-custance-office-365-developer-podcast/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[74.208.180.113]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-02-03 05:03:39]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-02-03 10:03:39]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] Extending SharePoint with ADAL and the Microsoft Graph API – Part 3 (The Execution) by Julie Turner [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1486116219.831696987152099609375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1486120368.9643909931182861328125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>58</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Episode 116 on Sage and Office 365 bundling with Richard Custance—Office 365 Developer Podcast &#8211; Rescue IT]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://rescueit.ca/episode-116-on-sage-and-office-365-bundling-with-richard-custance-office-365-developer-podcast/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[50.63.197.74]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-02-07 05:06:11]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-02-07 10:06:11]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] Extending SharePoint with ADAL and the Microsoft Graph API &ndash; Part 3 (The Execution)&nbsp;by Julie Turner [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1486461972.025578022003173828125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1486480256.174716949462890625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>60</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Episode 116 on Sage and Office 365 bundling with Richard Custance—Office 365 Developer Podcast &#8211; ExcelJobs.com]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://exceljobs.com/in-episode-116-of-the-office-365-developer-podcast-richard-dizerega-and-andrew-coates-talk-to-microsoft-developer-evangelist-richard-custance-about-sage-and-their-work-building-a-</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[129.121.177.70]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-02-23 01:33:43]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-02-23 06:33:43]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] Extending SharePoint with ADAL and the Microsoft Graph API &ndash; Part 3 (The Execution)&nbsp;by Julie Turner [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1487831624.245973110198974609375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1487849523.0545790195465087890625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>61</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Episode 116 on Sage and Office 365 bundling with Richard Custance—Office 365 Developer Podcast &#8211; Information Technology]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://infous24.todayinfo24.com/2017/02/28/episode-116-on-sage-and-office-365-bundling-with-richard-custance-office-365-developer-podcast/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[198.54.114.76]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-02-28 15:43:59]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-02-28 20:43:59]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] Extending SharePoint with ADAL and the Microsoft Graph API – Part 3 (The Execution) by Julie Turner [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1488314639.9122350215911865234375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1488314882.4633591175079345703125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>62</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Episode 116 on Sage and Office 365 bundling with Richard Custance—Office 365 Developer Podcast &#8211; New Media Technology]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://media.cashfowl.co/episode-116-on-sage-and-office-365-bundling-with-richard-custance-office-365-developer-podcast/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[198.54.114.33]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-03-02 03:10:03]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-03-02 08:10:03]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] Extending SharePoint with ADAL and the Microsoft Graph API – Part 3 (The Execution) by Julie Turner [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1488442204.0014979839324951171875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1488442862.9267499446868896484375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>78</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Episode 116 on Sage and Office 365 bundling with Richard Custance—Office 365 Developer Podcast - Vision-Room]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://vision-room.de/episode-116-on-sage-and-office-365-bundling-with-richard-custance-office-365-developer-podcast/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[88.79.198.70]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-05-06 21:06:20]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-05-07 02:06:20]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] Extending SharePoint with ADAL and the Microsoft Graph API &#8211; Part 3 (The Execution) by Julie Turner [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1494122780.8898780345916748046875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1494170485.6934750080108642578125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Greetings from New Hampshire, Where I’m Co-Authoring a Document]]>
      </title>
      <link>https://julieturner.net/2017/02/greetings-from-new-hampshire-where-im-co-authoring-a-document/</link>
      <pubDate>Fri, 03 Feb 2017 16:05:47 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/?p=255</guid>
      <description></description>
      <content:encoded>
        <![CDATA[As Marc said in his <a href="http://sympmarc.com/2017/02/03/greetings-from-oslo-where-im-co-authoring-a-document/" target="_blank">post</a> on this experience, which of course he published before me, he and I needed to do some work on a Word document together today.  We started by emailing, but almost immediately realized we should just share it on our OneDrive.  I was in browser at the time, but have since continued to co-author it in Word on my desktop.  I’m not going to lie, I’ve had problems with the co-authoring experience in the past, but was keeping an open mind since Marc and I recently “upgraded” (not sure that’s the right word) to the “First Release for Current Channel (Office Insider Slow)” version of Office 2016.  I’m having challenges with authentication since that happened but otherwise I’m liking some of the new features.  Anyway, cutting to the chase I wanted to add some more insight to Marc’s post regarding some differences I saw when using the desktop version of Word in this co-authoring experience.

When I opened the document from my OneDrive sync’d folder on my desktop, it immediately asked me if I wanted to automatically share changes as they happened.  I of course said “yes”, not sure why I wouldn’t.

<a href="http://julieturner.net/wp-content/uploads/2017/02/20170203_1.png"><img src="http://julieturner.net/wp-content/uploads/2017/02/20170203_1.png" alt="" width="416" height="396" class="aligncenter size-full wp-image-257" /></a>

Note that the UI shows Marc’s smiling face, along with a “Skype” icon… make note that is linked to Skype for Business, so when you click on it that’s what pop’s up.  Unlike the browser version where the chat window in integrated in the UI.  I think this makes good sense for the desktop version, but it is different.

<a href="http://julieturner.net/wp-content/uploads/2017/02/20170203_2.png"><img src="http://julieturner.net/wp-content/uploads/2017/02/20170203_2.png" alt="" width="451" height="304" class="aligncenter size-full wp-image-258" /></a>

There’s then an icon to let you share with other people, and the “Activity” button.  This one is interesting because it’s a much different experience than working in the browser.  When you enable the desktop activity panel, you see a listing of “save” activities, and if you click on one of the historical activities it shows you that version of the document.  You can then “Compare” or “Restore” it.  

<a href="http://julieturner.net/wp-content/uploads/2017/02/20170203_3.png"><img src="http://julieturner.net/wp-content/uploads/2017/02/20170203_3.png" alt="" width="346" height="822" class="aligncenter size-full wp-image-259" /></a>
<a href="http://julieturner.net/wp-content/uploads/2017/02/20170203_4.png"><img src="http://julieturner.net/wp-content/uploads/2017/02/20170203_4.png" alt="" width="830" height="91" class="aligncenter size-full wp-image-260" /></a>

If you click on “Compare” you see a UI that shows you what revisions were made as well a three “views” of the document.  Word has had this feature for a while when comparing to historical versions but it bears pointing out how much more robust the experience is on the desktop.  

<a href="http://julieturner.net/wp-content/uploads/2017/02/20170203_5.png"><img src="http://julieturner.net/wp-content/uploads/2017/02/20170203_5-1024x401.png" alt="" width="660" height="258" class="aligncenter size-large wp-image-261" /></a>

In the browser, you get a list of activities, but not the same level of functionality.  Again, this makes sense but it’s worth noting.

<a href="http://julieturner.net/wp-content/uploads/2017/02/20170203_6.png"><img src="http://julieturner.net/wp-content/uploads/2017/02/20170203_6.png" alt="" width="617" height="403" class="aligncenter size-full wp-image-262" /></a>

We further did a little test with this blog article by my sharing with him via the “Share” button in Word (desktop) and him being on his iPhone in Oslo with a Wi-Fi connection, and we’re having a pretty darn good experience.  We both had to “save/sync” the document before he showed up as “editing” but I could see him editing real time from his phone. You can see from the image below that it showed he was working on this section, and when I tried to change a word in this section Word told me it was locked.  

<a href="http://julieturner.net/wp-content/uploads/2017/02/20170203_7.png"><img src="http://julieturner.net/wp-content/uploads/2017/02/20170203_7.png" alt="" width="496" height="118" class="aligncenter size-full wp-image-269" /></a>

For reference, Marc provided these screen shots of his experience on his phone, pretty compelling I think.

<a href="http://julieturner.net/wp-content/uploads/2017/02/20170203_9.png"><img src="http://julieturner.net/wp-content/uploads/2017/02/20170203_9.png" alt="" width="359" height="640" class="aligncenter size-full wp-image-273" /></a>
<a href="http://julieturner.net/wp-content/uploads/2017/02/20170203_8.png"><img src="http://julieturner.net/wp-content/uploads/2017/02/20170203_8.png" alt="" width="640" height="359" class="aligncenter size-full wp-image-272" /></a>

As Marc said, I think this is a feature we’ll find we use more and more given that we work remotely from each other as a normal course of business.  As that model becomes more pervasive in corporate America and small businesses everywhere need to collaborate more I can see it expanding. What may not be as good of an experience is co-authoring on a document when the users are not part of the same subscription.  In a recent <a href="http://www.microsoftcloudshow.com/podcast/Episodes/176-2017-predictions-wishes-and-goals" target="_blank">episode</a> of The Microsoft Cloud Show, Andrew Connell related some very bad experiences he was having trying to collaborate with external users.  Hopefully this is an area where Microsoft can focus on improving soon.
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>255</wp:post_id>
      <wp:post_date>
        <![CDATA[2017-02-03 11:05:47]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2017-02-03 16:05:47]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2017-09-03 13:44:19]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2017-09-03 18:44:19]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[greetings-from-new-hampshire-where-im-co-authoring-a-document]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="office-apps">
        <![CDATA[Office Apps]]>
      </category>
      <category domain="category" nicename="co-authoring">
        <![CDATA[Co-Authoring]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wpas_done_all]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_jetpack_dont_email_post_to_subs]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[257]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>64</wp:comment_id>
        <wp:comment_author>
          <![CDATA[David Remillard]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[dar@futuretechnologygroup.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://www.futuretechnologygroup.com</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[66.30.230.40]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-03-02 16:27:42]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-03-02 21:27:42]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Julie,  Greetings from Maine!  Nice article!  I was just doing some testing with a client on co-authoring and was a little surprised to find out that while co-authoring works with client apps for Word, PowerPoint, and Visio ... it doesn't work for Excel client! (Only Excel Web App).  I'm guessing you already know this, but just in case!   Best regards, Dave]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1488490063.1360170841217041015625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[wordpress]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://2.gravatar.com/avatar/b4ff707a7c48b49de6373041705ec5f1?s=25&d=https%3A%2F%2Fs2.wp.com%2Fwp-content%2Fmu-plugins%2Fhighlander-comments%2Fimages%2Fwplogo.png&r=G]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[9404651]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_wpcom_id_sig]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[e99838adb913839c83e23dd4a4c626985215e125]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1488491167.4881188869476318359375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>65</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[199.36.206.40]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-03-02 16:47:04]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-03-02 21:47:04]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Maine!  My home state.   Yes, sadly I have seen that, this link (although outdated) implies as much... https://technet.microsoft.com/en-us/library/ff718249.aspx]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>64</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1488491224.49703311920166015625;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[A Big, Thank You!]]>
      </title>
      <link>https://julieturner.net/2017/03/a-big-thank-you/</link>
      <pubDate>Thu, 02 Mar 2017 14:17:41 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/?p=300</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<a href="http://julieturner.net/wp-content/uploads/2017/03/MVP_Logo_Horizontal_Preferred.png"><img src="http://julieturner.net/wp-content/uploads/2017/03/MVP_Logo_Horizontal_Preferred.png" alt="Microsoft MVP" width="272" height="111" class="alignright size-full wp-image-301" style="margin-left: 72px; margin-bottom: 72px;"/></a>Yesterday was a huge day for me professionally as I was awarded my first (and hopefully not last) <a href="https://mvp.microsoft.com/" target="_blank">Microsoft MVP Award</a>.  It was such a huge honor, and I felt it appropriate to give a shout out here to the Microsoft community for their support.  There have been so many great mentors in my life over the years, many of whom I still collaborate with on a regular (if not daily) basis.  Everyone that I interact with has been so supportive in helping me find my way whether it be technically or “socially”, and I hope I have often been able to reciprocate in kind.  So, thank you to everyone I interact with in the community for being so open and generous with your knowledge and time!

It's been a whirlwind year for me, as the date of March 1, also marks a year since I first started talking to <a href="http://sympmarc.com/" target="_blank">Marc</a> about the possibility of joining him at <a href="http://sympraxisconsulting.com" target="_blank">Sympraxis Consulting</a>.  What felt like a huge decision was probably the best one I've ever made.  He's been a great mentor as I embarked on taking what I always did quietly behind the scenes out into the community.  This last year has seen me do things many who’ve known me were somewhat shocked by… helping organize the <a href="https://www.meetup.com/Granite-State-SharePoint-Users-Group/events/235672573/" target="_blank">Granite State SharePoint User Group</a>, blogging more, speaking at conferences (this was the big one), and then connecting with various colleagues of Marc's (and now of mine), in the MVP community.  So, also, a special thank you to him, as I absolutely couldn't have done it without him.

I hope this marks only the beginning of this new-ish phase of my professional life, thanks again!
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>300</wp:post_id>
      <wp:post_date>
        <![CDATA[2017-03-02 09:17:41]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2017-03-02 14:17:41]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2017-09-03 13:42:50]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2017-09-03 18:42:50]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[a-big-thank-you]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="uncategorized">
        <![CDATA[Uncategorized]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wpas_done_all]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[301]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>63</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Marc]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[marc.anderson@sympraxisconsulting.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://sympmarc.com</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[66.31.127.127]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-03-02 12:06:33]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-03-02 17:06:33]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Aw, schucks. All I do is stand around and watch you shine!

M.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1488474394.171207904815673828125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[wordpress]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://1.gravatar.com/avatar/152629bd7ea49737f9a5efea442619b5?s=25&d=https%3A%2F%2Fs2.wp.com%2Fwp-content%2Fmu-plugins%2Fhighlander-comments%2Fimages%2Fwplogo.png&r=G]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[6320981]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_wpcom_id_sig]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[80cf81284b6e3b0ecd3e93bd86c229c08cfa1bc5]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1488474598.375051021575927734375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[SharePoint time, is not your time, is not their time.]]>
      </title>
      <link>https://julieturner.net/2017/04/sharepoint-time-is-not-your-time-is-not-their-time/</link>
      <pubDate>Mon, 17 Apr 2017 23:54:27 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/?p=320</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<img src="http://julieturner.net/wp-content/uploads/2017/04/clock.png" alt="" width="300" height="300" class="alignright size-full wp-image-332" />If you develop client side solutions for SharePoint you’ve either run into this or you will run into the following scenario.  SharePoint stores all its date/time fields in UTC time.  The site collections, sites, and the users, can have their own time zone settings. If you’re using SharePoint out of the box because all the content is rendered on the server and pushed to the client with all the date/time translation has been done for you.  This makes wonderful sense, except when you try and write JavaScript against those same data points.  The REST endpoints that return the data for you give you the date string in a format that is specific to the regional settings of the person asking for them.  Sadly, this doesn’t translate as well to JavaScript as you might like.  I’ve set up a scenario to illustrate the point with a couple of manipulations you can make depending on your desired goals.
<h2>Scenario</h2>
I have two PC’s (ok, one is virtual &#x1f60a;). I set my virtual machine’s time zone to Pacific Daylight Time (PDT) and my main machine is set to Eastern Daylight Time (EDT).  Then I have a SharePoint site collection whose regional settings are set for Eastern Time (or UTC-5:00 aka EDT). I created a list with a title field, and two date fields one to show date/time and one to show just date. The date only field was to illustrate that the problem exists regardless of whether the user intentionally sets the time or not.  I created an item in the list from my computer set to Eastern time… Then I went to my computer set to Pacific time and created a second item.  I set the dates and times for both items the same from their respective UIs.  Again, this is to illustrate that the local time of the computer has no bearing on what SharePoint sees the date/time as.  Regardless of who entered the item the dates are displayed based on the regional settings effective on the site.
<a href="http://julieturner.net/wp-content/uploads/2017/04/ListView.jpg"><img src="http://julieturner.net/wp-content/uploads/2017/04/ListView.jpg" alt="" width="514" height="182" class="aligncenter size-full wp-image-317" /></a>
I’ve written some code that I’m going to expose using a CEWP… the code does the following things:
<ol style='margin: 0px 20px;'>
<li>Read the regional settings of the site.</li>
<li>Gets all the items in my SPDateTime list and loops through them, for each item…</li>
<li>Get the Items Date field, create a JavaScript date object, display the date object and the string that was used to create it.</li>
<li>Get the Items Date No Time field, create a JavaScript date object, display the date object and the string that was used to create it.</li>
<li>Adjust the Items Date field into the time zone of the regional settings in effect on the server and display it.</li>
<li>Adjust the Items Date field into UTC time and display it.</li>
</ol>

Ok, so let’s start with the computer in EDT and take a look at what our client side code does:
<a href="http://julieturner.net/wp-content/uploads/2017/04/EDT.jpg"><img src="http://julieturner.net/wp-content/uploads/2017/04/EDT.jpg" alt="" width="513" height="554" class="aligncenter size-full wp-image-316" /></a>
What you’re probably noticing right away is that everything looks great. It’s just what you’d expect. So, what’s the problem… well… if you’re developing client side code and all the time zone settings for all of your users and their computers are going to be in the same time zone… absolutely no problem at all.

The tricky part begins when we look at the computer where the time zone of the computer is set to PDT.
<a href="http://julieturner.net/wp-content/uploads/2017/04/PDT.jpg"><img src="http://julieturner.net/wp-content/uploads/2017/04/PDT.jpg" alt="" width="506" height="541" class="aligncenter size-full wp-image-318" /></a>
Ok, so what happened here is that when the date strings were passed into JavaScripts Date() function, the browser is actually then converting that date into the local time of the computer.  So 4/15/2017 12:00 am becomes 4/14/2017 9:00 pm (3 hours earlier).  Again, this makes perfect sense, but if you want the user to experience dates independent of time zone, you’re in trouble.  This can often happen if you’re building SharePoint “applications” date/times as fixed points in time that will be used as comparators.

Ok, so let’s look at a couple of workarounds and depending on your scenario you’ll have to decide if either of them work for you.  I’m not going to go into how those regional/personal settings work but I will provide you a link to where <a href="http://<a href="https://twitter.com/gregoryzelfond" target="_blank">Gregory Zelfond</a>, gives a nice explanation: <a href="http://sharepointmaven.com/sharepoint-time-zone/" target="_blank" rel="noopener noreferrer">Setting proper SharePoint Time Zone for users</a>.
<h2>Adjust date to time zone of “server”</h2>
The first manipulation I made was to adjust the date field to the time zone of the “server”, when I say server I mean whatever regional setting is in effect for that “page”.  I personally can’t come up with a ton of scenarios where this is useful with the exception of making comparisons.  In our PDT example which changes 4/15/2017 12:00 am to 4/15/2017 3:00am, which would be midnight PDT.  I readily admit this is an odd scenario but you may need it (I actually have).
<h2>Adjust to UTC time zone</h2>
The second, which I think is entirely more useful, is converting to UTC time which basically means were going to ignore the time zone entirely.  So, for our scenario this means 4/15/2017 12:00am shows up as 4/15/2017 12:00am.
<h2>The Code</h2>
For this solution, we’re going to need to make two REST calls the first will be to get the regional time zone of the web we’re working in.  To do that you need to make a GET request to:

<strong><your site>/_api/Web/RegionalSettings/TimeZone</strong>

The response for this call is the following, where we will use the Bias, and DaylightBias to calculate the region the server is operating in so we can mimic the values the server displays:
<a href="http://julieturner.net/wp-content/uploads/2017/04/RegionREST.jpg"><img src="http://julieturner.net/wp-content/uploads/2017/04/RegionREST.jpg" alt="" width="397" height="100" class="aligncenter size-full wp-image-319" /></a>
The second is to get all the items in our test list.  Below is the code to generate the various date/time values I outlined above.  Keep in mind, this is only a small code snippet from inside the loop that is traversing the items returned from out afore mentioned list.  
*Assume that <strong>data</strong> is an array of responses
<pre class="lang:js decode:true">
itm.datetimestring = data[i].ItemsDate;
//Create a date from the returned date/time field
itm.itemsdatetime = new Date(data[i].ItemsDate);
//Get a time representation of that date in milliseconds 
var localTime = itm.itemsdatetime.getTime();
//Get the regional time offset based on the REST call to /_api/Web/RegionalSettings/TimeZone
//value is in minutes, must be converted to milliseconds
var regionTimeoffset = (SPDV.TimeZone.Information.Bias + SPDV.TimeZone.Information.DaylightBias) * 60000;
//Get the local time offset based on the date object
//value is in minutes, must be converted to milliseconds
var localTimeoffset =  itm.itemsdatetime.getTimezoneOffset() * 60000;
//Create a new date object in the target field
itm.adjusteddate = new Date();
//Set the value of that date object to the original item plus 2x the difference between the local time zone offset and the regional time zone offset
itm.adjusteddate.setTime(localTime + ((localTimeoffset-regionTimeoffset) * 2 ));
//Create a new date object in the target field
itm.utcdate = new Date();
//Set the value of the date object to the original item plus the difference between the local time zone offset and the regional time zone offset.
itm.utcdate.setTime(localTime + (localTimeoffset-regionTimeoffset));
</pre>
For the full code sample, you can go to my <a href="https://github.com/juliemturner/Public-Samples" target="_blank" rel="noopener noreferrer">github</a> repo and look in the SPDateTime folder.

For completeness sake, I should mention that if you’re going to be doing a lot of date/time manipulation it might make sense to utilize the <a href="https://momentjs.com/" target="_blank" rel="noopener noreferrer">moment.js</a> library which makes a bunch of this stuff significantly simpler.  I tend to be a minimalist when it comes to libraries, only using one when I have use for it. But if it makes you more efficient by all means don’t be a martyr and reinvent the wheel.

Hope this can help a few people out there struggling with date/times in SharePoint client side solutions.  

Happy Coding.
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>320</wp:post_id>
      <wp:post_date>
        <![CDATA[2017-04-17 18:54:27]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2017-04-17 23:54:27]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2020-01-30 12:07:28]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2020-01-30 17:07:28]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[sharepoint-time-is-not-your-time-is-not-their-time]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="category" nicename="rest">
        <![CDATA[REST]]>
      </category>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="category" nicename="2010">
        <![CDATA[2010]]>
      </category>
      <category domain="category" nicename="2016">
        <![CDATA[2016]]>
      </category>
      <category domain="category" nicename="sharepoint-version">
        <![CDATA[SharePoint Version]]>
      </category>
      <category domain="category" nicename="sharepoint-area">
        <![CDATA[SharePoint Area]]>
      </category>
      <category domain="category" nicename="list">
        <![CDATA[List]]>
      </category>
      <category domain="category" nicename="library">
        <![CDATA[Library]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wpas_done_all]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[332]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>71</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Episode 127 on the new Script Lab Office add-in with Michael Zlatkovsky and Bhargav Krishna—Office 365 Developer Podcast | X-Vision IT Consulting GmbH]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://www.x-vision.co.at/episode-127-on-the-new-script-lab-office-add-in-with-michael-zlatkovsky-and-bhargav-krishna-office-365-developer-podcast/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[23.102.8.249]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-04-20 14:06:32]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-04-20 19:06:32]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] SharePoint time, is not your time, is not their time by Julie Turner [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1492715192.5350000858306884765625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1492715345.22332000732421875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>72</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Episode 127 on the new Script Lab Office add-in with Michael Zlatkovsky and Bhargav Krishna—Office 365 Developer Podcast | Alt-Tech Inc.]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://www.alt-tech.ca/2017/04/20/episode-127-on-the-new-script-lab-office-add-in-with-michael-zlatkovsky-and-bhargav-krishna-office-365-developer-podcast/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[74.208.180.113]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-04-21 05:04:29]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-04-21 10:04:29]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] SharePoint time, is not your time, is not their time by Julie Turner [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1492769069.8893949985504150390625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1492769242.758017063140869140625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>73</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Episode 127 on the new Script Lab Office add-in with Michael Zlatkovsky and Bhargav Krishna—Office 365 Developer Podcast | www.office.com/setup]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://officesetup.help/2017/04/20/episode-127-on-the-new-script-lab-office-add-in-with-michael-zlatkovsky-and-bhargav-krishna-office-365-developer-podcast/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[97.74.24.119]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-04-21 05:23:43]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-04-21 10:23:43]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] SharePoint time, is not your time, is not their time by Julie Turner [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1492770223.96232700347900390625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1492785067.066216945648193359375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>74</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Episode 127 on the new Script Lab Office add-in with Michael Zlatkovsky and Bhargav Krishna—Office 365 Developer Podcast &#8211; Rescue IT]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://rescueit.ca/episode-127-on-the-new-script-lab-office-add-in-with-michael-zlatkovsky-and-bhargav-krishna-office-365-developer-podcast/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[50.63.197.146]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-04-22 04:07:23]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-04-22 09:07:23]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] SharePoint time, is not your time, is not their time&nbsp;by Julie Turner [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1492852044.127501010894775390625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1492855537.1118869781494140625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>75</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Episode 127 on the new Script Lab Office add-in with Michael Zlatkovsky and Bhargav Krishna—Office 365 Developer Podcast | Com-Tech of Miami, Inc.]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://www.comtechok.com/news/microsoft-info/episode-127-on-the-new-script-lab-office-add-in-with-michael-zlatkovsky-and-bhargav-krishna-office-365-developer-podcast/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[184.154.228.5]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-04-28 00:15:00]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-04-28 05:15:00]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] SharePoint time, is not your time, is not their time by Julie Turner [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1493356500.7110359668731689453125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1493377446.0005009174346923828125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>76</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Newsletter – Episode 95 &#8211; Belarus SharePoint Community Blog]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://belarussharepoint.wordpress.com/2017/04/28/newsletter-episode-95/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[192.0.89.212]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-04-28 06:57:17]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-04-28 11:57:17]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] SharePoint time, is not your time, is not their time [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1493380637.7599079608917236328125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1493391182.9276630878448486328125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>77</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Episode 127 on the new Script Lab Office add-in with Michael Zlatkovsky and Bhargav Krishna—Office 365 Developer Podcast - Vision-Room]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://vision-room.de/episode-127-on-the-new-script-lab-office-add-in-with-michael-zlatkovsky-and-bhargav-krishna-office-365-developer-podcast/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[88.79.198.70]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-05-04 20:43:26]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-05-05 01:43:26]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] SharePoint time, is not your time, is not their time by Julie Turner [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1493948606.9732830524444580078125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1493949084.081140995025634765625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>114</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Paul Tavares]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[paultavares1@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://paultavares.wordpress.com</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[69.141.162.241]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-11-03 11:42:33]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-11-03 16:42:33]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Julie.
Thank you for the post - very helpful.
Got a question on an issue that has again come back to bit me. :)
I keep reading that SharePoint stores all dates in UTC - I understand that part and its great that it does that. but do you know what client-side solutions are suppose to provide on an update (ex. UpdateListItem)? 

I'm finding that when I send a date on the update that is already a UTC date (ex. 2017-10-30T23:00:00.000Z), sharepoint seems to still apply a conversion to this date, and thus double store it incorrectly... My assumption is that, like your solution above for display, I probably need to get the Web Regional timezone and then send the date in on the update in the timezone of Web... 
Any help you can provide would be awesome. 
Thanks.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1509727354.078401088714599609375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[wordpress]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://2.gravatar.com/avatar/8fed973012499e7ab4bb3dad481a899d?s=25&d=https%3A%2F%2Fs2.wp.com%2Fwp-content%2Fmu-plugins%2Fhighlander-comments%2Fimages%2Fwplogo.png&r=G]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[34398083]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_wpcom_id_sig]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[7cb7760957e0f04f8ebc5201e9c193af05d488c7]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1509999944.2482450008392333984375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>116</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-11-06 15:27:12]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-11-06 20:27:12]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Paul,
Thanks! Glad it was helpful. Your question is a really good one, and the quick answer is yes, assuming you've got an actual javascript date object... if you've just got a string from an input field you can just push it up there.  It was a good enough question that I took the liberty to write an additional post on the topic, <a href="http://julieturner.net/2017/11/sharepoint-rest-datetime-updates/" rel="noopener" target="_blank">SharePoint REST Date/Time Updates</a>]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>114</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1510000033.00450992584228515625;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>118</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Paul Tavares]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[paultavares1@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://paultavares.wordpress.com</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[205.132.5.130]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-11-06 15:59:56]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-11-06 20:59:56]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thanks Julie... I saw you released a new post -  I will read it tonight :)

FYI...
I found another trick... If you are still using SOAP operations to update an item (shame on me - I am), then you can add the following to the  element of your update: `DateInUtc="True"`... This seems to tell SharePoint that the date I'm passing in is already in UTC and in turn it will not attempt to convert it again.

In the mist of investigating the issue I had in my hands this past weekend (that lead to my question) and after reading your post, I also found out that my Queries to lists have a similar issue with dates... I always use UTC time, thinking that SP sees the "Z" is knows it must be a UTC date, but that is not the case as you know... for that one, there seems to be a CAML attribute available called `StorageTZ` which when used in combination with `IncludeTimeValue` will also allow you to send in UTC ISO8601 dates... Example: 

2017-11-30T21:30:46Z

Not sure if these two other options I found are applicable to the new REST APIs. That will be something I look into in the near future. 

Thanks again for the response.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>116</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1510001996.9423329830169677734375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[wordpress]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://2.gravatar.com/avatar/8fed973012499e7ab4bb3dad481a899d?s=25&d=https%3A%2F%2Fs2.wp.com%2Fwp-content%2Fmu-plugins%2Fhighlander-comments%2Fimages%2Fwplogo.png&r=G]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[34398083]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_wpcom_id_sig]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[7cb7760957e0f04f8ebc5201e9c193af05d488c7]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>138</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Ofer Gal]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[ofergal@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://plus.google.com/+OferGalAbaShelTomer</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[50.254.0.57]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-02-22 13:50:33]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-02-22 18:50:33]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[My situation has the servers in Chicago and users in India and Chicago. in the library, the created date shows the date and time when and where it was created. but when I do JavaScript compare (for filtering), REST gives me the created dates in UTC only.
So when My users in India filter on a date then look up the file in SharePoint, they see on some of the files (mostly those saved late evening on their time) a discrepancy of 1 day.  
If I could REST call the created date as it showing in SharePoint or the UTC + the timezone where it was recorded, I could prevent that.
Do you know of any properties I can get with REST that will help me? Thx]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1519325433.438601016998291015625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1519325820.040050029754638671875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>139</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-02-22 13:58:36]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-02-22 18:58:36]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[When you make a REST call and compare dates, you're right it compares against the UTC date, so you will need to take the date the user wants to compare to, change it from their local time zone to UTC and then pass that into the REST call.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>138</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1519325916.9514720439910888671875;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>170</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Darrin]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[stop_ing@hotmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[132.19.75.100]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-11-16 08:16:14]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-11-16 13:16:14]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Good day,
  I am having a issue with passing dates from a form back into SharePoint, I built a functon where I pass the start and end date. The start date was 24 Oct 2018 and end date 30 Oct 2018, the values being stored in SP are: 10/23/2018 11:00PM and 10/30/2018 12:00AM.  WHat am I doing wrong???  I am fine if the time is 12:00:000AM but need the dates not to change

function fixDatesUTC(dateX){
		
			var Year = dateX.substring(6, 10);
			var Month = dateX.substring(0, 2);
			var Day = dateX.substring(3, 5);
			
			var tDate2 = new Date(Year, (Month-1), Number(Day));
				
			var utcOffsetMinutes = tDate2.getTimezoneOffset();
			window.console.log( 'utcOffsetMinutes = ' + utcOffsetMinutes );
			var NewDate = new Date(tDate2);
			
			NewDate.setTime(NewDate.getTime() - (utcOffsetMinutes*60000));
			window.console.log(NewDate);
			var dateToStart = moment.utc( NewDate ).format();
			window.console.log(dateToStart);

			return dateToStart;
	};]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1542374175.0715529918670654296875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1542636300.2626349925994873046875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>173</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-11-19 09:09:55]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-11-19 14:09:55]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I'm not sure I follow what you're doing based on the limited nature of your example code... is this code what you're using to create the dates you want to write to SharePoint? Anyway, regardless you need to not only understand what date you're writing but what timezone your site collection is in... and correlate all of those things together similar to my example. Don't worry about converting at first, simply figure out what time zone your in, what timezone the site collection is in and then create your code to deal with your scenario.  Each implementation is going to be different based on all of those factors.  I'm sorry that I'm not going to be able to help you more without significant more information and time.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>170</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1542636595.798264026641845703125;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>612</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Gulshan Barkud]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[gulshanbarkud0@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[199.6.28.254]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-12-05 03:12:28]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-12-05 08:12:28]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[newDate value from datepicker 
var itemDate = new Date(newDate); this line is giving error Date is not constructor. Can you please help. i am taking value from datepicker]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1575533548.4208290576934814453125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1575546484.2284181118011474609375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>613</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-12-05 06:50:03]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-12-05 11:50:03]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Are you sure that is the exact line of code that's giving you the error? Usually, that's an error you get if you try and use the reserved keyword Date in some other way.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>612</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1575546603.35809803009033203125;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>624</wp:comment_id>
        <wp:comment_author>
          <![CDATA[robert]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[prodonnell1@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[74.215.149.247]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-01-30 10:36:09]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-01-30 15:36:09]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I hate myself for this, but I must: "regardless of -who entered-"]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1580398570.043612003326416015625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1580404030.040894031524658203125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>642</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Marco]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[vonclausowitz@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[217.169.235.25]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-08-04 08:58:30]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-08-04 13:58:30]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hello Julie,

I tried to reproduce your code on the date differences but I wasnt able to get it to work. What I understand is that there will be differences due to the local settings of our SP (which is UTC+01:00). My problem is a little bit different. I see the right dates in the screen when I am at the list page. However when I check the dates that are returned in the debugger screen they are way off. I mean some are in the future, like 2021 or 2022. Also some months are incorrect. There seems to be no logic behind it.


SP.SOD.executeFunc("clienttemplates.js", "SPClientTemplates", function() { 
    SPClientTemplates.TemplateManager.RegisterTemplateOverrides({
        OnPostRender: function (ctx) {
            // get today's date
            var today = new Date();
            var rows = ctx.ListData.Row;
            for (var i = 0; i &lt; rows.length; i++) {
                // get the date set in your date YourDateField
                var itemDate = new Date(rows[i][&#039;DueDate&#039;]);
                var rowId = GenerateIIDForListItem(ctx, rows[i]);
                var row = document.getElementById(rowId);
		console.log(&quot;itemdate: &quot; + itemDate);
                if (listItem.Status == &quot;Active&quot;) {
	        if (row!=null&amp;&amp;itemDate &lt;= today) {                  
                    row.style.backgroundColor = &quot;rgba(252, 213, 192, 0.5)&quot;; //light orange  
                }
	      }
            }
        }
    });
});


Does this mean anything to you?
Regards
Marco]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1596549510.69480609893798828125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1596550123.7032849788665771484375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>643</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-08-04 09:10:14]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-08-04 14:10:14]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I'm sorry, I really don't. This isn't related to what this blog post is about, it seems like you're asking me why the data isn't what you expect it to be and to that I can't really speak to.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>642</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1596550214.12891292572021484375;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>644</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Marco]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[vonclausowitz@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[217.169.235.26]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-08-04 09:21:19]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-08-04 14:21:19]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thank you for the respond Julie,

I understand what your blog is about. Its about the differences in local settings. So yes in that case there will be a difference for a couple of hours. In my case I get different dates all together. Like I mentioned one or two years offset. Although in the list on my screen I see the correct dates.

I was hoping you had some experience with this phenomenon]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>643</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1596550880.0060160160064697265625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>649</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Chintan]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[chintanu@mundrisoft.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://gravatar.com/chintanmundrisoft</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[157.37.83.229]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-10-21 10:49:51]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-10-21 15:49:51]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[How to avoid Daylight saving time while showing for different timezone users in SPFx also  how SharePoint save the dates when we create items from SharePoint List?]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1603295392.0594770908355712890625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1603919392.4122951030731201171875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>650</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-10-28 16:45:15]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-10-28 21:45:15]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I have read this question a few times but I'm still really not sure what it is your exactly asking me for.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>649</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1603921515.922235012054443359375;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>665</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Jean]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[robot61@hotmail.fr]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[90.114.33.123]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2021-09-16 02:11:28]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2021-09-16 07:11:28]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thanks to you. it's really helpfull for converting date.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1631776288.7182729244232177734375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1631809163.6498730182647705078125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Utilizing ngOfficeUIFabric People Picker in SharePoint]]>
      </title>
      <link>https://julieturner.net/2017/05/utilizing-ngofficeuifabric-people-picker-in-sharepoint/</link>
      <pubDate>Wed, 24 May 2017 12:41:14 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/?p=341</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<img src="http://julieturner.net/wp-content/uploads/2017/05/ngOfficeUiFabric.png" alt="" width="321" height="321" class="alignright size-full wp-image-359" />One of the great <em>joys</em> of developing custom forms in SharePoint is developing the controls for some of the more complicated field types, specifically the Taxonomy Picker and the People Picker.  If you’re sensing sarcasm, you would be correct.  There are brave souls out there who recreated these components for us that utilize no less than five (and sometimes more) Microsoft Javascript libraries.  The reality is, for the People Picker, which is what I’m going to be discussing today, you’re really looking for a type ahead input field that filters a list of people that you can retrieve from SharePoint.  Sounds easy right… *sigh* if only.

If you've started using the new SharePoint Framework (SPFx) there is a big push to use the <a href="https://dev.office.com/fabric" target="_blank">OfficeUIFabric</a>.  This framework provides not only styling but components that mimic what we’re given out of the box. Unfortunately, if you’re not a <a href="https://facebook.github.io/react/" target="_blank">React</a> framework user it seems that the investment by Microsoft is significantly lacking.  I suppose this makes sense.  Regardless, a team of non-Microsoft people embarked on a community project to create an AngularJS version of this library, <a href="http://ngofficeuifabric.com/" target="_blank">ngOfficeUIFabric</a>.  Although it has some issues, overall it seems to work pretty well, but given it took me a bit to figure out what does and doesn’t work and exactly the best way to wire it up I thought I’d share my findings. This is where you can find the online <a href="http://ngofficeuifabric.com/demos/uifPeoplePicker/" target="_blank">demo</a> for the people picker. 

The idea, is to provide a function that either returns a list of people that match the query string (or not, there really is no requirement) or a promise to return a list of people.  It supports Angular’s ng-model directive as well as ng-disabled. Obvious missing components are the ability to specify whether the field should be multiselect or not (it’s always multiselect), and the ability to trigger any functions on selection or selection change, I believe this is potentially a bug. Never fear dear reader, we can get around these limitations for the most part and the ability to avoid seventeen million additional libraries is a huge plus. Further, the architecture will certainly work in modern… so for all you brave SPFx coders out there you can take the same principles and apply them to the React component or even this Angular component depending on which framework (you want to use).

Ok, let’s get down to brass tacks… 

<h2>Data Source</h2>

The people picker component wants an array of objects with the following attributes.  We’ll call that object “Person”

<pre class="lang:js decode:true">
var Person = { initials: null, primaryText: null, secondaryText: null, presence: null, group: null, color: null, icon: null, id: null};
</pre>

<table style='width: 100%; font-size:.8em;'>
<tr><th style='width: 150px'>Attribute</th><th>Description</th></tr>
<tr><td>initials</td><td>Used in lieu of a users picture with a background color.</td></tr>
<tr><td>primaryText</td><td>The primary display text identifier of the user/group.</td></tr>
<tr><td>secondaryText</td><td>Some secondary information you want to highlight about the user/group.</td></tr>
<tr><td>presence</td><td>Text value, available options are available,  busy,  away,  blocked,  dnd,  offline</td></tr>
<tr><td>group</td><td>The results group you want to display the person in when the results of the search are displayed.  This takes the form of an object with the following properties { name: "Results", order: 0 }</td></tr>
<tr><td>color</td><td>If there is no image, this will be the background color for the users “Initials” block.  Available options are lightBlue,  blue,  darkBlue,  teal,  lightGreen,  green,  darkGreen,  lightPink,  pink,  magenta,  purple,  black,  orange,  red,  darkRed</td></tr>
<tr><td>icon</td><td>This is the URL to a thumbnail image of the user, if provided this will be used in lieu of the initials and color attribute.</td></tr>
<tr><td>id</td><td>Ideally this would be the id for the user in your site collection, but in lieu of that it’s a good option to use the users account name, or fully qualified domain name.</td></tr>
</table>

Now that we understand what structure the data needs to take, we need to go get it. To my mind there are two ways to solve this problem, the first, and probably the easiest would be to use Search.  By which I mean the <a href="https://dev.office.com/sharepoint/docs/general-development/sharepoint-search-rest-api-overview" target="_blank">Search REST endpoint</a> in SharePoint. That will be the direction I’ll take for this post, that said, you could always leverage my previous <a href="http://julieturner.net/series/extending-sharepoint-with-adal-and-the-microsoft-graph-api/" target="_blank">posts</a> on utilizing the Microsoft Graph API inside SharePoint and use that to get the results.  That would have the distinct advantage of being able to provide significantly more interesting information about the user if you needed it.. like manager assuming your user data is complete and up to date &lt;insert plug for <a href="https://hyperfish.com/" target="_blank">Hyperfish</a> here&gt;.

<em style='font-size:.7em;'>Note: NGFPP.currentSite is the url for the current site collection</em>
<pre class="lang:js decode:true">
function getPerson(id, name, accountName, department, pictureUrl){
   var newPerson = {initials: null, primaryText: null, secondaryText: null, presence: null, group: null, color: null, icon: null, id: null};
   //My results group name will be called ‘Results’ for all the people found by search
   var resultsGroup = { name: "Results", order: 0 };
   //Use a regex to get an array of the first letters of the users names
   var userInitials = name.match(/\b\w/g) || [];
   //Create a string of the initials
   var userInitialsResult = ((userInitials.shift() || '') + (userInitials.pop() || '')).toUpperCase();
   newPerson.initials = userInitialsResult;
   newPerson.primaryText = name;
   //This could be whatever you want
   newPerson.secondaryText = department;
   //Since I don't have real information I felt offline was the best policy
   newPerson.presence = 'offline';
   newPerson.group = resultsGroup;
   //I just like orange, you may want to randomize the available choices
   newPerson.color = 'orange';
   if(pictureUrl != undefined && pictureUrl.length > 0)
       newPerson.icon = pictureUrl;
   //If you have the id, use it, otherwise you'll need to resolve the account name.
   newPerson.id = id || accountName;
   return newPerson;
}

var getPeopleSearch = function (queryString) {
   var d = $q.defer();

   $http({
       method: 'GET',
       headers: {
           'Content-Type': 'application/json;odata=verbose',
           'accept': 'application/json;odata=verbose',
       },
       url: NGFPP.currentSite + "/_api/search/query?querytext='" + queryString + "*'&sourceid='B09A7990-05EA-4AF9-81EF-EDFAB16C4E31'"
   }).then((result) => {
       if(result.data.d.query.PrimaryQueryResult.RelevantResults.Table.Rows.results == undefined) {d.resolve([]);}
           var queryResults = result.data.d.query.PrimaryQueryResult.RelevantResults.Table.Rows.results;
           if(queryResults.length > 0){
               var searchResult = [];
               var formattedPeople = [];
               //AccountName //Department //Path //PictureURL //PreferredName
               for(var i=0; i < queryResults.length; i++){
                   // Normalize the fields so that we can easily get the values by the key name
                   for(var j=0; j < queryResults[i].Cells.results.length; j++){
                       searchResult[queryResults[i].Cells.results[j].Key] = queryResults[i].Cells.results[j].Value;
                   }
                  //Create a new person object with the resulting values
                   var newPerson = getPerson(null, searchResult.PreferredName, searchResult.AccountName, searchResult.Department, searchResult.PictureURL);
	          //Add the new person to the results array
                  formattedPeople.push(newPerson);
               }
               //Return the results array
               d.resolve(formattedPeople);
           }
       },
       function (error) {
           console.log("Error retrieving user search.", {Error: JSON.stringify(error.data)});
           d.reject(error);
       });
   return d.promise;
};
</pre>

Now, as you can see from a Search query I’m not going to be able to get the user's id which would be needed to set the value of a person field.  In this scenario, I’m specifically attempting to get all the available users from our directory, not only the ones that have actually logged into our SharePoint site.  So, before I’ll be able to create/update an item in a list I’ll need to convert that person’s id (account name) into an actual id from the hidden users list in the Site Collection.  For that we can use the <a href="https://msdn.microsoft.com/en-us/library/office/dn499819.aspx#bk_WebEnsureUser" target="_blank">ensureuser</a> REST endpoint which is analogous to its CSOM cousin.  

<pre class="lang:js decode:true">
var ensureUser = function(userName) {
    var data = {logonName: userName};
    return $http({
        method: 'POST',
        headers: {
            "Content-Type": "application/json;odata=verbose",
            "Accept": "application/json;odata=verbose",
            "X-RequestDigest": document.getElementById("__REQUESTDIGEST")['value']
        },
        data: JSON.stringify(data),
        url:  NGFPP.currentSite + "/_api/web/ensureuser"
    });
}
</pre>

<h2>UI</h2>
Now that we have all the back-end pieces put together we can get started with the user interface.  The one bug that I still haven’t completely solved is that of a wrapping issue, you can see it in the screenshot below.  I suspect that the issue is related to various SharePoint css attributes and I just haven’t found the right one to override.  But it’s trivial so I’ve decided to move on without solving it for now.  Eventually I’m going to get it!

<img src="http://julieturner.net/wp-content/uploads/2017/05/PeoplePickerUI-1024x360.png" alt="" width="660" height="232" class="aligncenter size-large wp-image-345" />

Since I’m on the topic let’s start with a couple minor CSS overrides you’ll want to include within your form.  I’d strongly suggest scoping them to your form as well as you wouldn’t want to upset SharePoint styling elsewhere.

<pre class="lang:css decode:true">
.ms-PeoplePicker input[type=button], .ms-PeoplePicker input[type=reset], .ms-PeoplePicker input[type=submit], button {
    min-width: 0;
    padding: inherit;
    margin-left: 0;
    border: 0;
}

.ms-PeoplePicker .ms-PeoplePicker-searchField {
    padding: 2px 5px;
    border: 0;
}
</pre>

Now onto the HTML, here’s a small snippet of a table that I created for the “form”.  I’m only showing the row for the People Picker in it.  Of note, uif-people is linked to a variable on my controller that is assigned the function and the ng-model is linked to an empty array that can receive the selected “Person” items from the source array.  In my example, I’ve decided to use the compact type and include a search delay… these are options and I’d encourage you to look over the <a href="http://ngofficeuifabric.com/demos/uifPeoplePicker/" target="_blank">demo’s</a> to decide what’s right for you.

<pre class="lang:html decode:true">
<tr>
    <td>Assigned To:</td>
    <td>
        <uif-people-picker uif-people="vm.getPeopleSearchResults" ng-model="vm.Issue.AssignedTo" uif-type="compact" uif-search-delay="300"
            placeholder="Search Sympraxis Employees">
            <uif-people-search-more>
                <uif-primary-text uif-search-for-text="You are searching for: ">Search Sympraxis employees
                </uif-primary-text>
            </uif-people-search-more>
        </uif-people-picker>
    </td>
</tr>
</pre>

<h3>Controller</h3>

<pre class="lang:js decode:true">
function myAppCtrl($timeout, $q, ngfppService) {
    var self = this;
    //The Model
    self.Issue = {Title: null, BusinessUnit: null, Category: null, AssignedToId: null, AssignedTo: [], Status: 'New', Comment: null};
    //Function to get search results for the query value
    self.getPeopleSearchResults = function(query) {
        //If no query string then just return empty array
        if((query == undefined) || query.length < 1) return [];
        let d = $q.defer();
            
        ngfppService.getPeopleSearch(query).then(function (result){
            //resolve the search results
            d.resolve(result);
        });
        //return a promise
        return d.promise;
    };

    //Function to save the new item.
    self.save = function() {
        //Call the ensureuser REST Endpoint for the value of the people picker field 
        ngfppService.ensureUser(self.Issue.AssignedTo[0].id).then(function(result){
            //Assign the resulting Id, to the person fields internal Id field
            self.Issue.AssignedToId = result.data.d.Id;
            delete self.Issue.AssignedTo;
            //Call the save function
            return ngfppService.saveIssue(self.Issue);
        })
        .then(function(result) {
            self.Issue = {Title: null, BusinessUnit: null, Category: null, AssignedToId: null, AssignedTo: [], Status: 'New', Comment: null};
        });
    }
}
</pre>

<h2>Single User Hack</h2>
One of the missing components of the solution is the ability to limit the user to selecting only one value.  The work around I came up with, which I completely admit is a hack, was to implement a $watchCollection.  This way when I see the model change I can determine if more than one item is selected and if so replace the originally selected item with the newly selected item.  I’ve found in implementation this looks very smooth to the user so I’m happy with it as a work around.  To add this to the above controller you would do the following:

<pre class="lang:js decode:true">
$scope.$watchCollection(() => {return this.Issue.AssignedTo;}, (newValue, oldValue) => {
    if (newValue !== oldValue) {
        if (newValue.length > 1)
            this.Issue.AssignedTo = [newValue[(newValue.length - 1)]];
    }
});
</pre>

<h2>Summary</h2>
So even with its flaws I’m moving forward with the implementation simply because it feels like a significantly cleaner solution.  If someone out there takes this on and solves the css issues before I do PLEASE let me know and I’ll update the post with your solution.  Hopefully I’ll figure it out soon!
<h2>Resources</h2>
The complete code is available on my <a href="https://github.com/juliemturner/Public-Samples" target="_blank">GitHub</a> repo if you’re interested in looking at the complete solution.

]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>341</wp:post_id>
      <wp:post_date>
        <![CDATA[2017-05-24 07:41:14]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2017-05-24 12:41:14]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2017-09-03 13:40:10]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2017-09-03 18:40:10]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[utilizing-ngofficeuifabric-people-picker-in-sharepoint]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="category" nicename="javascript">
        <![CDATA[Javascript]]>
      </category>
      <category domain="category" nicename="rest">
        <![CDATA[REST]]>
      </category>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="category" nicename="development">
        <![CDATA[Development]]>
      </category>
      <category domain="category" nicename="2016">
        <![CDATA[2016]]>
      </category>
      <category domain="category" nicename="language">
        <![CDATA[Language]]>
      </category>
      <category domain="category" nicename="form">
        <![CDATA[Form]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wpas_done_all]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[345]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>83</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Marc]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[marc.anderson@sympraxisconsulting.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://sympmarc.com</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[71.232.103.157]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-05-24 08:22:55]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-05-24 13:22:55]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[One thing I've done in the past when I've needed to create "people picker"-like capabilities is consider what data source I really need to use. Many times when we're building custom solutions, our scope of people doesn't have to be as wide. For example, in a team site where we're assigning tasks, we really only care about our team members so we might query a SharePoint group (small g). So where it's possible it can be useful to reduce scope - and therefore make it easier to retrieve matches be calling into a different endpoint.

M.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1495632176.26146793365478515625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[wordpress]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://1.gravatar.com/avatar/152629bd7ea49737f9a5efea442619b5?s=25&d=https%3A%2F%2Fs2.wp.com%2Fwp-content%2Fmu-plugins%2Fhighlander-comments%2Fimages%2Fwplogo.png&r=G]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[6320981]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_wpcom_id_sig]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[80cf81284b6e3b0ecd3e93bd86c229c08cfa1bc5]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1495632639.3800160884857177734375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>84</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-05-24 08:31:53]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-05-24 13:31:53]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[This is an EXCELLENT point and why this implementation where you provide the source of users is I think a much better architecture!  Now if I can just fix the styling issues!]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>83</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1495632713.4545719623565673828125;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[jetpack]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://s2.wp.com/wp-content/mu-plugins/highlander-comments/images/wplogo.png]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[1]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>119</wp:comment_id>
        <wp:comment_author>
          <![CDATA[sharepoint user]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[test@test.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[220.225.52.100]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-11-20 04:07:34]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-11-20 09:07:34]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Can you please brief me on how to use this with Angular 2?]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1511168855.115353107452392578125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1511185459.430139064788818359375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>120</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-11-20 08:45:02]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-11-20 13:45:02]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I think the easiest way to address your question is to point you to the answer in the GitHub repo... <a href="https://github.com/ngOfficeUIFabric/ng-officeuifabric/issues/405" rel="nofollow">https://github.com/ngOfficeUIFabric/ng-officeuifabric/issues/405</a>]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>119</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1511185502.3431570529937744140625;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>151</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Comment on Episode 130 on SharePoint developer updates with Vesa Juvonen and Daniel Kogan—Office 365 Developer Podcast by dannyjessee]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://easystepslearningseries.com/comment-on-episode-130-on-sharepoint-developer-updates-with-vesa-juvonen-and-daniel-kogan-office-365-developer-podcast-by-dannyjessee/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[74.220.215.60]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-04-30 04:31:24]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-04-30 09:31:24]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] http://julieturner.net/2017/05/utilizing-ngofficeuifabric-people-picker-in-sharepoint/ [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1525080685.3243229389190673828125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1525095798.91925907135009765625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>155</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Comment on Episode 130 on SharePoint developer updates with Vesa Juvonen and Daniel Koganâ€&quot;Office 365 Developer Podcast by dannyjessee | www.office.com/setup]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://officesetup.help/2017/05/26/comment-on-episode-130-on-sharepoint-developer-updates-with-vesa-juvonen-and-daniel-koganaeoffice-365-developer-podcast-by-dannyjessee/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[173.82.72.170]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-06-16 18:40:31]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-06-16 23:40:31]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] http://julieturner.net/2017/05/utilizing-ngofficeuifabric-people-picker-in-sharepoint/ [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1529192432.0434720516204833984375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1529194536.4299590587615966796875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[SharePoint + Flow (+ Azure Functions): Launching a Microsoft Flow from Client-Side Code]]>
      </title>
      <link>https://julieturner.net/2017/07/sharepoint-flow-azure-functions-launching-a-microsoft-flow-from-client-side-code/</link>
      <pubDate>Wed, 05 Jul 2017 20:29:23 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/?p=383</guid>
      <description></description>
      <content:encoded>
        <![CDATA[The requirement seemed deceptively simple… and it was, somewhat… simple. I'll start with showing you how very simple it is to launch a Microsoft Flow ("flow") from your client-side code hosted, well… wherever. I will give you this caveat, launching a flow this way requires no authentication.  The URL is entirely obscure, but if you’re concerned that the flow you’re starting does something you only want to allow authenticated users in your organization to do then you may want to rethink this. As with all security issue you need to assess and balance security with risk. I suppose that’s true of life too.
<h2>Creating a Microsoft Flow that can be launched from the client</h2>
One of the most common uses of workflow, at least for me with my clients, is to send email notifications. Microsoft Flow is excellent at this, with the caveat that the email cannot be sent on behalf of the user running the workflow unless the user you use to create the send email step under in the flow can send email on behalf of the user running the workflow. That is to say, there isn't a way to send email from the authenticated user with the Outlook connector without the appropriate permissions.   

Ok, so let’s say you’d like to send an email notification from your client-side application running in SharePoint.  The idea is that you would want to hand over to flow the information about how to compose the email and then it would do the rest.  As my 5-year-old likes to say, easy peasy lemon squeezy.  There’s even a walk-through of doing just this from Irina Gorbach on the Microsoft Flow Blog <a href="https://flow.microsoft.com/en-us/blog/call-flow-restapi/">Calling Microsoft Flow from your application</a> 

To add to that post just a bit, the Request connector has a section for advanced parameters.  The "Method" by default is a "POST", you can certainly specify this strictly if you want. If you’re not passing parameters in your scenario and only want to use a GET, you’d have that option.  Also, depending on your application there is a second parameter called “Relative path”.  That’s used to specify your parameter on the path and use the “GET” method, this could be used for advanced routing in SPA applications. A more in-depth post in the Azure Logic Apps documentation can help you understand this scenario better <a href="https://docs.microsoft.com/en-us/azure/logic-apps/logic-apps-http-endpoint">Call, trigger, or nest workflows with HTTP endpoints in logic apps</a>

Also, you may want to consider adding a "Response" action, also outlined in the afore mentioned Azure Logic Apps documentation, to your flow as the Azure post indicates to tell your client-side code what happened. If you don’t it will return a status 202 - Accepted by default.
Just to reiterate, once you have the flow done, you simply add an ajax/$http/&lt;your favorite implementation of XMLHttpRequest&gt; request to your client-side code, like you would to make any other REST call. Unlike with SharePoint calls though you will not need to add tokens to the header to make a POST call.  Using AngularJS $http provider, the call would look like:

<pre class="lang:js decode:true">
var item = {
   emailSubject: “My SharePoint and Flow Email”,
   emailBody: “My SharePoint and Flow Body”
}

$http({
   method: 'POST',
   headers: {
      "Content-Type": "application/json",
   },
   data: JSON.stringify(item),
   url: "https://prod-48.westus.logic.azure.com:443/workflows/417b791699a24bb99d70a29b91ad7998/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=jp1VuAlYMgvSx999Z5lGhEm99PxSb6dkB75ZALct3b0"
})
</pre>
<h2>User Context for Microsoft Flow – The new elevated privileges</h2>
To keep with my lemon theme what might be considered lemons, in that you cannot execute actions as the user from a flow, we shall turn to lemonade, in that flow provides us developers with the perfect vehicle to execute work with elevated privileges. Given how much we can do through client-side code, all as the currently authenticated user, I'm personally quite happy with making this trade, especially with the addition of launching Azure functions as part of my flow. In my next scenario let's discuss the idea of adding a Help Desk Request widget to the home page of every site collection in SharePoint. This reusable bit of code would be an excellent candidate for an SPFx web part but to keep the complexity level down I’m going to discuss it from the perspective of creating a basic client-side web part using the standard methods I often discuss which is to say using a SEWP/CEWP to put a bit of HTML/CSS/JavaScript on the page. The solution will basically be a form with a button that allows the user to enter the issue and submit it to a Help Desk list in another site collection that is secured to those that run the help desk.
<img src="http://julieturner.net/wp-content/uploads/2017/07/RequestForm.png" alt="" width="955" height="604" class="aligncenter size-full wp-image-380" />
When the user clicks submit what we’d like to do is launch a flow that will insert an item into the Help Desk Request list, where the user that is submitting the issue doesn’t even have read rights. To do this I've decided to create another O365 user called “Help Desk" that will act on the behalf of the help desk. That user has been given contribute rights to the Help Desk Request list. Yes, I’m absolutely aware that taking this action will require another monthly fee for that user, and I have to say I really wish there was a “service” account level user that we could add that could access an email box and get access to SharePoint, etc, etc, that would either be free or available at a significantly discounted monthly rate… sadly there is not.  
<i style="font-size: .9em;">Note: Although there is the concept of an unlicensed user that is a service account per say, the level of privileges that user would then have is way too high. Further, flow will not recognize it as a valid connection.</i>
You could also do this with any other user that has access to the Help Desk Request list.  However, please keep in mind that if that user ever leaves or their account is removed/deactivated for whatever reason your flow will stop working.  At the very least you will want to make sure you share your flow with one or more other users so that if something happens there will be at least one other person with rights to the flow that can change the context of the actions.

<img src="http://julieturner.net/wp-content/uploads/2017/07/FlowReqTrigger-1024x619.png" alt="" width="660" height="399" class="aligncenter size-large wp-image-377" />

First is the request trigger connection.  I set this up with the following JSON payload where user is the user’s login name.
<pre class="lang:js decode:true">
{
   "title": "string",
   "issue": "string",
   "user": "string",
   "technicalarea": "string"
}
</pre>

Next I added the SharePoint "Create item" action and set the values of the item with variables from my request trigger body. Note that I've made sure the action is running under the helpdesk@sympraxisconsulting.com user. This way the user will have permissions to add the item to the list.

<img src="http://julieturner.net/wp-content/uploads/2017/07/FlowCreateItem-1024x394.png" alt="" width="660" height="254" class="aligncenter size-large wp-image-376" />

If you’re looking at the above images and wondering wait, there are more fields in my form/JSON payload than in my flow “Create item” step… your eyes are not deceiving you.  Read on…

<h2>Wait!? WHAT! Microsoft Flow can’t do that???? –Azure Functions to the rescue</h2>

This section is dedicated to my biggest pet peeve (at the moment) which is what I would consider basic missing features of Microsoft Flow SharePoint connectors. The fact that it lacks support for all basic list and library field types (i.e. Person, choice, manage metadata/taxonomy, etc), makes it somewhat less than a "mvp" (minimally viable product) but, well, who am I right. So, in lieu of a working product I'll just share the work around. My griping aside, this section will hopefully become more and more obsolete with every passing month so I suppose that’s at least something.

My good friend <a href="https://twitter.com/Bob1German">Bob German</a> (partially due to my relentless prodding) just posted an excellent series on creating Azure Functions that “talk” to SharePoint. You can read them here <a href="https://bob1german.com/2017/06/24/az-func-simplestart/">Calling SharePoint CSOM from Azure Functions</a>. I used this method to write a customized Azure Function that would update my SharePoint list item created in the flow with the remaining information that could not be updated by the flow. I'm certainly not going to rehash what he expertly explained but I will share a tidbit that Bob also tracked down and why this post has been delayed a couple weeks and that is the API key for adding a custom connection to your Azure Function from flow. 
To create the connection you need a swagger file/URL which you can get by going to your azure function and checking out the API Definition tab (in preview as of this post). I had tried to use the "Export to PowerApps and Flow" tool there but couldn't get it to work, not that it won't be working by the time you read this. Also, as of this post you’re going to need to do a little tweaking to the "Definition" section, for some reason it doesn’t really get what it needs from the swagger. Here’s what it looked like for me, your mileage may vary.

<img src="http://julieturner.net/wp-content/uploads/2017/07/FlowConnectorGeneral-1024x860.png" alt="" width="660" height="554" class="aligncenter size-large wp-image-373" />

In all my efforts trying to get this to work properly at some point switched from pointing at the API Definition URL to trying to build my own swagger file, in hindsight I think the URL worked just fine.

<img src="http://julieturner.net/wp-content/uploads/2017/07/FlowConnectorSecurity-1024x540.png" alt="" width="660" height="348" class="aligncenter size-large wp-image-375" />

More kudos to Bob on helping me through the security part.  He figured out that the API key parameter label needs to be “code”.

<img src="http://julieturner.net/wp-content/uploads/2017/07/FlowConnectorsDef1-1024x883.png" alt="" width="660" height="569" class="aligncenter size-large wp-image-374" />

And again, during Bob's talk "Going with the Flow: Rationalizing the Workflow Options in SharePoint Online" he explained that to get the flow connector to understand my payload I needed to “Import from sample” which gives you a little flyout where you can specify how your REST call needs to look. Since I’m using the Body and not query string parameters my Request section is now all set for me.

<img src="http://julieturner.net/wp-content/uploads/2017/07/FlowConnectorDef2-938x1024.png" alt="" width="660" height="721" class="aligncenter size-large wp-image-372" />

Finally, my completed flow which I call exactly like the other simpler flow from the beginning of this post.  

<img src="http://julieturner.net/wp-content/uploads/2017/07/FinalFlow.png" alt="" width="915" height="568" class="aligncenter size-full wp-image-382" />

Hopefully a few of these scenarios will help you think through how you might make Microsoft Flow part of your SharePoint online solutions.  Happy Coding!
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>383</wp:post_id>
      <wp:post_date>
        <![CDATA[2017-07-05 15:29:23]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2017-07-05 20:29:23]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2017-11-06 18:44:51]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2017-11-06 23:44:51]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[sharepoint-flow-azure-functions-launching-a-microsoft-flow-from-client-side-code]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="javascript">
        <![CDATA[Javascript]]>
      </category>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="category" nicename="development">
        <![CDATA[Development]]>
      </category>
      <category domain="category" nicename="language">
        <![CDATA[Language]]>
      </category>
      <category domain="category" nicename="microsoft-flow">
        <![CDATA[Microsoft Flow]]>
      </category>
      <category domain="category" nicename="azure-functions">
        <![CDATA[Azure Functions]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wpas_done_all]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[530]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>141</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Thangu]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[kaliadiparasakthi@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://www.thangu.com</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[106.66.190.211]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-02-24 08:30:05]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-02-24 13:30:05]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Amazing!]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1519479005.521338939666748046875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1519479131.1056549549102783203125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>148</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Petra]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[p.rosenboom@betabit.nl]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[193.173.103.151]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-04-24 02:29:11]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-04-24 07:29:11]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Great post! It would be nice of you could share te code you've written, as I'm trying to do something similar :)]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1524554951.7427790164947509765625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1524575718.8684940338134765625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>149</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-04-24 08:16:45]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-04-24 13:16:45]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I've often found that each case is special and so I've stopped sharing anything other than example code.  That said in the case of what you're talking about the example code I referenced is shared by Bob German's example, I have a link in the body but will post it again here for reference. https://bob1german.com/2017/06/24/az-func-simplestart/]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>148</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1524575805.10571193695068359375;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>175</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Using Microsoft Flow to Create a Web Service &#8211; MarkRackley.net]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://www.markrackley.net/2018/11/23/microsoft-flow-web-service/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[66.147.244.177]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-11-23 18:30:06]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-11-23 23:30:06]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] https://julieturner.net/2017/07/sharepoint-flow-azure-functions-launching-a-microsoft-flow-from-clie&#8230; [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1543015806.66767597198486328125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1543064833.9903891086578369140625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>584</wp:comment_id>
        <wp:comment_author>
          <![CDATA[SharePoint + Flow (+ Azure Functions): Launching a Microsoft Flow from Client-Side Code &#8211; Bob Mixon&#039;s Musings]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://bobmixon.com/2019/05/sharepoint-flow-azure-functions-launching-a-microsoft-flow-from-client-side-code/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[72.167.190.195]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-05-09 13:00:35]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-05-09 18:00:35]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] Read the entire article here [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1557424835.6502349376678466796875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1557425338.551208972930908203125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Creating a property pane for editing items in your SPFx web parts]]>
      </title>
      <link>https://julieturner.net/2017/07/creating-a-property-pane-for-editing-items-in-your-spfx-web-parts/</link>
      <pubDate>Mon, 17 Jul 2017 12:34:43 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/?p=411</guid>
      <description></description>
      <content:encoded>
        <![CDATA[It’s a great privilege and great fun to work with the exceptional team at <a href="https://www.shire.com/">Shire</a> that’s building a bleeding edge intranet to support their now 24,000 employees and growing.  The team is exploring some very new territory and learning a lot along the way. During last weeks webinar, Microsoft’s <a href="https://twitter.com/mkashman">Mark Kashman</a> promised we’d post some of the lessons learned in the project. It’s my pleasure to share with the greater world a tidbit of that knowledge in the form of how to create a property pane for an individual item, not just the web part using the SharePoint Framework (SPFx). <a href="https://twitter.com/bob1german">Bob German</a> has also done several blog posts on the lessons learned, you can start reading them at <a href="https://bob1german.com/2017/07/16/spfxofficedocs/">Bob German's Vantage Point</a>.

In the custom web parts that are being built the UX team had decided upon a configuration that includes both a basic and advanced mode.  The advanced mode, is sourcing the items to be displayed in the web part from a list.  I’m not going to talk about that here, what I’m going to address is the idea of configuring all the items in the web part itself by the addition of a property panel specifically designed to add or edit one of those items.  This is a separate property panel from the web part property panel in which you would configure overreaching properties of the web part, such as layout or title.

<img src="http://julieturner.net/wp-content/uploads/2017/07/twoproppanes.png" alt="" width="738" height="368" class="aligncenter size-full wp-image-419" />

I’ve created a simple example (lacking in everything but the necessary functionality) to illustrate this concept by creating a webpart that displays a set of links. It doesn’t really matter how I render those links, could be buttons, unordered list, etc… the point is that I would have an array of link items that would be curated through the property panel not an external list. SharePoint’s own modern hero web part does this, so it shouldn’t be that hard, right?! It took our team member <a href="https://twitter.com/mptolly">Mike Tolly</a> a good amount of reverse engineering to figure it out... and now his pain is our gain!  Sorry Mike!!!

<img src="http://julieturner.net/wp-content/uploads/2017/07/fullwebpart-1024x368.png" alt="" width="660" height="237" class="aligncenter size-large wp-image-418" />

Within our web part we build a React component that has a set of properties.  Those properties include things like <i>linkItems</i> which is the array of items I want to show, and functions for working on that array like <i>editItem</i>, <i>deleteItem</i>, and <i>rearrangItems</i>, etc…

Below is the code from this simple example where inside of the class definition for my web part I've added a property for the <i>activeIndex</i> of the item being edited, updated the render function to create my SpfxItemPropPane component, and created two separate property pane configurations in <i>getWebPartPropertyPaneConfiguration</i> and <i>getItemPropertyPaneConfiguration</i>.  The real meat of the solution is in the protected <i>getPropertyPaneConfiguration</i> function where I make the decision to render the item property pane if the property pane is being called from code vs being called by the web part edit button. Obviously if you wanted even more item property panes you could add additional logic and properties to determine which property pane you were calling. 

<pre lang="ts">
export default class SpfxItemPropPaneWebPart extends BaseClientSideWebPart<ISpfxItemPropPaneWebPartProps> {
  //Index of current item being edited.
  private _activeIndex : number = -1;

  //Get & Set function for our activeIndex property.
  public get activeIndex() : number {
    return this._activeIndex;
  }
  public set activeIndex(v : number) {
    this._activeIndex = v;
  }

  protected get dataVersion(): Version {
    return Version.parse('1.0');
  }

  //Web parts render function
  public render(): void {
    //Declare the react component for the body of the web part
    const element: React.ReactElement<ISpfxItemPropPaneProps > = React.createElement(
      SpfxItemPropPane,
      {
        //Web parts title, set in the web part property pane
        title: this.properties.title,
        //Array of link items that I want to display in my web part.
        linkItems: this.properties.linkItems,
        //Function that calls the item property pane
        editItem: (index:number)=>{
          //If index is negative 1 then the add button was clicked.
          if(index===-1){
            this.properties.linkItems.push(new LinksItem("Link"));
            index = this.properties.linkItems.length-1;
          }          
          this.activeIndex = index;
          //triggers getPropertyPaneConfiguration, where isREnderedByWebPart will return true
          this.context.propertyPane.open();          
        }
      }
    );

    ReactDom.render(element, this.domElement);
  }

  //Function to display the property pane.
  protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration {
    //isRenderedByWebPart is true when the property pane is being opened becuase of a code call and false if it's being opened due to the user clicking the web parts edit icon.
    if(this.context.propertyPane.isRenderedByWebPart()) return this.getItemPropertyPaneConfiguration();
    return this.getWebPartPropertyPaneConfiguration();
  }

  //Basic web part property pane configuration that is normally in the getPropertyPaneConfiguration protected function, split out here so that we can add an additional property pane.
  private getWebPartPropertyPaneConfiguration(): IPropertyPaneConfiguration {
    return {
      pages: [
        {
          header: {
            description: "Web Part Properties"
          },
          groups: [
            {
              groupName: strings.BasicGroupName,
              groupFields: [
                PropertyPaneTextField('title', {
                  label: "Web Part Title"
                })
              ]
            }
          ]
        }
      ]
    };
  }

  //Property pane configuration for the item pane, note that there are text fields for each of the items in my link item's properties.
  private getItemPropertyPaneConfiguration(): IPropertyPaneConfiguration {
    return {
      pages: [
        {
          header: {
            description: "Item Properties"
          },
          displayGroupsAsAccordion:false,
          groups: [
            {
              groupName: "Item Properties",
              groupFields:[
                PropertyPaneTextField("linkItems["+this.activeIndex+"].title",{
                  label: "Link Title"
                }),
                PropertyPaneTextField("linkItems["+this.activeIndex+"].description",{
                  label: "Link Description"
                }),
                PropertyPaneTextField("linkItems["+this.activeIndex+"].url",{
                  label: "Link URL"
                })
              ]
            }
          ]
        }
      ]
    };
  }
}
</pre>

To complete the picture, my <i>SpfxItemPropPane</i> component tsx looks like this:

<pre lang="ts">
export default class SpfxItemPropPane extends React.Component<ISpfxItemPropPaneProps, void> {

  constructor(){
    super();
  }

  //Calls the editItem function defined whyen the component was declared (adding a new item)
  public addBox(event){    
    this.props.editItem(-1);
  }

  //Calls the editItem function with the item that should be edited.
  public editBox(event){
    event.stopPropagation();
    event.preventDefault();
    this.props.editItem(event.target.closest('[data-index]').getAttribute("data-index"));
    return false;
  }

  public render(): React.ReactElement<ISpfxItemPropPaneProps> {
    return this.renderBasicWebPart();
  }

  //HTML template for the body of the web part.
  public renderBasicWebPart(): JSX.Element {
    return (
      <div className={styles["testPart"]}>
        <h2>{this.props.title}</h2>
        <CommandButton className={styles["grayButton"]} onClick={this.addBox.bind(this)}>New Link Item</CommandButton>
        { this.props.linkItems &&
             this.props.linkItems.map((item) => { 
               return (
              <div id={"item-"+this.props.linkItems.indexOf(item)} 
                   key={"item-"+this.props.linkItems.indexOf(item)}
                   data-index={this.props.linkItems.indexOf(item)}>
                  <a href={item.url}>{item.title}</a><span> - {item.description}</span>
                  <div className={styles["editControls"]}>
                    <DefaultButton icon="Edit" onClick={this.editBox.bind(this)} className={styles["right-button"]}/>
                  </div>                   
              </div>         
               );
            })
         }     
      </div>
    );
  }
}
</pre>

To get the complete solution, please visit my <a href="https://github.com/juliemturner/Public-Samples" target="_blank">GitHub repo</a>

Hopefully, even though this is a very simplified example, it will get you started if you're looking to create multiple property panes in your SPFx web part.  Happy Coding!]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>411</wp:post_id>
      <wp:post_date>
        <![CDATA[2017-07-17 07:34:43]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2017-07-17 12:34:43]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2017-11-06 18:58:42]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2017-11-06 23:58:42]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[creating-a-property-pane-for-editing-items-in-your-spfx-web-parts]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="category" nicename="2016">
        <![CDATA[2016]]>
      </category>
      <category domain="category" nicename="spfx">
        <![CDATA[SPFx]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wpas_done_all]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[531]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>99</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Nested Virtualization on Azure Virtual Machines; Cloud Based Tools for Business Workflow Automation; Multi-Cloud Security]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://community.bamboosolutions.com/blogs/sharepoint-daily/archive/2017/07/19/nested-virtualization-on-azure-virtual-machines-cloud-based-tools-for-business-workflow-automation-multi-cloud-security/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[104.196.236.41]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-07-19 08:01:00]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-07-19 13:01:00]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] Creating a property pane for editing items in your SPFx web parts (Veni, Vidi, Vici) It’s a great privilege and great fun to work with the exceptional team at Shire that’s building a bleeding edge intranet to support their now 24,000 employees and growing. The team is exploring some very new territory and learning a lot along the way. During last weeks webinar, Microsoft’s Mark Kashman promised we’d post some of the lessons learned in the project. It’s my pleasure to share with the greater world a tidbit of that knowledge in the form of how to create a property pane for an individual item, not just the web part using the SharePoint Framework (SPFx). Bob German has also done several blog posts on the lessons learned, you can start reading them at Bob German’s Vantage Point. [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1500469261.0714728832244873046875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1500469376.775166988372802734375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>594</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Hamed Inanlou]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[hamed.inanlou@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[193.212.5.226]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-06-21 03:30:48]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-06-21 08:30:48]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[thanks for the post, very helpful. Have any tips for how to implement callbacks on page edit mode? I'd rather have the controls that are for editing links not show in read mode and only show in Edit mode.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1561105849.6135599613189697265625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1561400108.5063760280609130859375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>595</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-06-24 13:25:22]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-06-24 18:25:22]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I think what you're asking me is that you want to do something special when the user puts the page in "edit mode"? You might check out this article from Elio Struyf and see if that can help you deal with the same issue on web parts: <a href="https://www.eliostruyf.com/check-page-mode-from-within-spfx-extensions/" rel="nofollow">https://www.eliostruyf.com/check-page-mode-from-within-spfx-extensions/</a>. However, not sure you can override what's done on the page itself... so I'm not sure I'm really answering your question.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>594</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1561400722.982841968536376953125;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Extending SharePoint with ADAL and the Microsoft Graph API – Part 4 (The Extension)]]>
      </title>
      <link>https://julieturner.net/2017/08/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-4-the-extension/</link>
      <pubDate>Wed, 30 Aug 2017 13:25:59 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/?p=436</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<h2>Introduction</h2>
When I last left you (<a href="http://julieturner.net/2017/01/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-3-the-execution/" target="_blank">in Part 3</a>) we had completed the round-trip journey that is learning all the facets to accessing the Microsoft Graph API (MSGraph) through an Azure Application and the ADAL.js library.  A significant portion of our time was spent simply on the different ways to leverage ADAL.js depending on the framework you were using.  In this next installment we're going to go one step further and streamline our implementation of ADAL, in AngularJS specifically, but with broader implications to any web based framework.  
<h2>The Architecture</h2>
When we discussed ADAL implementation in <a href="http://julieturner.net/2017/01/extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-2-the-authorization/" target="_blank">Part 2</a> I mentioned the use of the adal-angular.js library which augments the $http provider as well as the ngRoute provider. In that installment, I gave you options for using or not using ngRoute but maintaining use of the library to augment the $http provider. The issue we would have was when trying to not only call MSGraph endpoints but also call SharePoint REST APIs within the same SPA. I had found as updates to ADAL.js came out issues started to arise with the reliance on the <i>anonymousEndpoints</i> config option. Basically, and without much detail, it stopped working for me (this may not be what you're seeing and if so, please feel free to carry on). At the same time, I completely embraced using AngularJS UI router which you can use to manage views without modifying the URL which when working inside a SharePoint page is a beneficial state. Given that I wasn’t using either thing that made the custom angular implementation worthwhile I decided to adjust my architecture so I could leverage adal.js in the most efficient way possible.
<h2>Simplification</h2>
The new simper method relies on 3 things.  
<b>The first</b>, is leftover, and that is configuring AngularJS HTML5 mode, which as shown below (and shown in Part 2) is done in the module configuration.
<pre class="lang:js decode:true">
//Module
angular.module("ReviewApp", ["ui.router", 'officeuifabric.core','officeuifabric.components', "SympLogService", "Message", "ReviewDataService", "ReviewVMService"])
    .config(uiRouteConfiguration)

//config function, that sets html5Mode -- other code and injections are used to configure the ui.router module
function uiRouteConfiguration($stateProvider: angular.ui.IStateProvider, $urlRouterProvider: angular.ui.IUrlRouterProvider, $locationProvider: angular.ILocationProvider) {
    $locationProvider.html5Mode({
        enabled: true,
        requireBase: false
    }).hashPrefix('!');

    $stateProvider
        .state('default', {
            template: '<message></message><dashboard-view></dashboard-view>'
        }).state('review', {
            template: '<message></message><performance-review></performance-review>'
        });

    //Initializes state to default, without changing the URL
    $urlRouterProvider.otherwise(function($injector) {
        let $state = $injector.get('$state');
        $state.go('default');
    })
}
</pre>
<b>The second</b> aspect is making sure the user is logged in when the page is loaded.  When using ngRoute it’s imperative that on any route that will utilize the adal tokens the application make sure the user is logged in first. Given a user could navigate directly to a route then you needed to manage for that.  When using the UI router, you only have 1 route and many views.  So, I only need to make sure the “container” or “main” view verifies the user’s login. This simplifies things a lot, but I still want to make that implementation as modular as possible. In this case I’m going to implement the verification function in my view model and then call it from the main components $onInit function (part of AngularJS components, introduced in v1.5) which loads when the component is first run. That way I can trap the various page loads that happen during the implicit flow process.  
<i>Note: This code is using AngularJS $q, depending on your implementation you may want to consider a more modern <a href="https://blog.mariusschulz.com/2016/12/09/typescript-2-1-async-await-for-es3-es5" target="_blank">async/await</a> implementation</i>
<h3>View</h3>
<pre class="lang:ts decode:true">
    $onInit(): void {
        this.reviewVM.adalHandler(this.adalAuthContext, window.location.hash).then((result) => {
            if(result){
                //.... continue initializing your component
            }
        });
    }
</pre>
<h3>View Model</h3>
<pre class="lang:ts decode:true">
    public adalHandler(adalAuthContext: any, hash: string): angular.IPromise<any> {
        let d = this.$q.defer();

        let isCallback: boolean = adalAuthContext.isCallback(hash);

        if (isCallback && !adalAuthContext.getLoginError()) {
            adalAuthContext.handleWindowCallback();
            d.resolve(false);
        }else{
            let user = adalAuthContext.getCachedUser();
            if (!user) {
                //Log in user
                adalAuthContext.login();
                d.resolve(false);
            }else{
                d.resolve(true);
            }
        }

        return d.promise;
    }
</pre>
<b>The final</b> piece is acquiring the token which needs to be handled at our model layer. Our login function retrieves the token for us and placed it in the cache, but we still need to retrieve it whenever we want to make a call to one of our adal endpoints.  To do this we create a promise scenario that retrieves the value from the cache and/or acquires a new one if necessary.  Then a special base class for making the $http call and appending the ADAL token rounds out the implementation.
<h3>Model</h3>
<pre class="lang:ts decode:true">
    //Function to get token from cache
    private getAuthToken(endpoint): angular.IPromise<any> {
        let d = this.$q.defer();

        //Read the token from the cache
        let tokenCache = this.adalAuthContext.getCachedToken(endpoint);

        if (tokenCache == undefined) {
            //If token is undefined, then call AAD to get a new token
            this.adalAuthContext.acquireToken(endpoint, function (error, token) {
                if (error || !token) {
                    d.reject(error);
                }
                else {
                    d.resolve(token);
                }
            });
        } else {
            d.resolve(tokenCache);
        }
        //Return a promise for acquiring token
        return d.promise;
    };

    //Base function for making MSGraph calls with auth token appended to header
    private getAdal(url: string, endpoint: string, blob: boolean = false): angular.IPromise<any> {
        let d = this.$q.defer();

        //Must pass the endpoint, not the full url
        this.getAuthToken(endpoint).then((token) => {
            let httpConfig: any = {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Authorization': "Bearer " + token
                },
                url: url
            };
            if (blob)
                httpConfig.responseType = "blob";
            d.resolve(this.$http(httpConfig));
        });

        return d.promise;
    }
</pre>
<h2>Summary</h2>
As you can see this is really clean and straight forward and pushes the complexities of accessing the MSGraph into the background so you can get on with creating a great solution.  Happy Coding!

]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>436</wp:post_id>
      <wp:post_date>
        <![CDATA[2017-08-30 08:25:59]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2017-08-30 13:25:59]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2018-01-09 09:54:23]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2018-01-09 14:54:23]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[extending-sharepoint-with-adal-and-the-microsoft-graph-api-part-4-the-extension]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="rest">
        <![CDATA[REST]]>
      </category>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="category" nicename="microsoft-graph-api">
        <![CDATA[Microsoft Graph API]]>
      </category>
      <category domain="series" nicename="extending-sharepoint-with-adal-and-the-microsoft-graph-api">
        <![CDATA[Extending SharePoint with ADAL and the Microsoft Graph API]]>
      </category>
      <category domain="category" nicename="typescript">
        <![CDATA[TypeScript]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[Extending SharePoint with ADAL and the Microsoft Graph API – Part 4 (The Extension)]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_series_part]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[4]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wpas_done_all]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[467]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>109</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Office 365 August Updates; DSC and SharePoint; VMware Cloud on AWS vs. Microsoft Azure Stack]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://community.bamboosolutions.com/blogs/sharepoint-daily/archive/2017/09/01/office-365-august-updates-dsc-and-sharepoint-vmware-cloud-on-aws-vs-microsoft-azure-stack/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[104.196.236.41]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2017-09-01 08:05:06]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2017-09-01 13:05:06]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] Extending SharePoint with ADAL and the Microsoft Graph API – Part 4 (The Extension) (Veni, Vidi, Vici) When I last left you (in Part 3) we had completed the round-trip journey that is learning all the facets to accessing the Microsoft Graph API (MSGraph) through an Azure Application and the ADAL.js library. A significant portion of our time was spent simply on the different ways to leverage ADAL.js depending on the framework you were using. In this next installment we’re going to go one step further and streamline our implementation of ADAL, in AngularJS specifically, but with broader implications to any web based framework. [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1504271107.052668094635009765625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1504283359.0597629547119140625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Azure Function Development-Deployment Strategy]]>
      </title>
      <link>https://julieturner.net/2017/09/azure-function-development-deployment-strategy/</link>
      <pubDate>Tue, 05 Sep 2017 15:15:50 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/?p=441</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<a href="http://julieturner.net/wp-content/uploads/2017/08/VS.jpg"><img src="http://julieturner.net/wp-content/uploads/2017/08/VS-1024x365.jpg" alt="" width="660" height="235" class="aligncenter size-large wp-image-444" /></a>
There will be some that find what I’m about to say entirely obvious.  For those that don’t this is a great way to think about development when the terminology changes but really everything stayed the same.  Azure Functions are billed as “serverless computing”, and as I’m sure most of you have figured out already, all this really means is that the Azure extrapolates the complexity of managing the hardware and infrastructure that allows your code to execute.  That extrapolation allows you the developer to focus on the functionality of your code, not the details of how you’re going to deploy it. <i>Note: There are obviously going to be limitations and you should make sure you understand them so you’re not blindsided.</i>

The way that most people talk about these functions is to discuss implementing one individual function and how to go about doing that. This is wonderfully useful, however today I want to discuss the idea of having multiple Azure functions that may or may not share code and that are fully managed using some type of code repository (GitHub or VSTS or <i>MyCodeRepo</i>).  My example revolves around technology, that for better or worse seems to have become near and dear to my heart, Azure Applications, and how we can leverage them to get work done against O365/SharePoint Online that the removal of farm/sandbox solutions has made prohibitively difficult.

The goal is to be able to have a set of functions that do work against our SharePoint tenant.  How they are triggered (HTTP Trigger, Timer Trigger, etc) is irrelevant, what is relevant is that I want to leverage the same Azure Application and its corresponding certificate, as well as some common code for all the functions.

What may not be entirely obvious to some is that the Azure App Service that holds all your functions is just a directory at “Home” + \site\wwwroot\ where Home is an environment variable that in my instance works out to D:\. Underneath wwwroot is a folder for each of your functions.  So, thinking in that way it might be obvious that if we want to share something like a certificate we could upload it to wwwroot and thereby all the functions could access it. To see what your own directory structure looks like, from your App Service, click on Platform Features, and then on “App Service Editor” which will show you the file/folder structure of your “serverless” server.

<a href="http://julieturner.net/wp-content/uploads/2017/08/AppServiceFeatures.jpg"><img src="http://julieturner.net/wp-content/uploads/2017/08/AppServiceFeatures-1024x577.jpg" alt="" width="660" height="372" class="aligncenter size-large wp-image-443" /></a>

<a href="http://julieturner.net/wp-content/uploads/2017/08/AppServiceEditor.jpg"><img src="http://julieturner.net/wp-content/uploads/2017/08/AppServiceEditor-1024x618.jpg" alt="" width="660" height="398" class="aligncenter size-large wp-image-445" /></a>

To make development even simpler VS2017 Enterprise edition offers us a lot of great tooling for building Azure functions.  Now that I add this in the mix you can see from the screenshot at the top of this post, that it’s pretty easy for me to build a project that includes all of my Azure functions, plus my version of <a href="https://bob1german.com/2017/06/24/az-func-csom/" target="_blank">Bob German’s csomHelper class</a> (and if you want to know how to implement accessing your SharePoint online environment in the way I'm referencing in this post, be sure to read his entire series), and the .pfx file that I can then share between these functions.  

BONUS, I can check all this code into my code repo and share the work load between multiple developers. 

2x BONUS, I get “publish” functionality from Visual Studio that deploys all my compiled code up to the App Service making it ready to run.

Powerful stuff!

<h3>Update</h3>
In a recent discussion with <a href="https://twitter.com/mikaelsvenson">Mikael Svenson</a>, he was wondering if I was referring to Visual Studio publishing or automated deployment from a code repository... good point of clarification thanks Mikael! In the case of this post it was the former as more of a getting started type scenario. So, even though I don't address it specifically here there are ways to automate the deployment of your code to Azure on commit. Your options are continuous deployment from VSTS, GitHub, or Bitbucket as well as trigger deployments from OneDrive, DropBox, and external Git. 

<a href="http://julieturner.net/wp-content/uploads/2017/09/DeploymentSources.jpg"><img src="http://julieturner.net/wp-content/uploads/2017/09/DeploymentSources.jpg" alt="" width="630" height="436" class="aligncenter size-full wp-image-479" /></a> 

I did a quick walk through to set it up against my GitHub repo and couldn't believe how easy it was, to start, navigate to Deployment options under Code Deployment section on the Platform Features screen of your App Service. A simple wizard will get you up and running.]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>441</wp:post_id>
      <wp:post_date>
        <![CDATA[2017-09-05 10:15:50]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2017-09-05 15:15:50]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2018-01-05 11:30:31]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2018-01-05 16:30:31]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[azure-function-development-deployment-strategy]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="category" nicename="alm">
        <![CDATA[ALM]]>
      </category>
      <category domain="category" nicename="azure-functions">
        <![CDATA[Azure Functions]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[529]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wpas_done_all]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
    </item>
    <item>
      <title>
        <![CDATA[SharePoint REST Date/Time Updates]]>
      </title>
      <link>https://julieturner.net/2017/11/sharepoint-rest-datetime-updates/</link>
      <pubDate>Mon, 06 Nov 2017 20:25:15 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/?p=522</guid>
      <description></description>
      <content:encoded>
        <![CDATA[A recent comment on my blog post “<a href="http://julieturner.net/2017/04/sharepoint-time-is-not-your-time-is-not-their-time/" rel="noopener" target="_blank">SharePoint time, is not your time, is not their time.</a>” has prompted me to create a short addendum post that specifically references updates and how your thinking might differ from displaying SharePoint date/time values. To recap our example, I was discussing how to manipulate the date values to have your client-side code mimic (or not) the regional settings of your SharePoint site. The question was raised about how to deal with dates when doing POST to a SharePoint list or library from your client-side code.

The answer, as usual, is it depends. It depends on what exactly you want to have happen. Your choices are to ignore the time zone entirely and assume that people entering data into your site are working within the time zone of that site. Your second option is to convert the date/time from the user’s local time zone and have it converted to match the site they’re on. In this scenario the user would enter a time such as 3pm PST and if the site collection’s regional settings are EST then the date that would be saved would be converted to 6pm.

Compared to the hoops we had to jump through for displaying the time, this can potentially be significantly easier, but it would depend on how you're collecting your dates. So let me show you an example.

<a href="http://julieturner.net/wp-content/uploads/2017/11/sptimeupdate1.jpg"><img src="http://julieturner.net/wp-content/uploads/2017/11/sptimeupdate1.jpg" alt="" width="774" height="316" class="aligncenter size-full wp-image-523" /></a>

Note the image above. The first two entries are from our previous blog post, so we’ll ignore those. The next one titled <em>“Item Mon Nov 06…. (Eastern Standard Time)”</em> was the first test done with the time zone setting of the computer left at EST which matches the sites regional settings*. In almost any way we would POST these dates they're going to work out ok, so I'm going to ignore that scenario. The next three entries are the interesting ones. After changing the OS's time zone to PST I then did REST POST call to create a new record in that list, the entry outlined with a red box. The date/time I used was the string value of the input box that I set to 11/6/2013 3:00 PM. In code that values looked like:
<pre class="lang:text decode:true">
2017-11-06T15:00
</pre>
The second POST to the list used a string value of the input box but after I converted that string value to a JavaScript Date object, ergo the value looked like:
<pre class="lang:text decode:true">
2017-11-06T23:00:00.000Z
</pre>
Which is UTC +8 hours for the PST offset. I didn’t do anything fancy to make this happen I simply assigned the JSON object that would be in my POST payload to the date object and then the call to JSON.stringify function uses the toISOString() to convert the Date object into a string, ergo the date being passed to SharePoint is in UTC.

<pre class="lang:javascript decode:true">
var newDate = document.getElementById("newDateTimeLocal").value;
var itemDate = new Date(newDate);
var item = {Title: "Item " + (new Date()).toString(), ItemsDate: itemDate};
</pre>

So, finally what happens if I have a date object but you want the first result, which was the result of passing a string without the time zone information.  That’s where you have to go back to our regional trickery and manipulate the time by the offset. So, in the third entry, outlined in blue, I set the time to be offset by the regionalOffset – localOffset.

<pre class="lang:javascript decode:true">
var localTime = itemDate.getTime();
var regionTimeoffset = (SPDV.TimeZone.Information.Bias + SPDV.TimeZone.Information.StandardBias) * 60000;
var localTimeoffset =  itemDate.getTimezoneOffset() * 60000;
itemDate.setTime(localTime + (regionTimeoffset-localTimeoffset));
</pre>

Hopefully that add a bit more clarity to your options. Happy coding!

<em>*Regional settings for the site collection are set to Eastern Time, the original blog post was written when we were in daylight savings time and so the code reflected adjustments for that. Currently the clocks have switched and we’re in eastern standard time ergo I’m going to use the StandardBias (which is 0) instead of the DaylightBias.</em>

]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>522</wp:post_id>
      <wp:post_date>
        <![CDATA[2017-11-06 15:25:15]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2017-11-06 20:25:15]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2018-01-11 09:33:54]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2018-01-11 14:33:54]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[sharepoint-rest-datetime-updates]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="category" nicename="rest">
        <![CDATA[REST]]>
      </category>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="category" nicename="2010">
        <![CDATA[2010]]>
      </category>
      <category domain="category" nicename="2016">
        <![CDATA[2016]]>
      </category>
      <category domain="category" nicename="sharepoint-version">
        <![CDATA[SharePoint Version]]>
      </category>
      <category domain="category" nicename="list">
        <![CDATA[List]]>
      </category>
      <category domain="category" nicename="library">
        <![CDATA[Library]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[527]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wpas_done_all]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>184</wp:comment_id>
        <wp:comment_author>
          <![CDATA[nayana]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[nayana.ayachit@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[171.79.5.44]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-12-17 10:09:27]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-12-17 15:09:27]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Julie,

Thanks for sharing these articles on sharepoint timezone issues, there is not much information on MSDN itself about the ResionalSettings API and your articles are a big help.
However, I am a bit confused about the bias, DaylightBias and StandardBias as to when to use all 3 in calculations and when to NOT include DaylightBias.
For example, when I site is in EST and my javscript code is runnign in UTC, in December, I would not want to use DaylightBias (-60) in my calculations and only using Bias (300) would give me the desired results. But in April, I'll have to use DaylightBias as well.
So how do I let the javascript code know when to include one or more of these 3 values exposed as RegionalSettings/timeZone and when not to include them?]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1545059367.4846179485321044921875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1545063596.7671830654144287109375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>186</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-12-17 11:22:10]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-12-17 16:22:10]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I believe that DaylightBias will only have a value in it when it should be applied, so you should just always include it. As I understand it, although I don't know of a scenario where it would have a value, apparently you should include StandardBias as well.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>184</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1545063730.6602900028228759765625;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>625</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Kevin Lowe]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[klowe2112@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[108.171.132.171]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-02-10 18:56:35]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-02-10 23:56:35]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Julie - When doing a REST call using listdata.svc to a calendar, my JSON is returning StartTime in milliseconds, which is great, and fine.  Here's the weird part...  I have in my test one item that is set as starting at midnight.  I have another that is an "all day event".  They return the same milliseconds in Postman, but if I do the query with a filter for ge datetime'2020-02-09T00:00:00.000Z' the item marked as an all day event doesn't return in the results.  I can't see any difference at all in what is stored, so I'm wondering what the difference would be between the two types of entries?]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1581378995.9880421161651611328125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1581444013.1354839801788330078125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>626</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[167.220.152.214]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-02-11 13:06:41]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-02-11 18:06:41]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[My questions would be the following:
1. Why are you using the listdata.svc instead of the rest endpoints?
2. What version of SharePoint are we talking about?
3. I'm fairly sure that recurring events aren't actually storing time in the date field so likely you're having issues with filtering, but I wouldn't use the listdata.svc so I'm not sure how to address your question from that perspective.
4. Is this a new solution, if you're on SPO then utilizing classic things like events in the calendar list time is probably inadvisable from an architectural point of view, but if it's existing I would switch gears and a, make a simple rest call to the calendar list to get a particular item and then look at your payload closely to try and determine how it might be storing a recurring event differently than a regular event and b, use <a href="https://pnp.github.io/pnpjs/" rel="nofollow ugc">PnPJS</a> to make simpler work of the call itself.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>625</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1581444401.637423992156982421875;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>627</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Kevin Lowe]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[klowe2112@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[108.171.132.171]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-02-11 17:09:17]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-02-11 22:09:17]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Julie!  Thanks for thinking about this one.  We're on SP2013 Enterprise CAL, on prem.  This isn't really about recurrence, as the application isn't one where we allow recurring events.  Here's the broader journey I've been on...

.../_api/web/lists/getByTitle('Web Services PTO')/items?$select=Id,Title,EventDate,EndDate,fAllDayEvent&amp;$filter=(EventDate ge '2020-02-10T00:00:00.000Z') and (EndDate le '2020-03-07T21:56:22.413Z')

This endpoint returns the error "The field EventDate of type DateTime cannot be used in the query filter expression."

Led to this stackexchange...

https://sharepoint.stackexchange.com/questions/59521/the-field-eventdate-of-type-datetime-cannot-be-used-in-the-query-filter-expr

Which lead to looking into using listdata.svc as a solution instead...

That seems to work, except that I'm not able to return items marked as all day events.  If I create an normal scheduled event starting at midnight, it does show up in the query.  Setting the filter to the day before, they both show up and return the exact same UTC time...  

I also found this, which is the closest I get to a reason, but this is not an anonymous access site, and still doesn't explain for me the difference between the items and why one returns and not the other.
http://neganov.blogspot.com/2013/06/filtering-items-by-date-range-using.html

Talk about rabbit holes!]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>626</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1581458957.3095500469207763671875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1581462521.5894339084625244140625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>628</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-02-11 18:24:49]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-02-11 23:24:49]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Given the platform, I now get why you're trying to use the listdata.svc. Unfortunately, I would have to spin up a test environment to thoroughly research the issue. My guess by looking at some other blog posts is that maybe you have the wrong field. I see others querying for StartTime and EndTime. I highly suggest you paste a rest query in the browser and get all the information for one list item (of each type) so you can parse what all the field names are and what data is stored in them and then experiment from there. But in general, it looks like you're on the right path.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>627</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1581463489.3453910350799560546875;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>629</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Kevin Lowe]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[klowe2112@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[108.171.132.171]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-02-12 09:03:38]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-02-12 14:03:38]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thanks, Julie - that makes me feel better.  The column names are weird for ootb calendars, in listdata.svc, they are accessible as StartDate and EndTime, but using rest service, they are EventDate, and EndDate.  Lots of workarounds and hacks out there.  I'm going to chalk it up to a bug MS never decided to fix for some reason and just auto-delete old events, pull all events in my rest call instead of filtering, and use JavaScript to filter what I want.  It's a small list, so it should work.  Really appreciate you giving a thought!]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>628</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1581516219.216825008392333984375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Conquer your dev toolchain in 'Classic' SharePoint - Part 1]]>
      </title>
      <link>https://julieturner.net/2018/01/conquer-your-dev-toolchain-in-classic-sharepoint-part-1/</link>
      <pubDate>Fri, 05 Jan 2018 16:20:59 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/?p=553</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<style>
.single-thumbnail{background-position: top;}
</style>
Last year, around this time, <a href="http://sympmarc.com/" rel="noopener" target="_blank">Marc</a> and I agreed we should write a blog series on our development process.  As often happens good intentions get buried in other commitments, but I’ve finally managed to circle back on this topic which I’m finding has become more important than ever. Over the last year the SharePoint Framework has taken off. Although it still doesn’t support the paradigm that I most often am developing for - the full-page app hosted in SharePoint - I still think it’s a great model for development. At this point Modern has come far enough in its parity with Classic that Marc and I are recommending to our clients on or going to Office 365 to go Modern first, and then fall back if you’re impeded.

That said, we know from our client conversations that a significant number of organizations are still using legacy versions of SharePoint, some all the way back to the 2007 version.  There is absolutely nothing wrong with that if it’s working for your organization, but I suspect some people are feeling a little left out in the cold with regard to how they fit into the conversation when SharePoint Framework is at this time only for SharePoint online or for SharePoint 2016 with Feature Pack 1. Further, I suspect many on these older versions envision a time in the not too distant future where they will be migrating to either a newer/newest version of the on premises product or to Office 365. The point that I’m going to make in this series is that <strong>even if you’re not using the SharePoint Framework you can create your own process that mimics the toolchain and propels your development from a bit of a hack into a more formalized process.</strong> Not only does this help your organization; it helps you become more marketable in today’s SharePoint development environment.
<h2>Formalize for more foolproof administration</h2>
Formalizing the toolchain is really all about bringing legitimacy to the client-side software development lifecycle (SDLC).  Once you get in the groove of using one it adds very little overhead to your development but does formalize it in a way that makes it easier to document, update, backup, deploy, and maintain.  Who doesn’t want that?
<h2>Understand the key aspects</h2>
There are so many aspects to an SDLC; development environment, authoring, testing, deployment, documentation, change management, maintenance.  I will focus on a few key aspects of the development environment, authoring, deployment, and change management.  The point of sharing what we do here at <a href="http://sympraxisconsulting.com/" rel="noopener" target="_blank">Sympraxis</a> is to give you food for thought to build your own system that works for you and your organization.
<h2>Pick your own adventure</h2>
My current plan (which may change) will be to add the following posts to this series, “Deploying code”, “Bundling Code”, “Adding Typescript, SCSS, and beyond”.  Each one of them will introduce a piece of our current process which you can choose to use or bypass depending on your needs.  But before we even go there I need to introduce the toolchain and get you started.  I’m not going to dig too deep into the step by step process of setting up your development environment because there is a fantastic <a href="http://bit.ly/2D1Jkob" rel="noopener" target="_blank">free resource</a> available which does this better than I could do in a blog post.  (Navigate to <a href="http://bit.ly/2D1Jkob" rel="noopener" target="_blank">Voitanos'</a> site, go to the “Store”, click “Learn More” for the Mastering the SharePoint Framework course and then scroll down and sign up for the Free Starter Bundle.)
<h2>Set up your Development Environment</h2>
By now most of you have seen the toolchain comparison chart:
<a href="http://julieturner.net/wp-content/uploads/2018/01/Toolchain.png"><img src="http://julieturner.net/wp-content/uploads/2018/01/Toolchain.png" alt="" width="500" height="281" class="aligncenter size-full wp-image-558" /></a>
<div style='text-align: center;'>Image by <a href="http://bit.ly/2D1Jkob" rel="noopener" target="_blank">Voitanos'</a></div>
To start off you need to install <a href="https://nodejs.org/en/" rel="noopener" target="_blank">NodeJS</a> for the toolchain.  It’s basically a runtime version of Chrome’s JavaScript engine which allows you to run JavaScript-based code the same way you’d execute a C# console application and that’s why the image above depicts it as the equivalent of the .NET framework. 

One of the mistakes I made when I first started working with this toolchain was that I only installed NodeJS. Let me be clear: this is one of those places where <em>it depends</em>. I’m a consultant, I do a lot of different projects for a lot of different people and not all of them are even on SharePoint, let alone the SharePoint Framework. I benefit significantly from using a tool called the <a href="https://github.com/creationix/nvm/blob/master/README.md" rel="noopener" target="_blank">Node Version Manager</a> (NVM).  In the <a href="http://bit.ly/2D1Jkob" rel="noopener" target="_blank">Voitanos'</a> resource I point you to above, Andrew Connell explains in detail how to install NVM depending on if you’re on a Mac or a PC.

What NVM allows me to do is easily switch between different versions of NodeJS. It’s like when you create a Visual Studio project and you pick which version of the .NET framework you want to target. The SharePoint Framework requires you to target a specific version of NodeJS, and you may want to play around and do things with other versions of NodeJS.  By using NVM this becomes simple as does testing the upgrade when you want to move your work to a newer version of NodeJS.  You can always go back and add it later, but it’s obviously going to be a bit of a pain, so I suggest you do the installation up front.

After you get NodeJS (and NVM if you’re using it) installed then what?  NodeJS goes hand in hand with NPM or <a href="https://www.npmjs.com/" rel="noopener" target="_blank">Node Package Manager</a> (functionality) and is basically a command line version of NuGet package manager which we’re used to using in Visual Studio.  NPM is installed when you install NodeJS, however, you will probably want to update it which you do by referencing itself, in other words tell NPM to update NPM. NPM is coordinated for a project by the <a href="https://docs.npmjs.com/files/package.json" rel="noopener" target="_blank">package.json</a> file which tells NPM which packages you need for the runtime and which packages you need for development.

There are basically three “locations” for NPM packages to be installed.  Globally (-g), <a href="https://docs.npmjs.com/files/package.json#dependencies" rel="noopener" target="_blank">Dependencies</a>, <a href="https://docs.npmjs.com/files/package.json#devdependencies" rel="noopener" target="_blank">devDependencies</a>. For the most part, when doing SharePoint work, I only use NPM for dev dependencies and use a CDN to reference any runtime dependencies. For typescript my dev dependencies would also include the typings for any of the runtime libraries I’ll be using - more on that later.  Because I do SharePoint Framework development as well I have two things installed globally, one is “yo” which is the Yeoman Generator. From our graphic you can see it's mapped to the Visual Studio block because yo provides the same functionality as Visual Studio project templates.  It’s just a way for you to start your project with much of the scaffolding already in place.  This is what the SharePoint Framework uses to get your started, so in addition to yo I also have the @microsoft/generator-sharepoint@1.3.4 package which is the yeoman template for a SharePoint Framework project.

Back to NVM, each version of NodeJS has its own “global” NPM package area.  In the version of NodeJS that supports the SharePoint Framework (at the time of this post v6.x) I’ve installed yo globally. Since I don’t really use it for some of my other development projects in the more recent version of NodeJS I have installed (at the time of this post v8.9.4) I didn’t bother installing yo.  Long story short, if you’re not doing SharePoint Framework development you really don’t need to install anything globally.

At this point you’re ready to start coding, and for that you can use whatever editor (or IDE) you feel most comfortable with.  A popular choice (and free) is <a href="https://code.visualstudio.com/" rel="noopener" target="_blank">Visual Studio Code</a>. It works well and is constantly being updated and maintained.  I use it for all my demo work as well as some production coding.  Marc and I both like <a href="https://www.jetbrains.com/webstorm/" rel="noopener" target="_blank">WebStorm</a> from JetBrains.  I tried it because I got it free as a benefit of my Microsoft MVP,  and I stayed with it because I like the IDE aspects of it.  Visual Studio is an obvious choice, but I find it a little cumbersome with its folder-based project structure, and you’ll have to run a command line terminal separately where both Visual Studio Code and WebStorm have them built in.  The are many, many other editors and IDE’s out there, so use the one that works best for you.

At this point, for everything else I install, I do so at the project level.  The first NPM package I would add to your development dependencies is Gulp.  Gulp is a task runner and is the equivalent of the MSBuild runtime that is used when you’re in Visual Studio and compiling code.  Another mistake I made early on was to install gulp globally, which came back to bite me as I found that over time updated packages I was using ended up conflicting with the older version of gulp I had installed globally. Again, because I’m a consultant and work on many different projects in many, many different environments this is more critical to me.  I need to be sure that I can go back to an older project and just have it work without having to wrangle with the versions of the various packages I have in my environment.  You can make your own choices depending on the type of work you’re going to be doing.

I hope this has been a helpful introduction to getting started with a more formalized client-side toolchain and dev environment that accompanies it.  The next post in this series will go into what the basic package.json and gulpfile.js files look like in my basic SharePoint development scenario which supports automatic deployment to a SharePoint library.
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>553</wp:post_id>
      <wp:post_date>
        <![CDATA[2018-01-05 11:20:59]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2018-01-05 16:20:59]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2018-08-08 13:25:03]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2018-08-08 18:25:03]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[conquer-your-dev-toolchain-in-classic-sharepoint-part-1]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="category" nicename="javascript">
        <![CDATA[Javascript]]>
      </category>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="category" nicename="2010">
        <![CDATA[2010]]>
      </category>
      <category domain="category" nicename="alm">
        <![CDATA[ALM]]>
      </category>
      <category domain="category" nicename="development">
        <![CDATA[Development]]>
      </category>
      <category domain="category" nicename="2016">
        <![CDATA[2016]]>
      </category>
      <category domain="category" nicename="typescript">
        <![CDATA[TypeScript]]>
      </category>
      <category domain="category" nicename="2007">
        <![CDATA[2007]]>
      </category>
      <category domain="series" nicename="conquer-your-dev-toolchain-in-classic-sharepoint">
        <![CDATA[Conquer your dev toolchain in 'Classic' SharePoint]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[571]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wpas_done_all]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_series_part]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>126</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Andrew Connell]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[swamplander@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[208.189.221.108]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-01-05 11:54:24]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-01-05 16:54:24]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thanks for the shout out Julie! I also offer a FREE 10-day email ramp up course here: https://www.voitanos.io/p/understanding-the-sharepoint-framework-development-toolchain-email-course]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1515171264.569078922271728515625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[wordpress]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://1.gravatar.com/avatar/412db45fc5925ac05f8b94f3cf627650?s=25&d=https%3A%2F%2Fs2.wp.com%2Fwp-content%2Fmu-plugins%2Fhighlander-comments%2Fimages%2Fwplogo.png&r=G]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[133009307]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_wpcom_id_sig]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[b4086e260b422bed8f2ccc978dab8847f9465fec]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1515171430.9081280231475830078125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>127</wp:comment_id>
        <wp:comment_author>
          <![CDATA[David E. Patrick (@DavidEPatrick)]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[DavidEPatrick@twitter.example.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://twitter.com/DavidEPatrick</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[108.15.80.42]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-01-05 12:52:10]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-01-05 17:52:10]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Great summary!]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1515174730.594994068145751953125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[twitter]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[http://pbs.twimg.com/profile_images/470526942542716928/CwtGzTAI_normal.jpeg]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[16054559]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1515174876.0018661022186279296875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>128</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Iani Tararache]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[iani.tararache@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://gravatar.com/ianitararache</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[165.225.72.79]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-01-08 04:34:23]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-01-08 09:34:23]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Yes, been waiting for this series! Please keep them coming.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1515404063.4265339374542236328125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1515426259.826776027679443359375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>129</wp:comment_id>
        <wp:comment_author>
          <![CDATA[SharePoint January 2018 Cumulative Updates; SharePoint Tasks Lists vs. Sticky Notes; Meltdown &amp; Spectre Patches Slow Computers]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://community.bamboosolutions.com/blogs/sharepoint-daily/archive/2018/01/10/sharepoint-january-2018-cumulative-updates-sharepoint-tasks-lists-vs-sticky-notes-meltdown-spectre-patches-slow-computer</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[104.196.236.41]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-01-10 09:01:19]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-01-10 14:01:19]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] Conquer your dev toolchain in ‘Classic’ SharePoint – Part 1 (Veni, Vidi, Vici) Last year, around this time, Marc and I agreed we should write a blog series on our development process. As often happens good intentions get buried in other commitments, but I’ve finally managed to circle back on this topic which I’m finding has become more important than ever. Over the last year the SharePoint Framework has taken off. Although it still doesn’t support the paradigm that I most often am developing for – the full-page app hosted in SharePoint – I still think it’s a great model for development. At this point Modern has come far enough in its parity with Classic that Marc and I are recommending to our clients on or going to Office 365 to go Modern first, and then fall back if you’re impeded. [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1515592879.90320301055908203125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1515593020.5000131130218505859375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Conquer your dev toolchain in 'Classic' SharePoint - Part 2]]>
      </title>
      <link>https://julieturner.net/2018/01/conquer-your-dev-toolchain-in-classic-sharepoint-part-2/</link>
      <pubDate>Tue, 09 Jan 2018 14:47:29 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/?p=573</guid>
      <description></description>
      <content:encoded>
        <![CDATA[In the <a href="http://julieturner.net/2018/01/conquer-your-dev-toolchain-in-classic-sharepoint-part-1/" rel="noopener" target="_blank">first post</a> in this series I discussed some of the benefits of formalizing your client-side development process and then a bit about starting the process of tooling up. A common scenario to develop our own client-side solutions in SharePoint is to point a Content Editor (CEWP) or Script Editor (SEWP) web part at our custom html, css, and js files that are sitting in a document library somewhere in our environment. In this post I want to dive into the most basic implementations of a development toolchain that will automatically deploy those files into a location in SharePoint. This does not mean, and in most cases, should not mean, “production”.  What it means is that while you’re developing your code any changes you make will be automatically uploaded to a location that you already have your CEWP or SEWP pointed to, that way when you refresh the page your custom solution will refresh with the latest version of your code. To accomplish this, we’re going to use <a href="https://gulpjs.com/" rel="noopener" target="_blank">Gulp</a> which is a JavaScript based task runner similar to the build process that exists in Visual Studio.

As I said, I’m going to be sharing with you now the most basic <a href="https://docs.npmjs.com/files/package.json" rel="noopener" target="_blank">package.json</a> and <a href="https://github.com/gulpjs/gulp" rel="noopener" target="_blank">gulpfile.js</a> to configure this process.  In addition, I’ve created 2 settings files, one has the project settings and the other has security and local configuration values that my gulp file will use.  The reason I create two files is that one, settings.json, I check into our local source control and the other, settings_security.json, I do not.  This way in order for me to get up and running with a project that someone else worked on all I have to do is create a local copy of settings_security.json and run “npm i” which will install all the dependencies I added to my package.json file.
<h2>Using REST to move your files into SharePoint – SharePoint 2013 and beyond</h2>
First let’s look at our package.json file for deploying files to SharePoint 2013 -> Office 365.  This package.json and it’s corresponding gulpfile.js work with any SharePoint environment that supports the REST apis.
<pre class="lang:json decode:true">
{
  "name": "deploydemo",
  "version": "1.0.0",
  "description": "Sympraxis Conference Demos - CDN Demo",
  "license": "UNLICENSED",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/juliemturner/deploydemo"
  },
  "devDependencies": {    
    "gulp": "~3.9.1",
    "gulp-cache": "~0.4.6",
    "gulp-watch": "~4.3.11",
    "map-stream": "~0.0.7",
    "spsave": "~3.1.0"
  }
}
</pre>
The only part of this file we’re going to discuss is the devDependencies section.  These are all the packages we’ll need to support our deployment.   I’ve linked to them and provided a very brief description.
<table style="width: 95%">
<tr>
<td style="width: 20%"><a href="https://gulpjs.com/" rel="noopener" target="_blank">gulp</a></td>
<td>The task runner</td>
</tr>
<tr>
<td><a href="https://www.npmjs.com/package/gulp-cache" rel="noopener" target="_blank">gulp-cache</a></td>
<td>Caches files so that we can tell if the file has changed and only upload if it has.</td>
</tr>
<tr>
<td><a href="https://www.npmjs.com/package/gulp-watch" rel="noopener" target="_blank">gulp-watch</a></td>
<td>Watches a particular set of files paths for changes.</td>
</tr>
<tr>
<td><a href="https://www.npmjs.com/package/map-stream" rel="noopener" target="_blank">map-stream</a></td>
<td>Provides the ability to pass each file that changed from the watch into spsave to be uploaded to SharePoint</td>
</tr>
<tr>
<td><a href="https://www.npmjs.com/package/spsave" rel="noopener" target="_blank">spsave</a></td>
<td>Uploads the file into a SharePoint library.</td>
</tr>
</table>
One other thing I’d like to point out in my devDependencies is the use of the ~ before the version number.  This is a modification I made purposefully, again due to run ins with older code getting updated and not working together very nicely.  The ~ tells npm that it should “Allows patch-level changes if a minor version is specified on the comparator. Allows minor-level changes if not.”  By default, when you use the ‘npm i’ to install a new package it will use the ^ range which “Allows changes that do not modify the left-most non-zero digit in the [major, minor, patch] tuple.”  What I’m basically saying is that I would go back to code I had written a year ago, pull it out of source control and do an ‘npm i’. Because most of the packages I had reference updated since then I would get the latest version per the ^ range rules.  What I found is I would often end up with breaking changes and it was super frustrating to go back and fix them for something that wasn’t broken to begin with, so I made this modification to all my package.json files.

Ok, so if you’ve run “npm i” then all of these dependencies (and their dependencies) should be installed in the node_modules subfolder.  Once that is complete we can use them by creating a gulpfile.js which is basically a JavaScript file that uses these packages and runs on our NodeJS “server”.  Start off by declaring variables that we'll use in our process.
<pre class="lang:javascript decode:true">
"use strict";
//Node v 6.12.0
var gulp = require('gulp');
var watch = require('gulp-watch');
var cache = require('gulp-cache');
var spsave = require('spsave').spsave;
var map = require('map-stream');

var settings = require("./settings.json");
var settingsSecurity = require("./settings_security.json");
</pre>
This first part of the file imports the packages that are required, all the ones we talked about and then imports the settings files that I mentioned.  The settings files look like the following:
<h3>settings.json</h3>
<pre class="lang:json decode:true">
{
    "projectname":"DeploymentDemo",
    "srcFiles": ["./client/*.html","./client/*.js", "./client/*.css"],
    "siteCollURL": "https://tenant.sharepoint.com/sites/sitecollection",
    "destFolder": "/Style%20Library/Folder"
}
</pre>
<table style="width: 95%">
<tr>
<td style="width: 20%">projectname</td>
<td>The project name should be unique as it’s used by the gulp-cache to generate the cache for the project, reuse will potentially have two projects using the same cache and the result will be unpredictable at best.</td>
<tr>
<td>srcFiles</td>
<td>This is an array of Globs that should be watched, see the primer for how to form the pattern matches for folder structure.</td>
<tr>
<td>siteCollURL</td>
<td>The URL for the site collection you want to upload the files to.</td>
<tr>
<td>destFolder</td>
<td>The site collection relative path to the library / folder you want the files uploaded to.</td>
</tr>
</table>
<h3>settings_security.json</h3>
<pre class="lang:json decode:true">
{
    "rootFolder": "/Code/Shire/GraphExtPOC",
    "username": "username@tenant.com",
    "pwd": "password"
}
</pre>
<table style="width: 95%">
<tr>
<td style="width: 20%">rootFolder</td>
<td>The root of the project relative to the drive letter (i.e. C:). A problem I’ve had in the past is that the rootFolder path is case sensitive.</td>
<tr>
<td>username</td>
<td>Either the O365 account (in the form of an email address) or for on premises environments the username below would take the form domain\username.</td>
<tr>
<td>pwd</td>
<td>The password for the username provided.</td>
</table>
You now have two options. You can either upload the files maintaining the relative folder structure of your source into the destination or you can flatten the relationship which puts all the files in the destination's root. Below I have two functions one maintains the folder structure and the other flattens it.  The idea here is that you get a listing of the files then pass them through the cache, then map the files that changed into a function call that passes each individual file to spsave which then uploads the file to the library.  Because I normally use the more advanced version that I’ll be showing in part 4, which pretty much creates only 1 file, I almost always use the flatten option.
<pre class="lang:javascript decode:true">
function makeHashKey(file) {
    return [file.contents.toString('utf8'), file.stat.mtime.toISOString()].join('');
}

gulp.task("copyToSharePointFolder",
    function () {
        gulp.src(settings.srcFiles, { base: settingsSecurity.rootFolder })
            .pipe(
                cache(
                    map(function(file, cb) {
                        spsave({
                                siteUrl: settings.siteCollURL,
                                checkinType: 2,
                                checkin: false
                            },
                            {
                                username: settingsSecurity.username,
                                password: settingsSecurity.pwd
                            },
                            {
                                file: file,
                                folder: settings.destFolder
                            }
                        );
                        cb(null, file);
                    }),
                    {
                        key: makeHashKey,
                        fileCache: new cache.Cache({ cacheDirName: settings.projectname + '-cache' }),
                        name: settingsSecurity.username + "." + settings.projectname
                    }
                )
            );
    }
);

gulp.task("copyToSharePointFlat",
    function () {
        gulp.src(settings.srcFiles, { base: settingsSecurity.rootFolder })
            .pipe(
                cache(
                    map(function(file, cb) {
                        var filePath = file.history[0].replace(file.cwd, '.');
                        spsave({
                                siteUrl: settings.siteCollURL,
                                checkinType: 2,
                                checkin: false
                            },
                            {
                                username: settingsSecurity.username,
                                password: settingsSecurity.pwd
                            },
                            {
                                glob: filePath,
                                folder: settings.destFolder
                            }
                        );
                        cb(null, file);
                    }),
                    {
                        key: makeHashKey,
                        fileCache: new cache.Cache({ cacheDirName: settings.projectname + '-cache' }),
                        name: settingsSecurity.username + "." + settings.projectname
                    }
                )
            );
    }
);
</pre>
Finally, we have the watch function that either calls the folder version or the flat version of our <em>copyToSharePoint</em> function.  Obviously if you have a preference you don’t need to keep both of these functions in your gulpfile, I’m just putting them both here for reference.
<pre class="lang:javascript decode:true">
gulp.task("watchFolder", function(){
    gulp.watch(settings.srcFiles, ["copyToSharePointFolder"]);
});

gulp.task("watchFlat", function(){
    gulp.watch(settings.srcFiles, ["copyToSharePointFlat"]);
});
</pre>
Now if you run “gulp watchFolder” or “gulp watchFlat” from the command interface node will run your gulp package which will keep watch on your folder structure and when you save a file spsave will upload it to your SharePoint site and if you refresh the page you’re updated code will be available. 

<h2>Using WebDAV to upload your files into SharePoint – SharePoint 2010 and below</h2>
Before we had OneDrive in all its current synchronization support glory it was very common for organizations to use WebDAV to give their users access to their SharePoint libraries via the windows explorer.  We can exploit that functionality within our development environment and the fact that Nodejs allows us to interact with the full file system since it’s running on our computer.  Basically, anything we have access to we can access via our gulpfile.  That said we’ll need slightly different tools for the process since instead of using a http post to upload our files to the SharePoint library we’re going to copy them to the server via WebDAV.  

First let’s modify our package.json file to include a new tool called vinyl-fs. This tool allows us to map files from a source location to a destination location.  There are a lot of options that you can use with this package, and if you want to dig further in please take a look at the <a href="https://www.npmjs.com/package/vinyl-fs" rel="noopener" target="_blank">documentation</a>.  To modify the package.json file you can either execute the ‘npm i vinyl-fs –save-dev’ or modify your package.json file directly to add the file to your devDependencies section and then run ‘npm i’ which will install any missing packages.  So in my package.json file devDependencies section I have added:
<pre class="lang:json decode:true">
"vinyl-fs": "~3.0.1"
</pre>
Now we need to modify our gulpfile.js to include a reference to vinyl-fs and to add a new version of our <em>copyToSharePoint</em> function that is specific for this legacy version.  First add a variable at the top of the file to reference vinyl-fs
<pre class="lang:javascript decode:true">
var vfs = require('vinyl-fs');
</pre>
Then add the following function which supports the WebDav path.
<pre class="lang:javascript decode:true">
gulp.task("copyToLegacySharePoint", function() {
    gulp.src(settings.srcFiles, { base: settingsSecurity.rootFolder })
        .pipe(
            cache(
                map(function(file, cb) {
                    var filePath = file.history[0].replace(file.cwd, '.');
                    console.log('Copying -- ' + file.path);
                    vfs.src([filePath]).pipe(vfs.dest(settings.destFolder));
                    cb(null, file);
                }),
                {
                    key: makeHashKey,
                    fileCache: new cache.Cache({ cacheDirName: settings.projectname + '-cache' }),
                    name: settingsSecurity.username + "." + settings.projectname
                }
            )
        );
});
</pre>
And finally, either modify or add an additional watch task that will utilize the legacy <em>copyToSharePoint</em> function
<pre class="lang:javascript decode:true">
gulp.task("watchLegacy", function(){
    gulp.watch(settings.srcFiles, ["copyToLegacySharePoint"]);
});
</pre>
Before you run your watch make sure to update your settings.json file to put the WebDav path as your destFolder. You can optionally map the WebDav folder as a drive using ‘net use’ and then reference the drive letter, just make sure to use forward slashes not backslashes.
<pre class="lang:json decode:true">
"destFolder": “//sp2010dev/DavWWWRoot/Shared%20Documents”
</pre>
<h2>Up Next</h2>
In the next installment I’ll be covering how to implement a basic version of <a href="https://webpack.js.org/" rel="noopener" target="_blank">Webpack</a> into your environment which will bundle all your html, css, and js into one file.]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>573</wp:post_id>
      <wp:post_date>
        <![CDATA[2018-01-09 09:47:29]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2018-01-09 14:47:29]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2018-03-20 06:44:42]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2018-03-20 11:44:42]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[conquer-your-dev-toolchain-in-classic-sharepoint-part-2]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="category" nicename="javascript">
        <![CDATA[Javascript]]>
      </category>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="category" nicename="2010">
        <![CDATA[2010]]>
      </category>
      <category domain="category" nicename="alm">
        <![CDATA[ALM]]>
      </category>
      <category domain="category" nicename="development">
        <![CDATA[Development]]>
      </category>
      <category domain="category" nicename="2016">
        <![CDATA[2016]]>
      </category>
      <category domain="category" nicename="sharepoint-version">
        <![CDATA[SharePoint Version]]>
      </category>
      <category domain="category" nicename="language">
        <![CDATA[Language]]>
      </category>
      <category domain="category" nicename="typescript">
        <![CDATA[TypeScript]]>
      </category>
      <category domain="category" nicename="2007">
        <![CDATA[2007]]>
      </category>
      <category domain="series" nicename="conquer-your-dev-toolchain-in-classic-sharepoint">
        <![CDATA[Conquer your dev toolchain in 'Classic' SharePoint]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[570]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wpas_done_all]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_series_part]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[2]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>130</wp:comment_id>
        <wp:comment_author>
          <![CDATA[SharePoint Online Usage Growing; SharePoint Pages Editing Capabilities; SharePoint Migration Tool Released]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://community.bamboosolutions.com/blogs/sharepoint-daily/archive/2018/01/11/sharepoint-online-usage-growing-sharepoint-pages-editing-capabilities-sharepoint-migration-tool-released/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[104.196.236.41]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-01-11 09:03:35]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-01-11 14:03:35]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] Conquer your dev toolchain in ‘Classic’ SharePoint – Part 2 (Veni, Vidi, Vici) In the first post in this series I discussed some of the benefits of formalizing your client-side development process and then a bit about starting the process of tooling up. A common scenario to develop our own client-side solutions in SharePoint is to point a Content Editor (CEWP) or Script Editor (SEWP) web part at our custom html, css, and js files that are sitting in a document library somewhere in our environment. In this post I want to dive into the most basic implementations of a development toolchain that will automatically deploy those files into a location in SharePoint. This does not mean, and in most cases, should not mean, “production”. What it means is that while you’re developing your code any changes you make will be automatically uploaded to a location that you already have your CEWP or SEWP pointed to, that way when you refresh the page your custom solution will refresh with the latest version of your code. To accomplish this, we’re going to use Gulp which is a JavaScript based task runner similar to the build process that exists in Visual Studio. [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1515679415.770328044891357421875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1515680222.6048719882965087890625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>131</wp:comment_id>
        <wp:comment_author>
          <![CDATA[resing]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[tom@resing.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://tomresing.com</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[131.107.174.102]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-01-11 13:52:20]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-01-11 18:52:20]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I learned a lot with this one. Had no idea you could save to SharePoint from gulp. Mind blowing. One question though, can you do this without storing a password in clear text? I see the dependency has an option that uses the client secret instead, just not sure if that applies to the gulp method you show: https://github.com/s-KaiNet/node-sp-auth/wiki/SharePoint-Online-addin-only-authentication]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1515696740.7595350742340087890625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[wordpress]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://2.gravatar.com/avatar/2de3a98faf483601499b609ecc27aa4c?s=25&d=https%3A%2F%2Fs2.wp.com%2Fwp-content%2Fmu-plugins%2Fhighlander-comments%2Fimages%2Fwplogo.png&r=G]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[3557387]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_wpcom_id_sig]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[0506326ee1db9dc77ae93a1bc131aef2f5c76910]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1515696955.89601898193359375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>132</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-01-11 14:07:19]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-01-11 19:07:19]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Glad you liked it! As you point out spsave takes a dependency on node-sp-auth, all it wants for it's second parameter is a credential object that matches what that library creates... so if you want to create it outside the spsave process you can.  What I'm not sure I understand is why storing the client secret as plain text in my settings_security.json file would be any better than saving my password there given that it's on my machine and I'm not sharing said file with anyone? To me, this wouldn't be worth the hassle. If you really wanted to make it more secure you'd probably create a credential object when the watch starts that prompts you for the username and password via the no authentication option.  Then you can use that credential object for the life of the watch.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>131</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1515697639.6624329090118408203125;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>133</wp:comment_id>
        <wp:comment_author>
          <![CDATA[resing]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[tom@resing.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://tomresing.com</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[131.107.174.102]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-01-11 19:25:10]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-01-12 00:25:10]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Creating a credential object when the watch starts sounds like a great idea.
If there's a chance a password could be used to do harm, I wouldn't store it in plain text.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>132</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1515716710.2387111186981201171875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[wordpress]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://2.gravatar.com/avatar/2de3a98faf483601499b609ecc27aa4c?s=25&d=https%3A%2F%2Fs2.wp.com%2Fwp-content%2Fmu-plugins%2Fhighlander-comments%2Fimages%2Fwplogo.png&r=G]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[3557387]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_wpcom_id_sig]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[0506326ee1db9dc77ae93a1bc131aef2f5c76910]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>150</wp:comment_id>
        <wp:comment_author>
          <![CDATA[westerdaled]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[daniel@westerdale.biz]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://westerdale.biz</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[86.9.201.34]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-04-28 12:25:58]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-04-28 17:25:58]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[This is a superb well written post.  In my case I want to 'sp-save'  files to multiple destinations .  I agree, the Style Library root is the most important but I would also want custom html layouts and or search templates to go to their respective locations on the master page gallery .  I guess I could duplicate what you have described for each destination location but would be nice to have one project structure to rule them all!]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1524936359.608872890472412109375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[wordpress]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://1.gravatar.com/avatar/401c20c4f80342adb68d13279ac40307?s=25&d=https%3A%2F%2Fs2.wp.com%2Fwp-content%2Fmu-plugins%2Fhighlander-comments%2Fimages%2Fwplogo.png&r=G]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[11956413]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_wpcom_id_sig]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[14ffaa5411481539cc686980adacdf3a7377303b]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1525096338.866467952728271484375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>152</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[173.195.78.70]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-04-30 08:52:18]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-04-30 13:52:18]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thanks @westerdaled... I think what you're proposing is entirely possible.  I would probably structure the code a bit differently, in that I would create a function just for the sp-save portion of the copyToSharePoint function, and then in the body of the copyToSharePoint function have multiple calls to <strong>gulp.src(settings.srcFiles, { base: settingsSecurity.rootFolder })</strong> where settings.srcFiles would be different depending on what file you're trying to copy. You'd probably still want a 'master' settings.srcFiles that encompasses all the files you want to watch (for use in the watch function) but then branches to copy things to different locations.  The gulp file after all is just JavaScript so whatever you can do in code you can make your gulp file do for you.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>150</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1525096338.990375995635986328125;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Conquer your dev toolchain in 'Classic' SharePoint - Part 3]]>
      </title>
      <link>https://julieturner.net/2018/01/conquer-your-dev-toolchain-in-classic-sharepoint-part-3/</link>
      <pubDate>Thu, 11 Jan 2018 14:29:46 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/?p=584</guid>
      <description></description>
      <content:encoded>
        <![CDATA[In our <a href="http://julieturner.net/2018/01/conquer-your-dev-toolchain-in-classic-sharepoint-part-2/" rel="noopener" target="_blank">last post</a> I went through the gulp process we were implementing to watch our files and upload them into an appropriate SharePoint library so that we can test our work inside SharePoint regardless of if SharePoint was version 2007 or SharePoint Online.  Now we’re going to take things further and formalize our process.  One of the tools the SharePoint Framework (SPFx) uses is <a href="https://webpack.js.org/" rel="noopener" target="_blank">Webpack</a>.

Webpack’s main goal is to take the many files that you create as a developer and bundle them all together into one JavaScript file. The benefit of bundling is that we make one call to one file instead of multiple calls for many files which is more efficient (in general).  What it also does is simplify the maintenance of your JavaScript references because instead of having 10’s of files you end up with as little as 1 file.  
Great, so how do we use it?  My implementation separates the “webpacking” from the uploading.  NPM via the package.json also allows some scripting and I take advantage of this by adding a watch task that triggers Webpack.  Webpack then packages all my files and puts them in a build directory where I have my gulpfile watching via the process I described in the last post.  I like this separation simply because it allows me to work on my packaging without having to have my “uploading” on.  But of course, there is a way you could combine them all into one step, it's just not something I'm going to cover.

To use Webpack we’re going to have to modify our package.json with a few more packages as well as add our build task.  To your devDependencies add the following packages (reminder that these versions are relevant to the time of posting and will work together, depending on when you do this you may want upgrade to a more current version):
<pre class="lang:json decode:true">
"webpack": "~2.7.0",
"html-loader": "~0.4.5",
"css-loader": "~0.26.4",
"style-loader": "~0.13.2"
</pre>
Then, still in the package.json file, right above the devDependencies section add the following scripts section:
<pre class="lang:json decode:true">
"scripts": {
  "build": "webpack"
},
</pre>
<table style="width: 95%">
<tr>
<td style="width: 20%"><a href="https://webpack.js.org/" rel="noopener" target="_blank">Webpack</a></td>
<td>Bundling tool</td>
</tr>
<tr>
<td><a href="https://webpack.js.org/loaders/html-loader/" rel="noopener" target="_blank">html-loader </a></td>
<td>Allows Webpack to bundle your html into the js file.</td>
</tr>
<tr>
<td><a href="https://webpack.js.org/loaders/css-loader/" rel="noopener" target="_blank">css-loader</a></td>
<td>Helps Webpack bundle by importing your css and resolving any urls.</td>
</tr>
<tr>
<td><a href="https://webpack.js.org/loaders/style-loader/" rel="noopener" target="_blank">style-loader </a></td>
<td>Helps Webpack insert the css styles into the page.</td>
</tr>
</table>
After updating your node_modules by running “npm i”, then we need to add a new file called webpack.config.js.  Below is an example config file that includes the most basic version of what the Webpack configuration will need to create a bundle.
<pre class="lang:javascript decode:true">
var webpack = require('webpack');

module.exports = {
    //entry can be an array and an include multiple files
    entry: {
        bundleCDNDemo: "./client/cdndemo.js"
    },
    output: {
        path: '/code/Public-Samples/CDNDemoWebpackTS/build/',
        filename: "[name].js",
        publicPath: '/'
    },
    module: {
        rules: [
            {
                test: /\.css$/,
                exclude: /node_modules/,
                loader: ["style-loader", "css-loader"]
            },
            {
                test: /\.html$/,
                exclude: /node_modules/,
                loader: "html-loader"
            }
        ]
    },
    externals: {
        angular: 'angular',
        Sympraxis: 'Sympraxis'
    },
    watch: true
};
</pre>
Let’s go section by section through this an explain what’s happening.  I’m keeping this simple so that you have the general idea, and am providing links to the documentation so you can do more research yourself to extend things.
<table style="width: 95%">
<tr>
<td style="width: 20%"><a href="https://github.com/webpack/docs/wiki/configuration#entry" rel="noopener" target="_blank">entry</a></td>
<td>This is an array of files that tell Webpack what to bundle.  If you chain all of your files together using imports/require then you only need the starting point, otherwise you will need to reference all the files you want bundled.  More on this below.</td>
</tr>
<tr>
<td><a href="https://github.com/webpack/docs/wiki/configuration#output" rel="noopener" target="_blank">output</a></td>
<td>Configures how and where you’re bundled file(s) will be put.</td>
</tr>
<tr>
<td><a href="https://github.com/webpack/docs/wiki/configuration#module" rel="noopener" target="_blank">module</a></td>
<td>Configures the bundling rules for how it handles different file types, etc.</td>
</tr>
<tr>
<td><a href="https://github.com/webpack/docs/wiki/configuration#module" rel="noopener" target="_blank">externals</a></td>
<td>Indicates dependencies that should not be bundled.</td>
</tr>
<tr>
<td><a href="https://github.com/webpack/docs/wiki/configuration#watch" rel="noopener" target="_blank">watch</a></td>
<td>Tells Webpack to watch for changes and re-bundle.</td>
</tr>
</table>
<h2>Referencing all your code</h2>
If we go look at cdndemo.js (which is the entry point for my angular application) we’re going to see import statements at the top.  In this case I only have one JavaScript file, so I have no other references to JavaScript files, but I do have an html file and my css file.  By using import Webpack knows that it needs to bundle those two files into its final file.  Note too that I'm importing the html file into a variable that I then reference in the AngularJS component's template property.
<pre class="lang:javascript decode:true">
import cdndemoTemplate from './template.html';
import './styles/cdndemo.css';

angular.module('CDNDemo', []).component('cdnDemo', {
      template: cdndemoTemplate,
      controllerAs: 'vm',
      controller: function () {
        this.title = "My CDN Demo with Webpack";
        console.log("CDN Demo Loading");
        this.$onInit = function () {
          console.log("CDN Demo Loaded");
        };
      }
    }
  );
</pre>
So, I’m going to make a fairly quick comment here about require vs import.  If you know the difference already then, this section won’t be pertinent and probably this blog series isn’t either.  Basically, there is the old way and the new way to include modules in code.  The old way was provided by NodeJS and is called <em>require</em>.  Require lets you load your modules dynamically so, in other words, wherever the require appears in code is where/when the module is loaded.  The new way, introduced in ES2015 was to use explicit <em>import</em> statements which cannot be loaded dynamically.  To make use of a Webpack feature called tree shaking effectively you need to use import.  If you don’t need tree shaking or it’s not important to you then require is probably fine if you want to include large files with many modules in them and only have Webpack bundle the modules that you use out of those files (instead of the whole file) then import is more what you’re looking for.  I think this means a lot more when you’re working with typescript but that’s just my opinion.  Anyway, this is a more advanced development style and so I’m not looking to debate the pros and cons of one vs the other.  I primarily want to make people who are new to this style of development aware there are two different ways of referencing the modules you need and that you should take time and learn more about them.  A good introductory post on this subject comes from Jake Carson Zerrer <a href="https://insights.untapt.com/webpack-import-require-and-you-3fd7f5ea93c0" rel="noopener" target="_blank">Webpack, import, require and you</a>
<h2>Start it Up</h2>
So now that we’re ready to go, I will start my "gulp watch" task first.  Then I will start a second command window and start "npm run build" which will start the Webpack process.  You will see that the system will then packages up all the files you referenced into in this case one bundled file.
<a href="http://julieturner.net/wp-content/uploads/2018/01/webpackbundle.png"><img src="http://julieturner.net/wp-content/uploads/2018/01/webpackbundle.png" alt="" width="543" height="251" class="aligncenter size-full wp-image-589" /></a>
<h2>Loading it on the page</h2>
In my case my application uses AngularJS so for me my final step is to get my bundle loading on the SharePoint page.  For that I’m using an angular component, so I would create either an html file with the following code or put the following code into a script editor web part.  Note I’m using the <a href="https://github.com/Widget-Wrangler/ww" rel="noopener" target="_blank">Widget Wrangler</a> (WW), you do not have to do this, you could simply put 2 script tags that reference <em>angular.min.js</em> and then the bundleCDNDemo.js before the div tag and remove the inline script tag that references the WW.
<pre class="lang:html decode:true">
<div>
    <cdn-demo></cdn-demo>
    <script type="text/javascript" src="/sites/cdn/Code/pnp-ww.min.js" 
        ww-appName="CDNDemo" 
        ww-appType="Angular"
        ww-appScripts='[{"src": "https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.6.1/angular.min.js", "priority":0},
                        {"src": "~/CDNWebpack/bundleCDNDemo.js", "priority":1}
        ]'>
    </script> 
</div>
</pre>
Hopefully, this was a clear explanation of how to add Webpack to your toolchain. Up next, we’re going to advance a few steps further and discuss how to add TypeScript, SCSS, and beyond.]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>584</wp:post_id>
      <wp:post_date>
        <![CDATA[2018-01-11 09:29:46]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2018-01-11 14:29:46]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2018-03-20 06:44:20]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2018-03-20 11:44:20]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[conquer-your-dev-toolchain-in-classic-sharepoint-part-3]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="category" nicename="javascript">
        <![CDATA[Javascript]]>
      </category>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="category" nicename="2010">
        <![CDATA[2010]]>
      </category>
      <category domain="category" nicename="alm">
        <![CDATA[ALM]]>
      </category>
      <category domain="category" nicename="development">
        <![CDATA[Development]]>
      </category>
      <category domain="category" nicename="2016">
        <![CDATA[2016]]>
      </category>
      <category domain="category" nicename="sharepoint-version">
        <![CDATA[SharePoint Version]]>
      </category>
      <category domain="category" nicename="language">
        <![CDATA[Language]]>
      </category>
      <category domain="category" nicename="typescript">
        <![CDATA[TypeScript]]>
      </category>
      <category domain="category" nicename="2007">
        <![CDATA[2007]]>
      </category>
      <category domain="series" nicename="conquer-your-dev-toolchain-in-classic-sharepoint">
        <![CDATA[Conquer your dev toolchain in 'Classic' SharePoint]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[585]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wpas_done_all]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_series_part]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[3]]>
        </wp:meta_value>
      </wp:postmeta>
    </item>
    <item>
      <title>
        <![CDATA[Conquer your dev toolchain in ‘Classic’ SharePoint – Part 4]]>
      </title>
      <link>https://julieturner.net/2018/01/conquer-your-dev-toolchain-in-classic-sharepoint-part-4/</link>
      <pubDate>Tue, 16 Jan 2018 14:43:38 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/?p=603</guid>
      <description></description>
      <content:encoded>
        <![CDATA[For this last post I want to take what we’ve learned and add the final pieces that have you creating web parts in the same way you would modern SPFx web parts and solutions. We’re going to start by discussing <a href="http://www.typescriptlang.org/" rel="noopener" target="_blank">TypeScript</a> and then briefly touch on <a href="http://sass-lang.com/" rel="noopener" target="_blank">Sass</a> and how to include these languages into your new Webpack/Gulp environment.  

TypeScript is becoming almost ubiquitous in modern web development. The pros are numerous, my favorites are the ability to write code to target older browser with modern capabilities, and the ability to use a version of intellisense to validate your objects properties and methods. In my experience both of these features makes development go faster. The cons are that you’ll need to transpile your code as well as utilize typings for the libraries you want to include. By using <a href="https://code.visualstudio.com/" rel="noopener" target="_blank">Visual Studio Code</a>, or another IDE as your development environment TypeScript is pretty much built in. If you are coming from C#, or some other compiled language, you’re going to find that you feel significantly more comfortable writing TypeScript than JavaScript, mainly because many of the conventions you’re used to have an equivalent in the TypeScript language and thus patterns like MVVM are easily implemented. 

As I’ve mentioned in many of my other posts I tend to use <a href="https://angularjs.org/" rel="noopener" target="_blank">AngularJS</a> as my development framework of choice simply because it works well and supports dynamic binding which is needed for web part development. That’s changing with the introduction of Web Components and Angular 5’s – Angular Elements but at this moment that’s super cutting edge and I’m not going to address it. 

<em>If you are interested in Angular Elements check out both Andrew Connell’s post (<a href="http://www.andrewconnell.com/blog/solve-the-sharepoint-framework-angular-challenge-with-angular-5-0-elements" rel="noopener" target="_blank">Solve the SharePoint Framework + Angular Challenge with Angular 5.0 Elements</a>) and Sébastien Levert’s series (<a href="http://www.sebastienlevert.com/2017/12/02/sharepoint-framework-angular-elements-building-your-first-web-part/" rel="noopener" target="_blank">SHAREPOINT FRAMEWORK & ANGULAR ELEMENTS : BUILDING YOUR FIRST WEB PART</a>)</em>

All that said that doesn’t mean AngularJS has to be the framework you choose, or that you need to choose a framework at all. All it means is that I’m going to show an example below of how I add the typings for spinning up an AngularJS project.  If you’re interested in some good reading and further links around the framework wars you might check out <a href="http://www.andrewconnell.com/blog/angular-react-or-vue-which-web-framework-to-focus-on-for-spfx" rel="noopener" target="_blank">Angular, React or Vue - Which Web Framework to Focus on for SPFx?</a> where Andrew Connell gives you a lot of resources to help you learn about the different frameworks, and some good advice…. Try before you 'buy'!
<h3>TypeScript</h3>
Enough introduction, on to the actual process.  First we’re going to update our package.json file by adding TypeScript.  Now if you’re using a tool like WebStorm they provide a “bundled” version of TypeScript (Visual Studio Code provides language support but not the transpiler, you will need to add it as I describe). Again, per my discussions in the previous posts I have run into version incompatibility issues and so I’ve taken to including my own version and not installing it globally or relying on the bundled version.  You should choose what works for you but if you’re going to pick your version then you need to add it to you devDependencies section of your package.json.
<pre class="lang:json decode:true">
"typescript": "~2.3.4",
</pre>
<table style="width: 95%">
<tr>
<td style="width: 20%"><a href="https://www.npmjs.com/package/typescript" rel="noopener" target="_blank">typescript</a></td>
<td>Provides typescript processing</td>
</tr>
</table>
A basic requirement of TypeScript is a configuration file, also known as a <a href="http://www.typescriptlang.org/docs/handbook/tsconfig-json.html" rel="noopener" target="_blank">tsconfig.json</a> file. The power of TypeScript really comes from the ability to code once and target whatever version of ECMAScript your browser(s) require.  My basic tsconfig.json files looks like the following. You can see from the 'target' property that I want my transpiled JavaScript to run in browsers supporting ECMAScript v5.
<pre class="lang:json decode:true">
{
  "compilerOptions": {
      "target": "es5",
      "module": "commonjs",
      "sourceMap": true,
      "experimentalDecorators": true,
      "lib": ["dom", "es6", "es2016.array.include"]
  }
}
</pre>
In addition, I need to add the typings for my third-party libraries.  Typings are the “intellisense” for your code.  They allow the transpiler to check that you’ve correctly utilized the various properties and methods your referencing before it actually “builds” it. The "cool" way to add typings to your project is to use the @types pattern, you can look up your favorites in <a href="https://www.npmjs.com/~types" rel="noopener" target="_blank">NPM</a>. Here I'm adding the typing for AngularJS to my dependencies.
<pre class="lang:json decode:true">
"@types/angular": "~1.6.36",
</pre>
<table style="width: 95%">
<tr>
<td style="width: 20%"><a href="https://www.npmjs.com/package/@types/angular" rel="noopener" target="_blank">@types/angular</a></td>
<td>Provides typescript support for AngularJS</td>
</tr>
</table>
We also need to add <a href="https://webpack.js.org/" rel="noopener" target="_blank">Webpack</a> support for our TypeScript files.  So, we’ll add the following:
<pre class="lang:json decode:true">
"ts-loader": "~2.3.7",
</pre>
<table style="width: 95%">
<tr>
<td style="width: 20%"><a href="https://www.npmjs.com/package/ts-loader" rel="noopener" target="_blank">ts-loader</a></td>
<td>This is the typescript loader for webpack.</td>
</tr>
</table>
Then we’ll modify our webpack.config.js file to reference and use ts-loader. Note other modifications to support our switch to TypeScript including changing our entry file, adding ts-loader to our modules section, and the addition of the “<a href="https://webpack.js.org/configuration/resolve/#resolve" rel="noopener" target="_blank">resolve</a>” section which helps Webpack configure how modules are resolved.  By including extensions section we’re telling Webpack to automatically resolve files with these extensions.
<pre class="lang:javascript decode:true">
var webpack = require('webpack');

module.exports = {
    entry: {
        bundleCDNDemoWebpackTS: "./client/cdndemo.ts"
    },
    output: {
        path: '/code/Conference-Demos/CDNDemoWebpackTS/build/',
        filename: "[name].js",
        publicPath: '/'
    },
    module: {
        rules: [
            {
                test: /\.css$/,
                exclude: /node_modules/,
                loader: ["style-loader", "css-loader"]
            },            
            {
                test: /\.html$/,
                exclude: /node_modules/,
                loader: "html-loader"
            },
            {
                test: /\.ts$/,
                loader: 'ts-loader',
                exclude: /node_modules/
            }
        ]
    },
    externals: {
        angular: 'angular',
        Sympraxis: 'Sympraxis'
    },
    resolve: {
        extensions: ['.ts', '.js'],
    },
    watch: true
};
</pre>
Now if I run an “npm i” all these dependencies will be loaded into my node_modules folder, and I can start my "npm build" process to start transpiling and webpacking my TypeScript based solution.
<h3>SASS/SCSS</h3>
Sass stands for “Syntactically Awesome Style Sheets” and its file extension is <em>scss</em>.  Once I tried Sass I’ve never looked back as it makes those things that you should be able to do in stylesheets easy by providing features like variables, nesting, partials, inheritance, and operators. If you've never tried it check out the <a href="http://sass-lang.com/guide" rel="noopener" target="_blank">Sass site</a> for some easy getting started snippets. To include Sass files in your project you need to include a few modules to help Webpack out.
<pre class="lang:json decode:true">
"node-sass": "~4.7.2",
"sass-loader": "~4.1.1",
</pre>
<table style="width: 95%">
<tr>
<td style="width: 20%"><a href="https://www.npmjs.com/package/node-sass" rel="noopener" target="_blank">node-sass</a></td>
<td>A dependency of sass-loader that must be manually included.</td>
</tr>
<tr>
<td style="width: 20%"><a href="https://www.npmjs.com/package/sass-loader" rel="noopener" target="_blank">sass-loader</a></td>
<td>Compiles the scss file into a css file so that webpack and include it in the bundle.</td>
</tr>
</table>
And then to our modules section of the webpack.config.js we need to add a rule for our scss files which is basically the same rules as css files but with the sass processor first (or last, processors work from last to first.. so the file will go through the sass-loader, then the css-loader, then the style-loader).
<pre class="lang:javascript decode:true">
{
   test: /\.scss$/,
   exclude: /node_modules/,
   loader: ["style-loader", "css-loader", "sass-loader"]
},
</pre>
<h3>And Beyond</h3>
There are so many other things we could add to our chain at this point.  Linters, testing frameworks, etc, etc but this series covers what we at Sympraxis do at a minimum for our projects that reside in classic SharePoint.  I really hope you’ve enjoyed reading them and if you have any questions please feel free to leave a comment below.  If you’re interested, you can download the complete files that I’ve discussed in my series from my <a href="https://github.com/juliemturner/Public-Samples" rel="noopener" target="_blank">GitHub</a> repo under the “Development Toolchain” folder.

Happy Coding!
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>603</wp:post_id>
      <wp:post_date>
        <![CDATA[2018-01-16 09:43:38]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2018-01-16 14:43:38]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2018-08-08 13:18:06]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2018-08-08 18:18:06]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[conquer-your-dev-toolchain-in-classic-sharepoint-part-4]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="2013">
        <![CDATA[2013]]>
      </category>
      <category domain="category" nicename="javascript">
        <![CDATA[Javascript]]>
      </category>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="category" nicename="2010">
        <![CDATA[2010]]>
      </category>
      <category domain="category" nicename="alm">
        <![CDATA[ALM]]>
      </category>
      <category domain="category" nicename="development">
        <![CDATA[Development]]>
      </category>
      <category domain="category" nicename="2016">
        <![CDATA[2016]]>
      </category>
      <category domain="category" nicename="sharepoint-version">
        <![CDATA[SharePoint Version]]>
      </category>
      <category domain="category" nicename="language">
        <![CDATA[Language]]>
      </category>
      <category domain="category" nicename="typescript">
        <![CDATA[TypeScript]]>
      </category>
      <category domain="category" nicename="2007">
        <![CDATA[2007]]>
      </category>
      <category domain="series" nicename="conquer-your-dev-toolchain-in-classic-sharepoint">
        <![CDATA[Conquer your dev toolchain in 'Classic' SharePoint]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[602]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_series_part]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[4]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wpas_done_all]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
    </item>
    <item>
      <title>
        <![CDATA[Harvesting your SharePoint Site Collections]]>
      </title>
      <link>https://julieturner.net/2018/03/harvesting-your-sharepoint-site-collections/</link>
      <pubDate>Tue, 20 Mar 2018 11:36:31 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/?p=645</guid>
      <description></description>
      <content:encoded>
        <![CDATA[One of the things I’ve been working on lately is harvesting a complete listing of all the site collections in a tenant, including as much metadata as possible.  Some of the metadata I’m looking for revolves around adding governance to managing your catalog of sites, especially in a large tenant.  For sure I think the SharePoint product group has visibility into the needs here but to get full fidelity might take significantly longer than you can wait. So, if you’re looking to create yourself a site catalog how do you go about it and what information is available to you.  In this post I’m just going to touch on each of the ways you can harvest this information and what additional metadata each provides as well as what other ways you can get information.
<h2>Site Collection Details - PowerShell</h2>
The SharePoint Online commandlets provide extremely basic information about a site collection through <a href="https://docs.microsoft.com/en-us/powershell/module/sharepoint-online/get-sposite?view=sharepoint-ps" rel="noopener" target="_blank">Get-SPOSite</a>.
<pre class="lang:powershell decode:true">
Get-SPOSite -Limit All -Detailed
</pre>
<strong>Metadata returned</strong>
<ul>
<li>ResourceUsageCurrent</li>
<li>ResourceUsageAverage</li>
<li>StorageUsageCurrent</li>
<li>LockIssue</li>
<li>WebsCount</li>
<li>CompatibilityLevel</li>
<li>AllowSelfServiceUpgrade</li>
<li>SiteDefinedSharingCapability - returns the stored value of the site policy.</li>
<li>SharingCapability - returns the effective access level (the site policy and the tenant policy combined.</li>
</ul>
<h2>Site Collection Details - PnPPowerShell/CSOM</h2>
If the information in the previous call isn’t enough for you or if PowerShell is not really the right language for your solution, then you have the alternative option of SharePoint PnP PowerShell which leverages the Tenant Administration CSOM.
For a full list of properties that are returned see the documentation:
<a href="https://docs.microsoft.com/en-us/powershell/module/sharepoint-online/Set-SPOSite?view=sharepoint-ps" rel="noopener" target="_blank">Powershell</a>/<a href="https://msdn.microsoft.com/en-us/library/microsoft.online.sharepoint.tenantadministration.siteproperties_members.aspx" rel="noopener" target="_blank">CSOM</a>
<pre class="lang:powershell decode:true">
Get-PnPTenantSite -Detailed
</pre>
Highlights of the information you can get from this endpoint are…
<ul>
<li>AllowDownloadingNonWebViewableFiles</li>
<li>AllowEditing</li>
<li>CommentsOnSitePagesDisabled</li>
<li>CompatibilityLevel</li>
<li>ConditionalAccessPolicy</li>
<li>DenyAddAndCustomizePages</li>
<li>DisableCompanyWideSharingLinks</li>
<li>DisableFlows</li>
<li>HasHolds</li>
<li>LockIssue</li>
<li>LockState</li>
<li>SharingAllowedDomainList</li>
<li>SharingBlockedDomainList</li>
<li>SharingCapability</li>
<li>SharingDomainRestrictionMode</li>
<li>ShowPeoplePickerSuggestionsForGuestUsers</li>
<li>SiteDefinedSharingCapability</li>
<li>Status</li>
<li>Template</li>
<li>WebsCount</li>
</ul>
<h3>Under the covers… CSOM</h3>
Under the covers of the PnP PowerShell commandlet is CSOM and since it’s open source we can see an example of getting the same information via CSOM, so if you’re writing managed code this might be the better option for you.
<pre class="lang:c# decode:true">
using Microsoft.Online.SharePoint.TenantManagement;
using (ClientContext ctx = new ClientContext(tenantUrl))
{
  ctx.Credentials = new SharePointOnlineCredentials(_username, _password);
  Tenant tenant = new Tenant(ctx);
  SPOSitePropertiesEnumerableFilter filter = new SPOSitePropertiesEnumerableFilter()
  {
    IncludePersonalSite = PersonalSiteFilter.Exclude,
    StartIndex = "0",
    IncludeDetail = true
  };

  SPOSitePropertiesEnumerable sitesList = null;
  var sites = new List<SiteProperties>();
  do
  {
    sitesList = tenant.GetSitePropertiesFromSharePointByFilters(filter);
    ctx.Load(sitesList);
    ctx.ExecuteQuery();
    sites.AddRange(sitesList.ToList());
    filter.StartIndex = sitesList.NextStartIndexFromSharePoint;
  } while (!string.IsNullOrWhiteSpace(sitesList.NextStartIndexFromSharePoint));
}
</pre>
<h2>Sharing and External Users</h2>
One of the things I hear frequently is concerns about managing external access, so having visibility to what sites have external sharing enabled and how many (and which external users) have access us useful. 
From previous section one of the properties we have access to is ‘SharingCapability’.  The possible values for that property are:
<table>
<tr><td>Disabled</td><td>external user sharing (share by email) and guest link sharing are both disabled</td></tr>
<tr><td>ExternalUserSharingOnly</td><td>external user sharing (share by email) is enabled, but guest link sharing is disabled</td></tr>
<tr><td>ExistingExternalUserSharingOnly</td><td>(DEFAULT) Allow sharing only with the external users that already exist in your organization’s directory</td></tr>
<tr><td>ExternalUserAndGuestSharing</td><td>external user sharing (share by email) and guest link sharing are both enabled</td></tr>
</table>
By using the TenantManagement class you can specifically harvest the external users you have in your site collection.
<pre class="lang:c# decode:true">
using Microsoft.Online.SharePoint.TenantManagement;
using (ClientContext ctx = new ClientContext(tenantUrl))
{
  ctx.Credentials = new SharePointOnlineCredentials(_username, _password);
  var tenant = new Office365Tenant(ctx);
  var extUsers = tenant.GetExternalUsersForSite(siteUrl, 0, 1, String.Empty, SortOrder.Ascending);
  ctx.Load(extUsers, i => i.TotalUserCount, i => i.ExternalUserCollection);
  var task = Task.Run(async () => await ctx.ExecuteQueryAsync());
  task.Wait(); 
  if (extUsers != null)
  {
    foreach(var user in extUsers.ExternalUserCollection)
    {
        var name = user.DisplayName;
    }
    var temp = extUsers.TotalUserCount;
  }
}
</pre>
<h2>Microsoft Graph - What’s available now</h2>
As the Microsoft Graph is an ever changing API that’s constantly being expanded I’m obviously going to be writing this as a primer as of the date of publication so please make sure you’re referencing the <a href="https://developer.microsoft.com/en-us/graph/docs" rel="noopener" target="_blank">graph documentation</a> to verify what might have changed.
Of what we have outlined above you can get some very basic information about a site collection from the graph by making a REST call to:
<pre>
https://graph.microsoft.com/v1.0/sites/contoso.sharepoint.com:/sites/1drvteam
</pre>
where 'contoso.sharepoint.com' is your tenant and '/sites/1drvteam' is the relative path to the site collection you're harvesting.
<div style="font-size: .9em;"><em>Note:</em> There are several other ways to can formulate the call for site information see this <a href="https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/site_get" rel="noopener" target="_blank" style="font-size: 1.2em;">reference</a> for more details.</div>
<pre class="lang:json decode:true">
{
  "id": "contoso.sharepoint.com,2C712604-1370-44E7-A1F5-426573FDA80A,2D2244C3-251A-49EA-93A8-39E1C3A060FE",
  "owner": {
    "user": {
      "displayName": "Daron Spektor",
      "id": "5280E7FE-DC7A-4486-9490-E790D81DFEB3"
    }
  },
  "displayName": "OneDrive Team Site",
  "name": "1drvteam",
  "createdDateTime": "2017-05-09T20:56:00Z",
  "lastModifiedDateTime": "2017-05-09T20:56:01Z",
  "webUrl": "https://contoso.sharepoint.com/teams/1drvteam"
}
</pre>
<h3>Get Group – by site collection URL (sort of)</h3>
What might be useful for visibility of your tenant would be information about any group enabled team sites, to get that we can utilize the <strong>/groups</strong> endpoint. For the time being there is no way via the graph to get the related group via the <strong>sites</strong> endpoint.  A work around is to use the <strong>$filter</strong> parameter with the <strong>mailNickname</strong> property of the group.  For example, if your site collection was https://contoso.sharepoint.com/teams/1drvteam then the corresponding graph call to get the group information would be:
<pre>https://graph.microsoft.com/v1.0/groups?$filter=mailNickname eq '1drvteam'</pre>
which then returns the following properties and extensions
<pre class="lang:json decode:true">
{
  "allowExternalSenders": false,
  "autoSubscribeNewMembers": true,
  "createdDateTime": "String (timestamp)",
  "description": "string",
  "displayName": "string",
  "groupTypes": ["string"],
  "id": "string (identifier)",
  "isSubscribedByMail": true,
  "mail": "string",
  "mailEnabled": true,
  "mailNickname": "string",
  "onPremisesLastSyncDateTime": "String (timestamp)",
  "onPremisesSecurityIdentifier": "string",
  "onPremisesSyncEnabled": true,
  "proxyAddresses": ["string"],
  "renewedDateTime": "String (timestamp)",
  "securityEnabled": true,
  "unseenCount": 1024,
  "visibility": "string",
  "acceptedSenders": [ { "@odata.type": "microsoft.graph.directoryObject"} ],
  "calendar": { "@odata.type": "microsoft.graph.calendar" },
  "calendarView": [{ "@odata.type": "microsoft.graph.event" }],
  "conversations": [ { "@odata.type": "microsoft.graph.conversation" }],
  "createdOnBehalfOf": { "@odata.type": "microsoft.graph.directoryObject" },
  "drive": { "@odata.type": "microsoft.graph.drive" },
  "events": [ { "@odata.type": "microsoft.graph.event" }],
  "memberOf": [ { "@odata.type": "microsoft.graph.directoryObject" } ],
  "members": [ { "@odata.type": "microsoft.graph.directoryObject" } ],
  "owners": [ { "@odata.type": "microsoft.graph.directoryObject" } ],
  "photo": { "@odata.type": "microsoft.graph.profilePhoto" },
  "rejectedSenders": [ { "@odata.type": "microsoft.graph.directoryObject" } ],
  "sites": [ { "@odata.type": "microsoft.graph.site" } ],
  "threads": [ { "@odata.type": "microsoft.graph.conversationThread" }]
}
</pre>
Now you have the group’s guid, you can formalize the call to
<pre>https://graph.microsoft.com/v1.0/groups/54e79fa1-0948-4a98-9914-199230818f49</pre>
And then get other related group information including those outlined in the response above.
Included in the members endpoint is the <strong>userPrincipalName</strong>, in the case of external users this property will have the <strong>#Ext#</strong> pattern, and therefore could be used to determine if there are external users in the group.  That said it's a much more round about method then the properties you got from the TenantAdministration CSOM call detailed in the previous section.
<p>
If as of the time you read this the group information for a site is still not available via the graph and you’re interested in having it please vote now on <a href="https://officespdev.uservoice.com/forums/224641-feature-requests-and-feedback/suggestions/33659776-add-a-group-relationship-to-the-sharepoint-sites-s" rel="noopener" target="_blank">UserVoice </a>
</p> 
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>645</wp:post_id>
      <wp:post_date>
        <![CDATA[2018-03-20 06:36:31]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2018-03-20 11:36:31]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2018-08-08 13:18:30]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2018-08-08 18:18:30]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[harvesting-your-sharepoint-site-collections]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="rest">
        <![CDATA[REST]]>
      </category>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="category" nicename="development">
        <![CDATA[Development]]>
      </category>
      <category domain="category" nicename="microsoft-graph-api">
        <![CDATA[Microsoft Graph API]]>
      </category>
      <category domain="category" nicename="powershell">
        <![CDATA[PowerShell]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_oembed_66382a5e38f2c7f8b551f58e150db022]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[{{unknown}}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[651]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wp_old_date]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[2018-03-19]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wpas_done_all]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_last_editor_used_jetpack]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[classic-editor]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>143</wp:comment_id>
        <wp:comment_author>
          <![CDATA[resing]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[tom@resing.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://tomresing.com</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[131.107.174.102]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-03-20 16:11:05]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-03-20 21:11:05]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thanks for collecting this all in one place. In the end, did you end up using the information from only one of these sources for your catalog? It looks like the PNP PowerShell example is the most comprehensive, for example.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1521580266.1596329212188720703125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[wordpress]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://2.gravatar.com/avatar/2de3a98faf483601499b609ecc27aa4c?s=25&d=https%3A%2F%2Fs2.wp.com%2Fwp-content%2Fmu-plugins%2Fhighlander-comments%2Fimages%2Fwplogo.png&r=G]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[3557387]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_wpcom_id_sig]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[0506326ee1db9dc77ae93a1bc131aef2f5c76910]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>144</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-03-21 17:04:45]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-03-21 22:04:45]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I used the CSOM implementation of what the PnP team created a commandlet for yes.  But in addition, sadly, because we need more detailed information on groups, the Exchange PowerShell commandlets... which isn't pretty shelling out to from C# or running seperately... I'm searching for a work around to that and will post more when I have it.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>143</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1521669885.8500430583953857421875;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[jetpack]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://s2.wp.com/wp-content/mu-plugins/highlander-comments/images/wplogo.png]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[1]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Managing the Unified Group in Office 365 for SharePoint and Beyond]]>
      </title>
      <link>https://julieturner.net/2018/04/managing-the-unified-group-in-office-365-for-sharepoint-and-beyond/</link>
      <pubDate>Tue, 10 Apr 2018 13:24:04 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">http://julieturner.net/?p=662</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<h2>Introduction</h2>
Azure Active Directory (AAD) Unified Groups, or better known as Office365 Groups, the security principal that underlies modern SharePoint team sites, Teams, Outlook Groups, Planner, etc. is a very powerful management construct that is the glue that holds the Office 365 security pyramid together.  Basically, a Unified Group has both an Owners group and a Members group and by adding users (either users in your tenant or external users – with a Microsoft based work and school account or a personal account) you can create a construct that allows you to work across many of the vast product offerings in Office 365. For a more easily consumable infographic covering the power of Unified Groups go check out fellow MVP, <a href="https://twitter.com/thatmattwade" rel="noopener" target="_blank">Matt Wade’s</a> <a href="http://icansharepoint.com/everyday-guide-office-365-groups/" rel="noopener" target="_blank"><em>An everyday guild to Office 365 Groups</em></a> 

At the tenant level, weather you’ve thought about it or not, you have a default sharing status for all the Unified Groups in your environment. Assuming you haven’t changed anything, they are probably; “Let users add new guests to the organization” and then for SharePoint and OneDrive “Let users share SharePoint Online and OneDrive for Business content with people outside the organization” – “Anyone, including anonymous users”.  Obviously, you can set these any way you like but assuming you want to allow sharing of some kind then you’ll need to have sharing enabled at the tenant level.  So now how do you disable/enable sharing for each of the groups/site collections.

Long story short, if you’re an enterprise you might want the ability to manage which groups include users outside your organization.  And you might even want to build a system for tracking what users are granted access and if there’s some sort of approval process in place. By flipping a lot of switches and twisting a bunch of knobs, most through the Microsoft Graph and somewhat through the Microsoft.TenantAdministration library you can achieve just that.
<h2>Scenario</h2>
From a central management system, maintain a list of sites a partner has external access to and the names of each user from that partner with access.*  When a new site/user is added do the following:
<ol>
<li>manually add that user as an external user via invitation in AAD</li>
<li>modify their user properties</li>
<li>assign them a manager</li>
<li>add the new user to the member group of the Unified Group</li>
</ol>

When the user accepts the external sharing request they will have access to the group.  Further, we want to maintain one entry in AAD for each external email account.

<div style="font-size: .9em; background-color: lightgray; padding: 5px;">*For the purposes of this scenario I’m not discussing the architecture of said central management system suffice it to say it certainly could be a set of lists in SharePoint with a relationship on partner, but it also could be an external system built on top of a relational database.  Regardless of this implementation let’s assume we have a source of partners and users that can be granted access.</div>

<h2>Implementation</h2>
With the assumption that you are familiar with creating an Azure AD Application (either v1 of v2), the various authentication flows that you could use depending on your platform du jour, and the various ways to use either the ADAL or MSAL libraries I’ll move on to the actual pieces of code that implement the solution.  If you are not familiar, please start by checking out the documentation about how to get auth tokens from the official <a href="https://developer.microsoft.com/en-us/graph/docs/concepts/auth_overview" rel="noopener" target="_blank">Microsoft site</a>. That site also has a bunch of Quick Starts and if you like labs, there are some good Microsoft Graph <a href="https://github.com/OfficeDev/TrainingContent/tree/master/Graph" rel="noopener" target="_blank">Hands On Labs</a> you can use to get yourself up to speed.

Also, when creating your Azure Application, you will need to grant a bunch of permissions depending on what type of app registration you choose. Because I am using application permissions and not delegated permissions, I granted my application the following:
<ul>
<li>Directory.Read.All</li>
<li>Directory.ReadWrite.All</li>
<li>Group.ReadWrite.All</li>
<li>User.Invite.All</li>
<li>User.ReadWrite.All</li>
</ul>
<h3>Setup</h3>
Assuming you have a list of sites you want to enable sharing with for each site you will need the site’s URL and the corresponding O365 Unified Group ‘Id’.  I explained in my <a href="http://julieturner.net/2018/03/harvesting-your-sharepoint-site-collections/" rel="noopener" target="_blank">previous post</a> how you might use the Microsoft Graph to retrieve the ID if you know the site URL. Since we have to have "sharing" turned on at the tenant level you will most likely want a process in place that turns sharing off for all existing Unified Groups and site collections and any newly created ones, managing that is outside the scope of this post but the code would be the same.

<div style="font-size: .9em; background-color: lightgray; padding: 5px;">I have seen several instances where that scenario won’t work but I’m almost positive it’s legacy groups that were created in this tenant as a result of utilizing preview code… so for the purposes of this post I’m going to assume you can get the Id via graph but if not, there are other ways you can get it most notably the Exchange Online PowerShell comandlets.  You can use <a href="https://docs.microsoft.com/en-us/powershell/module/exchange/users-and-groups/get-unifiedgroup?view=exchange-ps" rel="noopener" target="_blank" style="font-size: 1.1em;">Get-UnifiedGroup</a> to retrieve information about the group. Be aware an entirely confusing aspect of the results of the commandlet is knowing which of the various guid’s returned is the one that works consistently with the Microsoft Graph. I have found that the <strong>ExternalDirectoryObjectId</strong> property works most consistently but have found several instances where it’s null, and in that case the ID seems to be the best alternative.</div>

<h3>Manage Sharing of Unified Group</h3>
To enable or disable sharing of the Unified Group, which is different from the site collection sharing status, you will want to create and apply a particular <strong>groupSettingTemplate</strong> to the Unified Group. You do so by first creating your version of the <strong>Group.Unified.Guest</strong> template.  You can get the id of this template by issuing the following get request using the <a href="https://graph.microsoft.io" rel="noopener" target="_blank">graph explorer</a>: <em>https://graph.microsoft.com/v1.0/groupSettingTemplates</em>
If you scroll through the results you will find the template for ‘Group.Unified.Guest’.  Note the templates Id. Based on my testing the id is the same in all tenants, so you can probably skip this test but if you have problems might be worth going back and checking.

Ok, now what you want to do is create the content for your request, check if the template is already applied to the group in question and then either post or patch the template to the group.  See the code below.

<pre class="lang:csharp decode:true">
//URL to the group's settings
string urlGraph = String.Format("https://graph.microsoft.com/v1.0/groups/{0}/settings", groupId);
//The groupSettingsTemplate Id that we want to apply to our group
string templateId = "08d542b9-071f-4e16-94b0-74abb372e3d9";
//The version of the template we will apply to the group, where AllowToAddGuests is either true/false
var content = new StringContent(@"{
    'displayName': 'Group.Unified.Guest',
    'templateId': '08d542b9-071f-4e16-94b0-74abb372e3d9',
    'values': [
        {
        'name': 'AllowToAddGuests',
        'value': 'True'
        }
    ]
}'}", Encoding.UTF8, "application/json");


using (var client = new HttpClient())
{
    //setup client
    client.BaseAddress = new Uri(urlGraph);
    client.DefaultRequestHeaders.Accept.Clear();
    client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
    //A previous Async request retrieved our access token, now we're appending it to the header
    client.DefaultRequestHeaders.Add("Authorization", "Bearer " + task.Result.AccessToken);

    //Check if template exists
    string settingId = String.Empty;
    //Gets a list of existing groupTemplates applied to the group, if any.
    var taskExists = Task.Run(async () => await client.GetAsync(urlGraph));
    taskExists.Wait();
    if (taskExists.Result != null)
    {
        if (taskExists.Result.StatusCode == HttpStatusCode.OK)
        {
            HttpResponseMessage response = taskExists.Result;
            var taskResponse = Task.Run(async () => await response.Content.ReadAsStringAsync());
            taskResponse.Wait();
            if (taskResponse.Result != null)
            {
                //Converting the results to an object we can consume in C#, this is done by creating a class that matches the JSON
                GroupSettingsList settings = JsonConvert.DeserializeObject<GroupSettingsList>(taskResponse.Result);
                if (settings.value.Count > 0)
                {
                    foreach (var setting in settings.value)
                    {
                        //If the current setting, matches the groupSettingTemplate then save it
                        if (setting.templateId == templateId)
                            settingId = settings.value[0].id;
                    }
                }
            }
        }
    }
    
    Task<HttpResponseMessage> taskResult = null;
    //Based on if the groupSettingTemplate is already applied to this group, either post a new one or patch the existing one
    if (settingId == String.Empty)
        taskResult = Task.Run(async () => await client.PostAsync(urlGraph, content));
    else
        taskResult = Task.Run(async () => await client.PatchAsync(urlGraph + "/" + settingId, content));

    taskResult.Wait();
    if (taskResult.Result != null)
    {
        if (taskResult.Result.StatusCode == HttpStatusCode.Created)
        {
            Console.WriteLine("Success");
        }
        else
        {
            Console.WriteLine("Failed");
        }
    }
}
</pre>
<h3>Manage Sharing of the SharePoint site collection</h3>
Unfortunately, there is (as of publishing) no way through the Microsoft Graph to modify the sharing status of the site collection, however you can easily do so through CSOM. The Microsoft.TenantAdministration library gives you the means to change to the following states through an enum: <em>Disabled, ExternalUserSharingOnly, ExternalUserAndGuestSharing, ExistingExternalUserSharingOnly</em>. The following code shows you how to change it from <strong>Disabled</strong> to <strong>ExternalUserSharingOnly</strong> based on a value passed to the function.

<pre class="lang:csharp decode:true">
//Note this specific using for the 'Tenant'
using Microsoft.Online.SharePoint.TenantAdministration;

using (ClientContext ctx = new ClientContext(tenantUrl))
{
    ctx.Credentials = new SharePointOnlineCredentials(_username, _password);
    ctx.RequestTimeout = -1;
    Tenant tenant = new Tenant(ctx);
    var site = tenant.GetSitePropertiesByUrl(siteUrl, true);
    ctx.Load(site);
    var taskResult = Task.Run(async () => await ctx.ExecuteQueryAsync());
    taskResult.Wait();
    site.SharingCapability = sharingEnabled ? SharingCapabilities.ExternalUserSharingOnly : SharingCapabilities.Disabled;
    //A list of allowed external domains can be added here
    site.SharingAllowedDomainList = "";
    SpoOperation op = site.Update();
    ctx.Load(op, i => i.IsComplete, i => i.PollingInterval);
    ctx.ExecuteQuery();
    while (!op.IsComplete)
    {
        //wait 15 seconds and try again
        System.Threading.Thread.Sleep(15000);
        op.RefreshLoad();
        ctx.ExecuteQuery();
    }
}
</pre>
<h3>Creating External Users</h3>
If the external user’s account already exists in your AAD, you will need to retrieve the users AAD id which can be accomplished by making a call to the user endpoint as shown below. This code is also the basis as you can see by the comments for adding the existing or newly created user to the Unified Group.
<pre class="lang:csharp decode:true">
//Url to verify if external user already exists
string urlGraph = "https://graph.microsoft.com/v1.0/users?$filter=mail eq 'my_email@extdomain.com'";

using (var client = new HttpClient())
{
    //setup client
    client.BaseAddress = new Uri(urlGraph);
    client.DefaultRequestHeaders.Accept.Clear();
    client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
    //A previous Async request retrieved our access token, now we're appending it to the header
    client.DefaultRequestHeaders.Add("Authorization", "Bearer " + task.Result.AccessToken);

    //make request
    string userId = string.Empty;
    var taskUser = Task.Run(async () => await client.GetAsync(urlGraph));
    taskUser.Wait();
    if (taskUser.Result != null)
    {
        if (taskUser.Result.StatusCode == HttpStatusCode.OK)
        {
            HttpResponseMessage response = taskUser.Result;
            var taskUserExists= Task.Run(async () => await response.Content.ReadAsStringAsync());
            taskUserExists.Wait();
            if (taskUserExists.Result != null)
            {
                //Converting the results to an object we can consume in C#, this is done by creating a class that matches the JSON
                var user = JsonConvert.DeserializeObject<ExistingGuestUser>(taskUserExists.Result);
                if (user.value.Count > 0)
                {
                  //User exists so save the userId to add it to the unified group
                  userId = user.value[0].id;
                }
                else
                {
                  //CODE TO CREATE INVITATION GOES HERE
                }
            }
        }
    }

    if (userId != string.Empty)
    {
      //CODE TO ADD USER TO UNIFIED GROUP GOES HERE - Adding Users to the Unified Group
    }
}
</pre>
If you’ve verified that the user account doesn’t exist, then you will want to create an invitation for them to join. Luckily the Microsoft Graph has a great way to do this for you called <a href="https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/resources/invitation" rel="noopener" target="_blank">Invitation Manager</a>. Depending on how much control you want over the email that goes to guests you can set the <strong>sendInvitationMessage</strong> property to allow Microsoft to send the email for you with a couple of configurable properties or you can take the information returned from the invitation process to craft and send your own email.
<pre class="lang:csharp decode:true">
urlGraph = "https://graph.microsoft.com/v1.0/invitations";
//User doesn't exist, create invitation
var content = new StringContent(@"{
    'invitedUserEmailAddress': 'my_email@extdomain.com',
    'inviteRedirectUrl': 'https://myTenant.sharepoint.com/sites/MyExternalSite',
    'invitedUserDisplayName': 'My User (extdomain)',
    'sendInvitationMessage': 'true',
    'invitedUserMessageInfo': {
        'ccRecipients': [{
            'emailAddress': {
                'address': 'ccRecipient@myTenant.com',
                'name': 'CC Recipient'
            }
        }]
    }
}", Encoding.UTF8, "application/json");
var taskNewUser = Task.Run(async () => await client.PostAsync(urlGraph, content));
taskNewUser.Wait();
if (taskNewUser.Result != null)
{
    if (taskNewUser.Result.StatusCode == HttpStatusCode.Created || taskNewUser.Result.StatusCode == HttpStatusCode.OK)
    {
        HttpResponseMessage responseNewUser = taskNewUser.Result;
        var taskNewUserContent = Task.Run(async () => await responseNewUser.Content.ReadAsStringAsync());
        taskNewUserContent.Wait();
        if (taskNewUserContent.Result != null)
        {
            var userNew = JsonConvert.DeserializeObject<GuestUser>(taskNewUserContent.Result);
            if (userNew != null)
            {
                userId = userNew.invitedUser.id;
                //At this point the user exists in AAD and can be modified further.
            }
        }
    }
    else
    {
        Console.Write(taskNewUser.Result.StatusCode);
    }
}
</pre>
The return payload from that post, gives you the AAD id for the user that will be used in the next step but that you can also then be used to modify the users account more, by setting other properties like mobile phone, company, and maybe even uploading a photo or setting a manager relationship.  For more information on modifying a user record see the <a href="https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/resources/users" rel="noopener" target="_blank">Graph documentation for a User</a>.
<h3>Adding Users to the Unified Group</h3>
So, either from the results of creating an invitation or from looking the user up you have the AAD Id that can be used to add that user to the members group of the Unified Group. This is as easy as making a post to the <em>group/{id}/members</em> endpoint. The code below goes in outlined in the first code snippet in the section Creating External Users.
<pre class="lang:csharp decode:true">
//Add to Group
urlGraph = String.Format("https://graph.microsoft.com/v1.0/groups/{0}/members/$ref", groupId);
var contentGroup = new StringContent(@"{'@odata.id': 'https://graph.microsoft.com/v1.0/users/" + userId + @"'}", Encoding.UTF8, "application/json");
var taskResultGroup = Task.Run(async () => await client.PostAsync(urlGraph, contentGroup));
taskResultGroup.Wait();
if (taskResultGroup.Result != null)
{
    if (taskResultGroup.Result.StatusCode == HttpStatusCode.NoContent || taskResultGroup.Result.StatusCode == HttpStatusCode.OK)
    {
      Console.WriteLine("Success");
    }
    else
    {
      Console.Write("Failed");
    }
}
</pre>
<h2>Summary</h2>
By taking these ideas and your own requirements and imagination you can assemble a very powerful tool to manage your companies external sharing.  Luckily for us the Microsoft Graph allows us to attain most the capabilities we need and in time, probably all. I hope this helps get you started.  Happy Coding!]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>662</wp:post_id>
      <wp:post_date>
        <![CDATA[2018-04-10 08:24:04]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2018-04-10 13:24:04]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2018-12-31 14:36:41]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2018-12-31 19:36:41]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[managing-the-unified-group-in-office-365-for-sharepoint-and-beyond]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="category" nicename="development">
        <![CDATA[Development]]>
      </category>
      <category domain="category" nicename="o365-unified-group">
        <![CDATA[O365/Unified Group]]>
      </category>
      <category domain="category" nicename="c">
        <![CDATA[C#]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[663]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wpas_done_all]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>147</wp:comment_id>
        <wp:comment_author>
          <![CDATA[SharePoint April 2018 CU Available; SharePoint Online Native Social Capability Updates; SharePoint 2019 On Premises Talk]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://community.bamboosolutions.com/blogs/sharepoint-daily/archive/2018/04/13/sharepoint-april-2018-cu-available-sharepoint-online-native-social-capability-updates-sharepoint-2019-on-premises-talk/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[104.196.236.41]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-04-13 08:01:46]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-04-13 13:01:46]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] Managing the Unified Group in Office 365 for SharePoint and Beyond &#8211; Veni, Vidi, Vici [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1523624507.1315639019012451171875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1523628461.3098480701446533203125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>164</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Scott Byrge]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[scott.byrge@mckesson.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[143.112.32.4]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-09-07 15:54:43]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-09-07 20:54:43]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thank you very much for this blog post. The need to use PATCH for an existing settings template eluded me for about 30 minutes worth of Google-ing.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1536353684.085536956787109375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1536365520.3990199565887451171875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Tip: Implementing 'Nav' Office Fabric UI React Component]]>
      </title>
      <link>https://julieturner.net/2018/07/tip-implementing-nav-office-fabric-ui-react-component/</link>
      <pubDate>Tue, 31 Jul 2018 23:55:05 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">https://julieturner.net/?p=734</guid>
      <description></description>
      <content:encoded>
        <![CDATA[This post is meant to be a quick supplement to the documentation provided by Microsoft around the Nav component of the <a href='https://developer.microsoft.com/en-us/fabric/'>Office Fabric UI React</a>.  This Nav component gives you a control that you either create URL links or maybe more commonly, support navigation via code.  For general links, where the URL is either a route or some other page, the implementation of the INavLinkGroup[] and INavLink is quite straight forward, just provide a Key, Name, and URL with a couple other optional parameters.  For programmatic support, the documentation provides a solution but as it turns out that implementation is misleading. I was finding that my nav items that needed to execute a bit of code would sometimes execute that code twice.  As it turns out I wasn’t using it right, so let me help clarify by showing you what I found.
<h3>Documented Implementation</h3>
<pre class="lang:html decode:true">
<Nav
  groups={[
	{
	  links: [
		{
		  name: 'Home',
		  url: 'http://example.com',
		  links: [
			{
			  name: 'Activity',
			  url: 'http://msn.com',
			  key: 'key1'
			},
			{
			  name: 'News',
			  url: 'http://msn.com',
			  key: 'key2'
			}
		  ],
		  isExpanded: true
		},
		{ name: 'Documents', url: 'http://example.com', key: 'key3', isExpanded: true },
		{ name: 'Pages', url: 'http://msn.com', key: 'key4' },
		{ name: 'Notebook', url: 'http://msn.com', key: 'key5' },
		{ name: 'Long Name Test for ellipse', url: 'http://msn.com', key: 'key6' },
		{
		  name: 'Edit',
		  url: 'http://cnn.com',
		  onClick: this._onClickHandler2,
		  icon: 'Edit',
		  key: 'key8'
		},
		{
		  name: 'Delete',
		  url: 'http://cnn.com',
		  onClick: this._onClickHandler2,
		  iconProps: { iconName: 'Delete' },
		  key: 'key9'
		}
	  ]
	}
  ]}
  expandedStateText={'expanded'}
  collapsedStateText={'collapsed'}
  selectedKey={'key3'}
/>
</pre>
Note the code on lines 29 and 36.  Those are INavLink entries that include the “onClick” event. So when I implemented similar Nav items I implemented them the same way. After playing around with it a little I realized my issue with some code executing twice when the link was clicked and realized that the proper implementation is to leverage the onLinkClick property by which you can bind an event handler to the Nav component to handle link clicks. The signature for that method includes the HTML element as well as the INavLink item that was clicked. Using this allows us to redirect to our other code to handle those Nav items that require a little more programmatic support.

In my implementation the Nav is hidden until the user clicks on a menu icon. I decided to implement with a simple switch statement, where the default case hides the menu by changing my state property that displayed it in the first place (I handle hiding the menu for each of the other menu options in their specific implementations as I’m often changing some other aspect of the state and want to try and consolidate these calls as much as possible). Ok, so let me just show you how I would implement the above example:

<h3>Updated Implementation</h3>
Note in lines 28 and 34 I simply set the url to an empty string.  Then, later on line 41 I hook the component up to my click handler.
<pre class="lang:html decode:true">
<Nav
  groups={[
	{
	  links: [
		{
		  name: 'Home',
		  url: 'http://example.com',
		  links: [
			{
			  name: 'Activity',
			  url: 'http://msn.com',
			  key: 'key1'
			},
			{
			  name: 'News',
			  url: 'http://msn.com',
			  key: 'key2'
			}
		  ],
		  isExpanded: true
		},
		{ name: 'Documents', url: 'http://example.com', key: 'key3', isExpanded: true },
		{ name: 'Pages', url: 'http://msn.com', key: 'key4' },
		{ name: 'Notebook', url: 'http://msn.com', key: 'key5' },
		{ name: 'Long Name Test for ellipse', url: 'http://msn.com', key: 'key6' },
		{
		  name: 'Edit',
		  url: '',
		  icon: 'Edit',
		  key: 'key8'
		},
		{
		  name: 'Delete',
		  url: '',
		  iconProps: { iconName: 'Delete' },
		  key: 'key9'
		}
	  ]
	}
  ]}
  onLinkClick={this._onNavClick}
  expandedStateText={'expanded'}
  collapsedStateText={'collapsed'}
  selectedKey={'key3'}
/>
</pre>

<pre class="lang:typescript decode:true">
private _onNavClick(e: React.MouseEvent<HTMLElement>, item: INavLink): void {
    switch(item.key){
      case "key8":
        this._onEdit();
        break;
      case "key9":
        this._onDelete();
        break;
      default:
        this.setState({showPlaylistMenu: false});
        break;
    }
  }
</pre>

Hope this helps in your implementations, Happy Coding!]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>734</wp:post_id>
      <wp:post_date>
        <![CDATA[2018-07-31 18:55:05]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2018-07-31 23:55:05]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2019-07-18 13:04:16]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2019-07-18 18:04:16]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[tip-implementing-nav-office-fabric-ui-react-component]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="development">
        <![CDATA[Development]]>
      </category>
      <category domain="category" nicename="spfx">
        <![CDATA[SPFx]]>
      </category>
      <category domain="category" nicename="typescript">
        <![CDATA[TypeScript]]>
      </category>
      <category domain="category" nicename="framework">
        <![CDATA[Framework]]>
      </category>
      <category domain="category" nicename="reactjs">
        <![CDATA[ReactJS]]>
      </category>
      <category domain="category" nicename="tips-tricks">
        <![CDATA[Tips &amp; Tricks]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[740]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wp_old_date]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[2018-07-28]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>328</wp:comment_id>
        <wp:comment_author>
          <![CDATA[SOMNATH]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[somnath.mondol@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[131.107.159.240]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-01-22 18:08:44]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-01-22 23:08:44]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Is there a way to add and id attribute value for each of the link item?]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1548198525.2195360660552978515625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1548199031.79913997650146484375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>329</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[192.0.102.36]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-01-22 18:19:48]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-01-22 23:19:48]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[The INavLink object has a key value, which you can/should set to an identifier for the item that nav entry represents.  As far as I know there is no way to add an HTML id to the element it represents, but that said modern practices are to avoid element id's whenever possible especially in a component solution such as SharePoint. Is there something special you're trying to accomplish that you feel you need them?]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>328</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1548199188.1166820526123046875;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>554</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Mike]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[mtcholakian@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://gravatar.com/thinkobjects</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[190.16.125.51]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-04-03 13:16:15]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-04-03 18:16:15]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi! I cannot use this nav for accesibility things..What I mean is that I cannot use the TAB key to navigate through items...any suggestion?? thanks!]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1554315375.835176944732666015625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1554392468.2877209186553955078125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>555</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-04-04 10:41:34]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-04-04 15:41:34]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I'd look at the Accessibility section of the Office Fabric React documentation... https://developer.microsoft.com/en-us/fabric#/components/keytips for instance.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>554</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1554392494.70804309844970703125;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>593</wp:comment_id>
        <wp:comment_author>
          <![CDATA[2018 875695 090 nike air max 90 kup black grey]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://www.aycockforva.com/sxfw/2018-875695-090-nike-air-max-90-kup-black-grey</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[27.153.202.117]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-06-20 22:55:55]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-06-21 03:55:55]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[<strong>2018 875695 090 nike air max 90 kup black grey</strong>

air jordan 5 black brown mens shoesnike air max 95 ultra premium br damskienike damen w air max 97 ul 17 se gymnastikschuhenike air relentless 2 8211 gris air max 90 bw pour homme]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[trash]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[trackback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[true]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1561089356.9220349788665771484375;s:5:"event";s:10:"check-spam";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1561089356.9224779605865478515625;s:5:"event";s:20:"status-changed-trash";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>620</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Jose]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[jose.bejerano@delta.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[205.174.22.25]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-01-21 08:37:55]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-01-21 13:37:55]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hello, I am facing an issue, when I select an INavLink the Nav component completely collapse even though I setted correct the the selectedKey. Do you have any idea how to prevent collapsing the Nav component,  
Thank you]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1579613875.9988191127777099609375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1579618620.2523109912872314453125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>621</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-01-21 09:57:45]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-01-21 14:57:45]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Is the Nav collapsed by default?  That's the only thing I can think of, as I have not seen that behavior but I've only ever used the Nav component in expanded mode.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>620</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1579618665.7031071186065673828125;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>622</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Jose]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[jose.bejerano@delta.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[205.174.22.25]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-01-21 10:22:01]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-01-21 15:22:01]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[No, it is not. I double checked now, and it collapsed is set to false. I am a newbie with UI Fabric and I having all type of learning(weird) experiences with this UI library using the react.js components. Do you have any info that I can read, because the Documentation is really vague? 
Thank you,]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1579620121.029448986053466796875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>634</wp:comment_id>
        <wp:comment_author>
          <![CDATA[sai teja]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[saiteja.karra@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[192.140.152.5]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-03-20 10:53:37]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-03-20 15:53:37]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hey Julie, I'm currently using Nav for one of my projects. The background for my Nav is black in color and the text is white. I'm facing an issue with a parent link expand collapse icon. When I hover over the Parent Node, it's color changes to white and the text color changes to blue. But when i hover over the expand/collapse icon, it's color changes to white but the text color doesn't change to blue. It's still white. Can you please suggest how i can customize that.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1584719617.8617188930511474609375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1584720998.485980987548828125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>635</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-03-20 11:22:01]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-03-20 16:22:01]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Without doing a lot of work I can't explain to you exactly how to fix your issue.  What I can tell you is that you can either manually override the styles by adding the styles property (https://developer.microsoft.com/en-us/fabric#/controls/web/nav#INavProps) and passing in an object that implements the pieces of INavStyles (https://developer.microsoft.com/en-us/fabric#/controls/web/nav#INavStyles) that will accommodate the changes you want to see to the styling.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>634</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1584721321.3212420940399169921875;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>645</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Shreyas A]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[rite2shreyas81@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[116.75.122.111]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-08-06 13:26:31]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-08-06 18:26:31]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi,

Can i add multiple icons to links using  element and have different handler method for each of the icon?]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1596738392.0602569580078125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1597152934.246757984161376953125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>646</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-08-11 08:37:44]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-08-11 13:37:44]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[I'm sorry, I really don't follow the question. I can say that there is only 1 icon per entry, if you want to change that icon dynamically that's possible.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>645</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1597153064.69733905792236328125;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>660</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Paul Kaplan]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[bassement5@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[24.181.235.25]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2021-03-04 15:02:31]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2021-03-04 20:02:31]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Is it possible to use this as both a clickable link and an editable field so you can edit the URL?]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1614888151.327270030975341796875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1620060826.197146892547607421875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[SPFx Anchor Tags - Hitting the Target]]>
      </title>
      <link>https://julieturner.net/2018/08/spfx-anchor-tags-hitting-the-target/</link>
      <pubDate>Wed, 08 Aug 2018 18:17:18 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">https://julieturner.net/?p=755</guid>
      <description></description>
      <content:encoded>
        <![CDATA[If you’re developing SharePoint Framework web parts you may have run across an issue whereby your anchor tags will not honor the target=”_blank” attribute allowing you to open a url in a new browser tab.  The issue manifests itself only when your goal is to open another SharePoint page from a SharePoint page, i.e. the href is in the SharePoint domain.  The reason for this is SharePoint’s built in but rather complex Page Router.  Basically, the Page Router is the mechanism by which pages are rendered in SharePoint.  In the most basic terms a component sits between you and a page refresh providing logic to how much and when parts of the page need to be loaded.  What that means for you is that when you are trying to load a SharePoint page the router steps in and “decides” how it will be rendered and because of this the target attribute is ignored.

A colleague of mine imagined a complicated, but honestly quite ingenious solution to circumvent this problem.  Basically, href url was set to the url of an azure function that would include the target url in the query string parameter. The job of the azure function was to issue a 302 redirect with the target url in it.  Because the Azure function is not a SharePoint page, the target attribute is honored thus allowing the page to be opened in a new tab.  Whew!

As it turns out there’s some built in, but undocumented functionality that solves the problem. There is an attribute you can add to your anchor tag in the form of “data-interception” that provides various methods to either bypass or partially bypass the Page Router.  The first option is “off”.  When you set the property to off it means that the loading of the target href completely bypasses the Page Router logic.  This can mean that the rendering of your page goes from 1-2 seconds to upwards of 4 seconds… but if the alternative is to go without opening a new tab or implementing a complicated azure function redirect then this seems like a legit trade.  The other option is to use the “propagate” value.  In that instance the page router is not bypassed but it does allow your own click handlers to fire, which might mean that you can do some further processing before the anchor tag is redirected.

<pre lang="html">
<a href="https://mytenant.sharepoint.com/..." data-interception="off" target="_blank" rel="noopener noreferrer">My other page</a>
</pre>

Either way this is a significant find and hopefully helpful to someone else.

Happy Coding!
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>755</wp:post_id>
      <wp:post_date>
        <![CDATA[2018-08-08 13:17:18]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2018-08-08 18:17:18]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2019-04-09 07:54:48]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2019-04-09 12:54:48]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[spfx-anchor-tags-hitting-the-target]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="development">
        <![CDATA[Development]]>
      </category>
      <category domain="category" nicename="spfx">
        <![CDATA[SPFx]]>
      </category>
      <category domain="category" nicename="html">
        <![CDATA[HTML]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[756]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>157</wp:comment_id>
        <wp:comment_author>
          <![CDATA[SharePoint Dev Weekly - Episode 1 - Office 365 Developer Blog]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://officedevblogs.wpengine.com/sharepoint-dev-weekly-episode-1/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[104.239.139.228]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-08-17 06:50:53]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-08-17 11:50:53]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] SPFx Anchor Tags – Hitting the Target &#8211; Julie Turner (Sympraxis Consulting) [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1534506654.185204029083251953125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1534506765.696815013885498046875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>158</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Handling navigation in a SharePoint Framework application customizer - @eliostruyf]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://www.eliostruyf.com/handling-navigation-in-a-sharepoint-framework-application-customizer/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[137.117.228.150]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-08-23 03:19:16]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-08-23 08:19:16]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] Info: Julie Turner wrote a great article about SharePoint Framework and link behavior: https://julieturner.net/2018/08/spfx-anchor-tags-hitting-the-target/ [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1535012356.6675450801849365234375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1535028047.22459888458251953125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>167</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Anders Wallin]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[anders@wallinasp.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[70.162.212.237]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-10-31 08:53:03]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-10-31 13:53:03]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[How do you implement this on a modern SharePoint Site page?]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1540993984.2734959125518798828125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[facebook]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[http://graph.facebook.com/v2.9/100001373086608/picture?type=large&_md5=2164ba59018c6ea7f62128184459125d]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[100001373086608]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1540994098.505629062652587890625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>168</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-10-31 08:56:39]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-10-31 13:56:39]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Are you asking how you add links that open in a new page though the UI vs though code?]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>167</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1540994199.18117809295654296875;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[jetpack]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://s2.wp.com/wp-content/mu-plugins/highlander-comments/images/wplogo.png]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[1]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>183</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Steve]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[stephen.callin@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[204.40.130.137]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2018-12-10 20:30:17]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2018-12-11 01:30:17]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thank you! I spent hours trying to figure out why target="_blank" wasn't working.  I just wished I had googled "spfx sharepoint target _blank" much earlier in the day - brought me straight to your post.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1544491818.260139942169189453125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1544492118.4274818897247314453125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>263</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Ernst]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[ewolthaus@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[83.86.52.248]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-01-13 13:13:51]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-01-13 18:13:51]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thank you. Great article!!]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1547403232.019443988800048828125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1547403765.4148349761962890625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>324</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Nataliya Vlizko (@nataliya_vlizko)]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[nataliya_vlizko@twitter.example.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://twitter.com/nataliya_vlizko</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[131.165.101.68]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-01-22 03:16:09]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-01-22 08:16:09]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thank you for posting this! It helped me too :-)]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1548144969.8821430206298828125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[twitter]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[http://pbs.twimg.com/profile_images/639849241658036224/HN5llirU_normal.jpg]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[2517404562]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1548157411.87841701507568359375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>463</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Shrikant Upreti]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[shri.upreti@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://plus.google.com/+ShrikantUpreti</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[203.189.253.11]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-02-27 04:47:36]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-02-27 09:47:36]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Thanks a lot , I was struggling with the same proble. This solution works.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1551260856.7319939136505126953125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1551265495.046699047088623046875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>466</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Navigating to other pages in SharePoint Framework from code - Elio Struyf - @eliostruyf]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://www.eliostruyf.com/navigating-to-other-pages-in-sharepoint-framework-from-code/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[137.117.228.149]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-02-28 16:05:49]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-02-28 21:05:49]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] Info: Julie Turner wrote a great article about this data-interception attribute – SPFx Anchor Tags – hitting the target. [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1551387949.39832305908203125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1551389642.4661519527435302734375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>598</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Anil]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[anilkumarthakur2003@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://gravatar.com/anilkumarthakur2003</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[192.223.236.250]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-07-24 22:03:25]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-07-25 03:03:25]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Excellent finding. Great help. Thank you so much.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1564023805.7046310901641845703125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1564049195.40627193450927734375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>636</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Hunter]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[hunterp@redacted.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[67.247.60.174]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-04-03 11:43:59]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-04-03 16:43:59]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Just used this to success in my SPFx project. Thanks for clearly and accurately describing this (slightly odd) phenomenon!]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1585932239.4848411083221435546875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1586211288.9117310047149658203125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>637</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Abhijit Narvekar]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[abhijit.narvekar.osv@fedex.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[120.63.12.177]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-04-07 07:07:53]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-04-07 12:07:53]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[In SharePoint Online ,i wanted my webpart title to open the page in another tab,hence i added the below code snippet throught content editor webpart .Even though both attributes get added , the page still opens in same tab
$("h2.ms-webpart-titleText a").attr("data-interception","off");

	$("h2.ms-webpart-titleText a").attr("target","_blank");]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1586261273.9075870513916015625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1586273367.2800400257110595703125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>638</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-04-07 10:31:51]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-04-07 15:31:51]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Based on the code snippet it looks like you're trying to manipulate Microsofts page DOM vs just manipulating your web part's title. This isn't going to work. Since I have no idea what your code looks like I can't begin to offer another solution but that's not going to work for you.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>637</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1586273511.7677500247955322265625;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>639</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Abhijit Narvekar]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[abhijit.narvekar.osv@fedex.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[120.63.7.32]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-04-08 04:07:52]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-04-08 09:07:52]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[You are right .I am trying to manipulate the DOM using jquery by add in the solution you have given as attribute of anchor tag and it does add those 2 property but the behavior remains same and opens the page in same tab.

My requirement was simple as i have dropped few 3 List view webparts on the page and have a 1 content editor webpart. Since the webpart title link opens the page in same tab i inserted the a tag in jquery document page load function using the solution you provided .so even though the change is seen in page DOM ..the behavior is not changing.Am i missing something ?]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>638</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1586336872.47482204437255859375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>640</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Abhijit Narvekar]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[abhijit.narvekar.osv@fedex.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[120.63.7.32]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-04-08 04:10:57]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-04-08 09:10:57]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[i followed the below link to implement the solution.the only difference is the class used 

http://www.moresharepoint.net/2014/12/web-part-url-title.html]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>639</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1586337057.9217989444732666015625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>641</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Solving the &#8220;Failed to execute &#8216;removeChild&#8217; on &#8216;Node&#8217;&#8221; error on modern SharePoint pages &#8211; Tahoe Ninjas]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://tahoeninjas.blog/2020/06/29/data-interception/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[103.115.8.31]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2020-06-29 10:57:40]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2020-06-29 15:57:40]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] course, once you figure out to use data-interception, you&#039;ll find that the amazing Julie Turner, Elio Struyf, and Corey Roth all blogged about this [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1593446261.265533924102783203125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1593446594.32024288177490234375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>652</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Juha]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[juha.alhojoki@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://gravatar.com/juhaalhojoki</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[88.115.15.158]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2021-01-07 07:22:19]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2021-01-07 12:22:19]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Every day you learn something new. Thanks Julie. This was very valuable.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1610022139.260571956634521484375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1610025423.882730960845947265625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>663</wp:comment_id>
        <wp:comment_author>
          <![CDATA[George Michael Mavridis]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[blastem@gmx.de]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[91.224.226.197]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2021-08-23 06:38:07]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2021-08-23 11:38:07]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Good work, and nice aticle. That helped me to save the day.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1629718688.2314879894256591796875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1630440019.2673571109771728515625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>669</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Xavi]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[xsegura@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://gravatar.com/xacal13</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[83.50.185.7]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2022-03-02 10:51:06]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2022-03-02 15:51:06]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Great article, help me a lot, thanks for sharing!]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1646236267.3142681121826171875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1647286247.0795900821685791015625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Resolve to Log]]>
      </title>
      <link>https://julieturner.net/2018/12/resolve-to-log/</link>
      <pubDate>Mon, 31 Dec 2018 18:51:56 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">https://julieturner.net/?p=802</guid>
      <description></description>
      <content:encoded>
        <![CDATA[My Sympraxis partner <a href="https://twitter.com/sympmarc">Marc Anderson</a> mentioned that we’ve been talking about <a href="https://pnp.github.io/pnpjs/">PnPJS packages</a> for SharePoint Framework a lot lately and called out that I would be blogging about utilizing the logging package in his post <a href="https://sympmarc.com/2018/12/12/using-pnpjs-and-async-await-to-really-simplify-your-api-calls/">Using PnPJS and Async/Await to Really Simplify Your API Calls</a>. If you haven’t checked it out and aren’t using PnPJS and the Async/Await method instead of Promises in your SharePoint Framework solutions, you should give it a read.
<h2>TL;DR</h2>
Download the sample code from my <a href="https://github.com/juliemturner/Public-Samples">GitHub repo</a> for three examples of how to use the <a href="https://pnp.github.io/pnpjs/logging/docs/">PnP Logging</a> package.
<h2>Why Log</h2>
Logging information from your application to the browser console about what’s happening under the covers in your code can be enormously helpful when trying to debug issues that are bound to arise. From basic information, like the fact that your web part has started and successfully initialized to error information during execution. Well thought out and consistent logging can really go a long way to solving issues fast.  Certainly, you can issue calls to console.log throughout your code, and if you’re going to take nothing else from this post, please consider making it a common practice to do so in almost, if not every, method. <a href="https://twitter.com/waldekm">Waldek Mastykarz</a> has written a nice post on utilizing and extending, shall we say, the out of the box logging built into the SharePoint Framework in his post <a href="https://blog.mastykarz.nl/logging-sharepoint-framework/">Logging in the SharePoint Framework solutions</a>. PnPJS has an implementation that resembles the CustomLogHandler he describes but takes it a bit further.
<h2>Types of logging</h2>
If you look at the documentation PnPJS Logging supports a default <strong>ConsoleListener</strong>, a <strong>FunctionListener</strong>, and the ability to pass in your own implementation of a listener that inherits from <strong>LogListener</strong>. Each one honors the <i>Active Log Level</i> which will then only execute the log method when the call's error level is greater to or equal to the set level. This is something you could easily set as a web part property or a <a href="https://docs.microsoft.com/en-us/sharepoint/dev/spfx/tenant-properties">Tenant property</a> so that you could get more of less information as the situation warrants.
<h2>Starting Point</h2>
First, the Logger is a singleton, which is important to understand because that means that you need only initialize it once and then it’s available to use in anywhere in your code. Start by passing the listener of your choice to the subscribe method.
<pre lang="ts">
Logger.subscribe(new ConsoleListener());
</pre>
The second step is to set the Active Log Level, like so:
<pre lang="ts">
Logger.activeLogLevel = LogLevel.Verbose;
</pre>
And, make note that you can have more than one listener. For my advanced example I not only want to do some custom logging I also want to log information to the console, so I’ve added both listeners to the Logger.
<h2>Calling the Logger</h2>
To call the logger you have a couple of different options.  You can either use the <strong>write</strong> method, which will simply pass your information as a string to the message and if you choose a logging level. You can use the <strong>writeJSON</strong> method which allows you to pass a JSON object which will get converted to a string to serve as your message and optionally a logging level. And finally, the <strong>log</strong> method which will allow you to specify each property of the LogEntry. For more samples see the <a href="https://pnp.github.io/pnpjs/logging/docs/#writing-to-the-logger">official documentation</a>.
<h2>Basic Logging</h2>
For basic logging we’re just using the functionality as is, by utilizing a <string>ConsoleListner, setting the logging level, and noting that anything we “Log” is getting written to the browser’s console.</string>
<h2>Custom Logging</h2>
For custom logging we took advantage of the <strong>FunctionListener</strong> and created our own variation on how we might log information to the console. As the documentation points out, if you already have your own logging solution, be that an api or whatever, you could use this method to simply hand off the errors. My example shows making a REST call when the log entry is at the Error level.
<pre lang="ts">
let listener = new FunctionListener((entry: LogEntry) => {
  try {
    switch (entry.level) {
      case LogLevel.Verbose:
        console.info(entry.message);
        break;
      case LogLevel.Info:
        console.log(entry.message);
        break;
      case LogLevel.Warning:
        console.warn(entry.message);
        break;
      case LogLevel.Error:
        console.error(entry.message);
        // pass all logging data to an existing framework -- for example a REST endpoint 
        this.context.httpClient.post("<REST Endpoint URL>", HttpClient.configurations.v1, { headers: { Accept: "application/json" }, body: JSON.stringify(entry) });
        break;
    }
  } catch (err) {
    console.error(`Error executing customLogging FunctionListener - ${err}`);
  }
});

Logger.subscribe(listener);
</pre>
<h2>Advanced Logging</h2>
Finally, advanced logging takes advantage of building your own implementation by inheriting from LogListener. In this implementation I'm creating a scenario where by you would log just the errors to a custom list, in this case in SharePoint, but it could easily be anywhere. The point is that I want to implement my own listener so that I can do some setup, like make sure I have the users’ Id.
<pre lang="ts">
export default class AdvancedLoggingService implements LogListener {
  private _applicationName: string;
  private _web: Web;
  private _logListName: string;
  private _userId: number;
  private _writeLogFailed: boolean;

  constructor(applicationName: string, logWebUrl: string, logListName: string, currentUser: string) {
    //Initialize
    try {
      this._writeLogFailed = false;
      this._applicationName = applicationName;
      this._logListName = logListName;
      this._web = new Web(logWebUrl);
      this.init(currentUser);
    } catch (err) {
      console.error(`Error initializing AdvancedLoggingService - ${err}`);
    }
  }

  private async init(currentUser: string): Promise<void> {
    //Implement an asyncronous call to ensure the user is part of the web where the ApplicationLog list is and get their user id.
    try {
      let userResult = await this._web.ensureUser(`i:0#.f|membership|${currentUser}`);
      this._userId = userResult.data.Id;
    } catch (err) {
      console.error(`Error initializing AdvancedLoggingService (init) - ${err}`);
    }
  }

  public log(entry: LogEntry): void {
    try {
      //If the entry is an error then log it to my Application Log table.  All other logging is handled by the console listener
      if (entry.level == LogLevel.Error) {
        if (!this._writeLogFailed) {
          let stackArray = null;
          if (entry.data.StackTrace && entry.data.StackTrace.length > 0)
            stackArray = JSON.stringify(entry.data.StackTrace.split('\n').map((line) => { return line.trim(); }));
          let newLogItem: LogItem = new LogItem(this._applicationName, entry.data.FileName, entry.data.MethodName, new Date(), this._userId, entry.message, stackArray);
          let newLogItemResult = this._web.lists.getByTitle(this._logListName).items.add(newLogItem);
        }
      }
    } catch (err) {
      //Assume writing to SharePoint list failed and stop continuous writing
      this._writeLogFailed = true;
      console.error(`Error logging error to SharePoint list ${this._logListName} - ${err}`);
    }
    return;
  }
}
</pre>
As a result, every time an error is logged a new entry is put in my <strong>ApplicationLog</strong> list.
<img src="https://julieturner.net/wp-content/uploads/2018/12/ApplicationLog.png">
<h2>Conclusion</h2>
PnPJS library logging package has a lot of depth to create some super functional logging implementations for your custom SharePoint Framework solutions.  Resolve this year to make your code more robust and easily supportable. For the complete source code, please check out my <a href="https://github.com/juliemturner/Public-Samples">GitHub repo</a>.

Happy Coding!]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>802</wp:post_id>
      <wp:post_date>
        <![CDATA[2018-12-31 13:51:56]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2018-12-31 18:51:56]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2019-07-18 13:03:01]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2019-07-18 18:03:01]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[resolve-to-log]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="category" nicename="development">
        <![CDATA[Development]]>
      </category>
      <category domain="category" nicename="2016">
        <![CDATA[2016]]>
      </category>
      <category domain="category" nicename="spfx">
        <![CDATA[SPFx]]>
      </category>
      <category domain="category" nicename="typescript">
        <![CDATA[TypeScript]]>
      </category>
      <category domain="category" nicename="2019">
        <![CDATA[2019]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[804]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>196</wp:comment_id>
        <wp:comment_author>
          <![CDATA[SharePoint Dev Weekly - Episode 20 - Office 365 Developer Blog]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://officedevblogs.wpengine.com/sharepoint-dev-weekly-episode-20/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[104.239.138.4]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-01-02 08:40:41]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-01-02 13:40:41]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] Resolve to Log &#8211; Julie Turner (Sympraxis Consulting) [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1546436441.99719905853271484375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1546436836.711021900177001953125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>198</wp:comment_id>
        <wp:comment_author>
          <![CDATA[spthangungu]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[spthangu2016@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://www.thangu.com</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[106.66.144.80]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-01-02 18:38:25]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-01-02 23:38:25]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Amazing and useful tips. Thanks!]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1546472305.4022350311279296875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1546472714.097383022308349609375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>265</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Newsletter &#8211; 1/9/2019 | Sympraxis Consulting LLC]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://sympraxisconsulting.com/2019/01/13/newsletter-1-9-2019/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[198.57.247.160]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-01-13 14:57:11]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-01-13 19:57:11]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] Resolve to Log(12/31/2018)by Julie Turner, MVPMy Sympraxis partner Marc Anderson mentioned that we’ve been talking about PnPJS packages for SharePoint Framework a lot lately and called out that I would be blogging about utilizing the logging package in his post Using PnPJS and Async/Await to Really Simplify Your API &#8230; [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1547409432.27976703643798828125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1547409693.3867509365081787109375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>603</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Joe]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[jcust@leitkapture.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[198.199.191.4]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-08-01 15:24:43]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-08-01 20:24:43]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Your example makes use of LogItem (line 39), but you have not implemented it. I couldn't import it from @pnp/logging, so I assume it's something you created. Is that correct? If so, could you post it here? Thanks!]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1564691083.9113409519195556640625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1564693299.548758029937744140625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>604</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-08-01 16:03:14]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-08-01 21:03:14]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Yes, for brevity in the article I don't post everything. As noted at the bottom of the article, the entire sample is in the GitHub repo.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>603</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1564693394.3815250396728515625;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Curate the News: Social Following Sites on behalf of a user]]>
      </title>
      <link>https://julieturner.net/2019/02/curate-the-news-social-following-sites-on-behalf-of-a-user/</link>
      <pubDate>Mon, 18 Feb 2019 13:51:20 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">https://julieturner.net/?p=838</guid>
      <description></description>
      <content:encoded>
        <![CDATA[<h1>Curate the News</h1>
<h2>Social Following Sites on behalf of a user</h2>
The impetus for this post was the desire to follow a site for a batch of users. Why? Well, the news that shows up on the SharePoint home page stems from news posted to sites you follow. So as an organization, especially a large one, if you want to somewhat curate what news gets pushed to your users you need to make sure they’re following the sites that have the news you want them to see.

The social endpoints that are generally available via REST or CSOM clearly let you follow a site for the current user but there really is no documented way to follow one site for a batch of users or on behalf of another user. 

This post follows the lead set by <a href="https://twitter.com/mikaelsvenson">Mikael Svenson</a> in his post <a target="_blank" href="https://www.techmikael.com/2018/05/quickly-clear-followed-sites-using-pnp.html" rel="noopener noreferrer">Quickly clear Followed sites using PnP PowerShell</a>. In Mikael’s case he was trying to clear the sites he had followed while doing some testing, and a quick way to do that is with his PowerShell script. What he uncovered though is the hidden list in the user’s personal site that stores and abundance of social information including sites, documents and items a user is following. Now all I had to do was leverage this list and see what could come of it.

<em>&lt;Disclaimer&gt;
Let me be super clear, since it was a topic of conversation on the twitterverse, that this is not a Microsoft sanctioned method for solving this problem. Sadly there is no supported method for solving this problem, and so you need to make sure that you, or your client understand the inherent risks with going off reservation.
&lt;/Disclaimer&gt;</em>

What comes next is just the code, it’s almost ridiculously simple solution, but low and behold it works.

<a href="https://julieturner.net/wp-content/uploads/2019/02/FollowSite.png"><img src="https://julieturner.net/wp-content/uploads/2019/02/FollowSite.png" alt="" width="154" height="37" class="aligncenter size-full wp-image-837" /></a>

Once you add the site to the list, the site will show up as being followed when the user navigates to it, and after a short time news from that site will bubble up for the user when they visit the SharePoint home page.

<h3>Init setup</h3>
Obviously this code is an example. Normally you would want to set up all these variables in an app.config, database, or whatever works for your solution. I'm just outlining here the information you're going to need to be able to complete the process.

The biggest hurdle to success here is permissions. By default the "Company Administrator" is the only person who is a SCA (Site Collection Administrator) on each of the personal sites. You'll need to make sure whatever account your using has access to each of the users you want to modify or this solution isn't going to work for you. To get around that, the simplest solution is probably to create an Azure app registration with the "Have full control of all site collections" app permission and then use that context to access each users site.
<pre lang="C#">
const string _tenant = "<Your Tenant Name>"; //e.g. 'contoso'
const string _username = "<User with SCA to each tenant-my.sharepoint.com site collection>";
SecureString _password = null; //The password for _username

var user = "<User you want to follow the site for, replace @ and . with _>"; //e.g. 'test_contoso_com'
            
var socialSite = $"https://{_tenant}-my.sharepoint.com/personal/{user}";
var socialPartial = $"/personal/{user}";
            
var followSite = $"https://{_tenant}.sharepoint.com/sites/MySite";

Guid webId = new Guid("<Web Id for followSite root web>");
string webTitle = "<Title of followSite>";
Guid siteId = new Guid("<Site Id for followSite>");
</pre>

<h3>Execute</h3>
<pre lang="C#">
using (ClientContext ctx = new ClientContext(socialSite))
{
	ctx.Credentials = new SharePointOnlineCredentials(_username, _password);
	try
	{
		//Hidden list that contains followed sites, documents, and items
		var list = ctx.Web.Lists.GetByTitle("Social");
		ctx.Load(list);

		//Validate the 'Private' folder exists -- for a user who hasn't followed anything it will not be there.
		var folderPrivate = ctx.Web.GetFolderByServerRelativeUrl($"{socialPartial}/Social/Private");
		ctx.Load(folderPrivate);
		try
		{
			ctx.ExecuteQuery();
		}
		catch (Exception ex)
		{
			//Create private and Followed site
			var info = new ListItemCreationInformation();
			info.UnderlyingObjectType = FileSystemObjectType.Folder;
			info.LeafName = "Private";
			ListItem newFolder = list.AddItem(info);
			newFolder["Title"] = "Private";
			newFolder["ContentTypeId"] =
				"0x01200029E1F7200C2F49D9A9C5FA014063F220006553A43C7080C04AA5273E7978D8913D";
			newFolder.Update();
			ctx.ExecuteQuery();
		}

		//Validate the 'FollowedSites' folder exists -- for a user who hasn't followed anything it will not be there.
		var folderFollowed = ctx.Web.GetFolderByServerRelativeUrl($"{socialPartial}/Social/Private/FollowedSites");
		ctx.Load(folderFollowed);
		try
		{
			ctx.ExecuteQuery();
		}
		catch (Exception ex)
		{
			//Create private and Followed site
			var info = new ListItemCreationInformation();
			info.UnderlyingObjectType = FileSystemObjectType.Folder;
			info.FolderUrl = $"{socialPartial}/Social/Private";
			info.LeafName = "FollowedSites";
			ListItem newFolder = list.AddItem(info);
			newFolder["Title"] = "FollowedSites";
			newFolder["ContentTypeId"] = "0x0120001F6E5E1DE9E5447195CFF4F4FC5DDF5B00545FD50747B4D748AA2F22CD9D0BCB5E";
			newFolder.Update();
			ctx.ExecuteQuery();
		}

		//Create the new follow item for the site, in the FollowedSites folder.
		var infoItem = new ListItemCreationInformation();
		infoItem.FolderUrl = $"{socialPartial}/Social/Private/FollowedSites";
		var newFollowedSite = list.AddItem(infoItem);
		newFollowedSite["Title"] = webTitle;
		newFollowedSite["ContentTypeId"] = "0x01FC00533CDB8F4EAE447D941948EFAE32BFD500D2687BB5643C16498964AD0C58FBA2F3";
		newFollowedSite["Url"] = followSite;
		newFollowedSite["SiteId"] = siteId;
		newFollowedSite["WebId"] = webId;
		newFollowedSite.Update();
		ctx.ExecuteQuery();
	}
	catch (Exception ex)
	{
		Console.WriteLine(ex.Message);
	}
}
</pre>

As usual the source code for this solution can be found in my <a target="_blank" href="https://github.com/juliemturner/Public-Samples" rel="noopener noreferrer">github repo</a>.

Happy Coding!

]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>838</wp:post_id>
      <wp:post_date>
        <![CDATA[2019-02-18 08:51:20]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2019-02-18 13:51:20]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2019-07-18 13:02:33]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2019-07-18 18:02:33]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[curate-the-news-social-following-sites-on-behalf-of-a-user]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="category" nicename="development">
        <![CDATA[Development]]>
      </category>
      <category domain="category" nicename="language">
        <![CDATA[Language]]>
      </category>
      <category domain="category" nicename="c">
        <![CDATA[C#]]>
      </category>
      <category domain="category" nicename="social">
        <![CDATA[Social]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[851]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wp_old_date]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[2019-02-17]]>
        </wp:meta_value>
      </wp:postmeta>
    </item>
    <item>
      <title>
        <![CDATA[Tip: 'npm version' isn't creating tag for your project]]>
      </title>
      <link>https://julieturner.net/2019/04/tip-npm-version-isnt-creating-tag-for-your-project/</link>
      <pubDate>Mon, 08 Apr 2019 23:33:40 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">https://julieturner.net/?p=872</guid>
      <description></description>
      <content:encoded>
        <![CDATA[I love the new feature I picked up from my friend <a href="https://twitter.com/StfBauer">Stefan Bauer</a> about using <strong>npm version</strong> to <a href="https://n8d.at/blog/use-npm-version-to-upgrade-version-of-your-spfx-solution/">upgrade the version of your SPFx solution</a>. It has made working as an individual and as a team contributor so much easier because it becomes obvious in your repositories history when versions of the project we're created and by whom.  

I was struggling though because some of my more complicated projects, although set up the same way, were functioning with the exception that the git tags were not getting being created.  It turns out that if your folder structure is more complicated, and your package.json file is in a sub folder below your .git folder the tags won't get created automatically, although all the other aspects of the solution work fine.

Luckily I found a post with a <a href="https://github.com/npm/npm/issues/9111">workaround </a>in the npm repos issues list.

If you're repository structure looks anything like this, where your package.json file is not at the same level as your .git folder for the project you're running npm version on, a workaround to get the tags to apply automatically is to add an additional, empty .git folder.

So this...

mySpfxProject
|----.git/
|----docs/
|----specs/
|----webparts/
|--------package.json
|--------{all the other spfx files}

becomes...

mySpfxProject
|----.git/
|----docs/
|----specs/
|----webparts/
<strong>|--------.git/</strong>
|--------package.json
|--------{all the other spfx files}

And voila, <a href="https://docs.npmjs.com/cli/version.html">npm version</a> will now create the appropriate tag.

Keep in mind that the tag is for the entire repo, so if you have multiple solutions in the same repo that have different versions you may want to manually apply your tags in a different way. Which is probably why the feature works the way it does in the first place.

Happy coding!]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>872</wp:post_id>
      <wp:post_date>
        <![CDATA[2019-04-08 18:33:40]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2019-04-08 23:33:40]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2021-05-04 09:46:36]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2021-05-04 14:46:36]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[tip-npm-version-isnt-creating-tag-for-your-project]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="alm">
        <![CDATA[ALM]]>
      </category>
      <category domain="category" nicename="development">
        <![CDATA[Development]]>
      </category>
      <category domain="category" nicename="spfx">
        <![CDATA[SPFx]]>
      </category>
      <category domain="category" nicename="tips-tricks">
        <![CDATA[Tips &amp; Tricks]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[740]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wp_old_date]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[2019-04-05]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>558</wp:comment_id>
        <wp:comment_author>
          <![CDATA[SharePoint Dev Weekly - Episode 35 - Office 365 Developer Blog]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://officedevblogs.wpengine.com/sharepoint-dev-weekly-episode-35/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[104.239.138.4]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-04-16 05:59:42]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-04-16 10:59:42]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] Tip: ‘npm version’ isn’t creating a tag for your project &#8211; Julie Turner (Symraxis Consulting LLC) [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1555412382.3686769008636474609375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1555413476.229587078094482421875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Using CSS Variables to Morph Your SPFx Design at Run Time]]>
      </title>
      <link>https://julieturner.net/2019/06/using-css-variables-to-morph-your-spfx-design-at-run-time/</link>
      <pubDate>Thu, 13 Jun 2019 16:16:33 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">https://julieturner.net/?p=900</guid>
      <description></description>
      <content:encoded>
        <![CDATA[I learned about CSS Variables from <a href="https://twitter.com/StfBauer">Stefan Bauer</a> and his post <a href="https://n8d.at/blog/css-variables-support-for-spfx-projects-through-spfx-uifabric-themes/">CSS Variables support for SPFx projects through spfx-uifabric-themes</a>. In a nutshell, this npm package, which I’ve started using regularly, transforms the current theme colors available to the SPFx web part into variables that can be used within your SCSS/CSS files. This intrigued me as it’s a native browser capability that's been around since 2015 and because it means that you can affect the styling at run-time vs build-time… which translated means that lots of things you would normally think you’d need script for you can now do with a crafty use of CSS and some variables.

Generally, CSS Variables are scoped at the "root", as Stefan does with the theme colors.  This makes sense when you have values that should be consistent across the page.  However, it turns out that CSS variables can also be scoped to an element and its children. Hmmm… this led me to realize that I can create these variables in the scope of the web part (not the page) and thereby they can have different values for each instance of the web part on the page.

This design pattern came in super handy in my demo for the talk I was doing with <a href="https://twitter.com/mrackley">Mark Rackley</a> at this years SharePoint Conference (Anything you can do, I can do better… Embracing the SharePoint Framework). In the session Mark and I were discussing the merits of "advancing" your development skills [javascript -> typescript, leveraging certain packages, the async/await pattern vs promises, etc.] The goal for <a href="https://github.com/mrackley/spc19">my demo</a> was to take a JavaScript project that he had done and hosted in a content editor web part on a classic page and "modernize" it. I did this in a variety of ways but one of the coolest was this CSS variable pattern. So, let me show you.

<h2>What is a CSS variable?</h2>
According to <a href="https://www.w3.org/TR/css-variables-1/">w3.org</a>, cascading variables are "a new primitive value type that is accepted by all CSS properties, and custom properties for defining them."

SCSS, which is pre-processed into CSS has the concept of a variable already, so this isn’t something that’s particularly novel, but what SCSS variables don’t give you is a way to define them through an elements style attribute, more on this later.

<h2>Creating and Scoping a CSS variable to the root</h2>

In your CSS (or SCSS) file you can define variables at the root of the page and then use them in your various styles.

<pre lang="css">
:root {
    --main-color: red;
}
.myClass {
   color: var(--main-color);
}
</pre>

Now if I use that class on an HTML element I'll render the following

<a href="https://julieturner.net/wp-content/uploads/2019/06/RootVariable.png"><img src="https://julieturner.net/wp-content/uploads/2019/06/RootVariable.png" alt="" width="199" height="97" class="aligncenter size-full wp-image-901" /></a>

<h2>Creating and Scoping a CSS Variable to an element</h2>

CSS variables, as defined above are cascading. So that means that I can redefine that variable at some other point in the style if I want and or define a new variable at that point that is only scoped to that element and its children. Building on the previous example.

<pre lang="css">
:root {
    --main-color: red;
}
.myClass {
   color: var(--main-color);
}
.myAltClass {
   --main-color: white; 
   --alt-color: blue;
   color: var(--main-color);
   background-color: var(--alt-color);
}
</pre>

Now if I add another couple of elements that use both .myClass and .myAltClass I'll render the following:

<a href="https://julieturner.net/wp-content/uploads/2019/06/ScopedVariable.png"><img src="https://julieturner.net/wp-content/uploads/2019/06/ScopedVariable.png" alt="" width="315" height="116" class="aligncenter size-full wp-image-902" /></a>

<h2>Utilizing web part properties to affect the values of the CSS Variables</h2>

So, this is excellent but the issue with defining these values in the SCSS/CSS is that they’re static for the implementation. Although that lets you use that variable throughout your styles and change it in just one place that doesn’t make it dynamic enough for the purposes of the solution I was trying to create.

As I implied above, this is where the real superpowers of CSS variables come into play. You can define them via the style attribute of an element. Therefore, when using a framework such a ReactJS or Angular or Vue or Knockout (name your framework du jour), where I can easily build the DOM elements dynamically, I can create those CSS variables as well.

So, using the ReactJS example, when I render the element, I can create those variables and then inject them into the DOM. Note that the div at the root of the "return" links to the classes linkTiles and tileCont and then defines a style which injects the styleBlock value which is where I defined the CSS variables, like this:

<pre lang="typescript">
public render(): React.ReactElement<ILinkTilesProps> {
    //Create the CSS Variables based on the web part properties
    let styleBlock = { "--tileWidth": this.props.width + "px", "--tileHeight": this.props.height + "px" } as React.CSSProperties;
    //Render tile container as flex box
    try {
      return (
        <div className={`${styles.linkTiles} ${styles.tileCont}`} style={styleBlock}>
          {this.props.tiles && this.props.tiles.length > 0 && this.props.tiles.map((t: ILink) => {
            return (
              <Tile tile={t} showTitle={this.props.showTitle} />
            );
          })}
        </div>
      );
    } catch (err) {
      Logger.write(`${err} - ${this.LOG_SOURCE} (render)`, LogLevel.Error);
      return null;
    }
}
</pre>

Then the CSS for this project has the following class definitions which use those variables I defined for height and width in a multitude of classes. Here's a snippet.

<pre lang="css">
.linkTiles {
  &.tileCont {
    width: 100%;
    display: flex;
    flex-wrap: wrap;
    justify-content: left;
  }

  .tile,
  .tileFlip,
  .tileFront,
  .tileFront>img,
  .tileBack {
    width: var(--tileWidth);
    height: var(--tileHeight);
  }
....
</pre>

What that gives me is a completely isolated implementation of my style, so when two instances of that same web part are on a page their height and width as I defined them in the CSS variable is isolated to that instance.

<a href="https://julieturner.net/wp-content/uploads/2019/06/CSSVariableWebPart.gif"><img src="https://julieturner.net/wp-content/uploads/2019/06/CSSVariableWebPart.gif" alt="" width="804" height="440" class="aligncenter size-full wp-image-905" /></a>

I hope you can think of other great ways to use this cool solution, sadly though I suppose the spoiler is that they are not supported in IE 11 (<a href="https://caniuse.com/#search=css%20variable">https://caniuse.com/#search=css%20variable</a>).  

Happy Coding!

As linked to above the complete source code for the solution can be found in my <a href="https://github.com/juliemturner/Public-Samples">Public Samples</a> repo.]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>900</wp:post_id>
      <wp:post_date>
        <![CDATA[2019-06-13 11:16:33]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2019-06-13 16:16:33]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2021-05-04 09:46:22]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2021-05-04 14:46:22]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[using-css-variables-to-morph-your-spfx-design-at-run-time]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="development">
        <![CDATA[Development]]>
      </category>
      <category domain="category" nicename="css-scss">
        <![CDATA[CSS/SCSS]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[903]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>592</wp:comment_id>
        <wp:comment_author>
          <![CDATA[SharePoint Dev Weekly - Episode 44 - Microsoft 365 Developer Blog]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://officedevblogs.wpengine.com/sharepoint-dev-weekly-episode-44/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[104.239.138.4]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-06-19 05:31:28]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-06-19 10:31:28]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] Using CSS Variables to Morph Your SPFx Design at Run Time &#8211; Julie Turner (Sympraxis Consulting) [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1560940289.2562639713287353515625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1560943468.6784648895263671875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>606</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Newsletter &#8211; 8/6/2019 | Sympraxis Consulting LLC]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://sympraxisconsulting.com/2019/08/07/newsletter-8-6-2019/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[198.57.247.160]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-08-07 12:26:42]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-08-07 17:26:42]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] Using CSS Variables to Morph Your SPFx Design at Run Time (6/13/2019) by Julie Turner, MVP I learned about CSS Variables from Stefan Bauer and his post CSS Variables support for SPFx projects through spfx-uifabric-themes. In a nutshell this npm package, which I’ve started using regularly, transforms the current theme colors available to the SPFx web part into variables that &#8230; [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1565198804.195807933807373046875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1565641579.11046600341796875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[Tip: React JS - Fragments streamline your DOM]]>
      </title>
      <link>https://julieturner.net/2019/07/react-js-fragments-streamline-your-dom/</link>
      <pubDate>Thu, 18 Jul 2019 14:04:15 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">https://julieturner.net/?p=936</guid>
      <description></description>
      <content:encoded>
        <![CDATA[This quick post is going to fall into my Tips & Tricks category as it’s information readily available but if you didn’t know to look for it you probably wouldn’t have found it.  In version 16.2 React JS introduced the notion of "Fragments". A Fragment is basically an empty container that you can use in a react component to group a set of children together without adding additional nodes into the DOM.

Prior to version 16.2 (and 16.0 – we’ll get to why in a moment), every component must return one and only one parent node. This makes a certain amount of sense, but there are situations where you want a component to return a set of siblings. So, to support this scenario you would artificially add a &lt;div&gt; element to your component to adhere to that requirement.

<h2>Pre React JS 16.0 (aka, the old way)</h2>

<pre type="typescript">
public render(): React.ReactElement<IMyComponentProps> {
   return (
      <div>
         <p>First Sibling</p>
         <p>Second Sibling</p>
      </div>
   );
}
</pre>

Resulting HTML if you render two of the components
<pre type="html">
<div>
   <p>First Sibling</p>
   <p>Second Sibling</p>
</div>
<div>
   <p>First Sibling</p>
   <p>Second Sibling</p>
</div>
</pre>

<h2>React JS v16.0</h2>
In version 16.0 the framework introduced the idea of returning an array of elements instead of wrapping them in a DOM element. This means that the above solution could be implemented in the following manner.

<pre type="typescript">
public render(): React.ReactElement<IMyComponentProps> {
   return [
      <p key=”firstP”>First Sibling</p>,
      <p key=”secondP”>Second Sibling</p>
   ];
}
</pre>

Now the resulting HTML if you render 2 of the components doesn’t have extra unused DOM elements.
<pre type="html"> 
   <p>First Sibling</p>
   <p>Second Sibling</p>
   <p>First Sibling</p>
   <p>Second Sibling</p>
</pre>
There are several issues with this solution, first, you have to deal with the ugly code syntax of the array and making sure each element is separated by a comma. The second is that technically you would get key warnings from React, I tended to ignore those. The last was that text needed to be wrapped in quotes, I rarely put text directly in my code so that one again was not one I ran into but it’s worth knowing about.

<h2>React JS 16.2</h2>
Introducing Fragments… these little beauties can be implemented two ways by either using 

<pre type="html">
   <React.Fragment>
   </React.Fragment>
</pre>

Or the shorthand way… <>

<pre type="typescript">
public render(): React.ReactElement<IMyComponentProps> {
   return (
      <>
         <p>First Sibling</p>
         <p>Second Sibling</p>
      </>
   );
}
</pre>

The resulting HTML is just as streamlined without the extra work of adding brackets and keys.

You can find the full details by checking out this post from the React JS blog: <a href="https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html">React v16.2.0: Improved Support for Fragments</a>

With regard to SharePoint Framework as best as I can tell, by doing a little <a href="https://github.com/pnp/office365-cli">Office 365 CLI</a> sleuthing, the move from React 15.x directly to 16.3.2 happened in version 1.6, so that means since that version we've had the ability to do React.Fragments.

Hope this little tip helps. Happy Coding!
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>936</wp:post_id>
      <wp:post_date>
        <![CDATA[2019-07-18 09:04:15]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2019-07-18 14:04:15]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2021-05-04 09:46:14]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2021-05-04 14:46:14]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[react-js-fragments-streamline-your-dom]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="development">
        <![CDATA[Development]]>
      </category>
      <category domain="category" nicename="spfx">
        <![CDATA[SPFx]]>
      </category>
      <category domain="category" nicename="typescript">
        <![CDATA[TypeScript]]>
      </category>
      <category domain="category" nicename="reactjs">
        <![CDATA[ReactJS]]>
      </category>
      <category domain="category" nicename="tips-tricks">
        <![CDATA[Tips &amp; Tricks]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[740]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>605</wp:comment_id>
        <wp:comment_author>
          <![CDATA[SharePoint Dev Weekly - Episode 46 - Microsoft 365 Developer Blog]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://officedevblogs.wpengine.com/sharepoint-dev-weekly-episode-46/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[104.239.138.4]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-08-06 08:19:46]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-08-06 13:19:46]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] Tip: React JS – Fragments streamline your DOM &#8211; Julie Turner (Sympraxis Consulting) [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1565097586.8240139484405517578125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1565098207.8364589214324951171875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[SharePoint Framework Application Customizer Cross-Site Page Loading]]>
      </title>
      <link>https://julieturner.net/2019/09/sharepoint-framework-application-customizer-cross-site-page-loading/</link>
      <pubDate>Thu, 05 Sep 2019 13:21:48 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">https://julieturner.net/?p=962</guid>
      <description></description>
      <content:encoded>
        <![CDATA[I suspect, like <a href="https://twitter.com/eliostruyf" rel="noopener noreferrer" target="_blank">Elio Struyf</a> and <a href="https://twitter.com/VelinGeorgiev" rel="noopener noreferrer" target="_blank">Velin Georgiev</a> before him, we're all suffering from PTSD trying to properly load an application customizer into modern pages. It all started with an <a href="https://github.com/SharePoint/sp-dev-docs/issues/1971" rel="noopener noreferrer" target="_blank">issue posted in the sp-dev-docs repo</a> that was about partial page load across site collections but devolved into and issue with the OnInit function firing multiple times. <a href="https://blog.velingeorgiev.com/page-hit-when-SPA-page-transitioning-modern-sharepoint-sites" rel="noopener noreferrer" target="_blank">Velin’s post</a> describing his solution to the issue starts with a masterful breakdown of the page loading cycle and his need to track page hits. Then, <a href="https://www.eliostruyf.com/things-to-check-in-your-spfx-application-customizer-after-page-transitions" rel="noopener noreferrer" target="_blank">Elio’s variation</a> highlights other things to check like what Hub Site do I belong to and what UI language does this page support and how those things might impact the transition with relation to the application customizer. This post is going to take that one step further and address page transition between sites where one site might include the application customizer and the other might not. This is all in reference to the <a href="https://github.com/SharePoint/sp-dev-solutions/tree/master/solutions/MultilingualPages" rel="noopener noreferrer" target="_blank">Multilingual Pages solution</a> that lives in the SP-Dev-Solutions repo. This is a 400 level blog post so I’m not going to reiterate what Velin and Elio already did in their posts. Instead, I encourage you to pause here and go read their posts and then come back to continue on the journey. No worries I’ll wait….

So now that you're all caught up, I've included this gist with some numerical placeholders that I’ll comment more on below.

<script src="https://gist.github.com/juliemturner/9e48f21ddbbe49c8a18120f8cea28353.js"></script>

<ol>
<li>My navigation handler is very similar. That said because the application customizer could have been disposed of but the event handler still fires anyway due to what I believe is a timing issue, I need to not only check that the current page is changed but also that if the navigated event was unsubscribed. My best guess is that it takes time to unregister the navigation event and so there’s an asynchronous timing issue an the event is fired anyway.</li>
<li>Functions to remove the application customizer from the placeholder</li>
<li>Render method starts by determining if the context on the page is undefined. That it could be (and believe me it happens repeatedly), seems like a bug. If the context isn’t defined, then we re-trigger the navigationEventHandler which waits another 50 MS hoping the context has gotten populated. Once the context is valid, then we verify the navigation event handler is set and we render the component.</li>
<li>This is the secret sauce. Here we determine if the location we’re going to is a site that has the application customizer installed on it.</li>
<li>Finally, assuming the application customizer is installed then we’re going to identify if the container for our application customizer is available (if not create it) and then render our component. If the application customizer is not installed, then we remove it from the DOM.</li>
</ol>

I truly hope this helps others out there that are struggling with their application customizers. Happy Coding!]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>962</wp:post_id>
      <wp:post_date>
        <![CDATA[2019-09-05 08:21:48]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2019-09-05 13:21:48]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2019-09-05 08:37:43]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2019-09-05 13:37:43]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[sharepoint-framework-application-customizer-cross-site-page-loading]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="category" nicename="spfx">
        <![CDATA[SPFx]]>
      </category>
      <category domain="category" nicename="typescript">
        <![CDATA[TypeScript]]>
      </category>
      <category domain="category" nicename="featured">
        <![CDATA[Featured]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[968]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_wp_old_date]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[2019-09-04]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>609</wp:comment_id>
        <wp:comment_author>
          <![CDATA[SharePoint Dev Weekly - Episode 51 - Microsoft 365 Developer Blog]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://officedevblogs.wpengine.com/sharepoint-dev-weekly-episode-51/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[104.239.139.228]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2019-09-10 04:49:38]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2019-09-10 09:49:38]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] SharePoint Framework Application Customizer Cross-Site Page Loading &#8211; Julie Turner (Sympraxis Consulting) [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1568108978.91604709625244140625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1568113559.5075008869171142578125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[What is a “Dev Tenant” and why would you want one?]]>
      </title>
      <link>https://julieturner.net/2021/01/what-is-a-dev-tenant-and-why-would-you-want-one/</link>
      <pubDate>Wed, 06 Jan 2021 15:53:37 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">https://julieturner.net/?p=1187</guid>
      <description></description>
      <content:encoded>
        <![CDATA[When someone says to you, they are using their “dev tenant” what they’re probably referring to is their personal development “sandbox” they received as part of joining the Microsoft 365 developer program.

<a href="https://julieturner.net/wp-content/uploads/2021/01/M365DevProgram.png"><img src="https://julieturner.net/wp-content/uploads/2021/01/M365DevProgram-1024x475.png" alt="" width="1024" height="475" class="aligncenter size-large wp-image-1188" /></a>

By visiting <a href="https://developer.microsoft.com/en-us/microsoft-365/dev-program" rel="noopener" target="_blank">Developer Program - Microsoft 365</a> and selecting “Join Now” you’ll be walked through a wizard that will help you provision your very own Microsoft 365 tenant. You can see the details <a href="https://developer.microsoft.com/en-us/microsoft-365/dev-program#Subscription" rel="noopener" target="_blank">here</a>, but the general idea is that you’ll have a tenant, where you get to be the omnipotent global admin, with 25 E5 Microsoft 365 licenses available to you that allow you to build out and test various scenarios within the ecosystem.

25 E5 licenses is a lot of horsepower to begin building out scenarios that mix the various tools of Microsoft 365 tenant (SharePoint, Teams, OneDrive, PowerApps, PowerAutomate, etc) into solutions for your “customers”. Although I know many people who advocate and joke about “build it in production”, the reality is that doing so is invasive and can have catastrophic consequences. As with many things you need to weigh the pros and the cons but the ability to fully realize and test your solutions in a “safe space” is powerful and can make you try things you might not if you’re worried about bringing down production.

Better yet, if you continue to use the tenant, every 90 days it will auto renew so that you never have to worry about losing your work in progress. In addition, for those that work with Microsoft 365 every day the ability to keep up with what’s going on, what’s changing, and how to best implement your ideas is priceless. You can keep up with the status of your subscription by visiting the <a href="https://developer.microsoft.com/en-us/microsoft-365/profile" rel="noopener" target="_blank">Dashboard - Microsoft 365 Dev Center</a> page.

<h2>Understanding the relationship between Azure and a “Tenant”</h2>
When building in the cloud we developers no longer have the same access to the “server” as we may be used to. The way we architect solutions for SaaS solutions has changed significantly and many people are aware that Azure provides various cloud-based resources to help with the automation scenarios that were lost when we left “on-prem”.

It’s important to understand that each Microsoft 365 tenant has an equivalent Azure Active Directory (AAD) associated with it, including your brand-new shiny dev tenant. So, when you log into Azure the first time you need to be logging in with a global administrator account for your dev tenant. Once you are in Azure you then need to make sure you have a Subscription set up that is associated with that Azure Active Directory instance that is related to your dev tenant. By doing so you are effectively simulating what most production scenarios look like.*

If you already have an Azure subscription you use for development purposes, but it’s not associated with your dev tenant, you can change it. The ever-talented <a href="https://twitter.com/LauraKokkarinen" rel="noopener" target="_blank">Laura Kokkarinen</a> has a wonderful blog post (<a href="https://laurakokkarinen.com/how-to-use-the-complimentary-azure-credits-in-a-microsoft-365-developer-tenant-step-by-step/" rel="noopener" target="_blank">How to use the complimentary Azure credits in a Microsoft 365 dev tenant — step by step)</a> that covers all the ways you might have azure credits and how to get them associated with your dev tenant.

*It should be said that many ISVs and other 3rd party software providers might be looking to build solutions that target multiple tenants and thereby their Azure subscription, although tied to AAD is not targeted for a single AAD.

<h2>Sample Data</h2>
Another awesome feature of these developer subscriptions is the ability to seed the tenant with sample data packs. To do this all you have to do is go to your <a href="https://developer.microsoft.com/en-us/microsoft-365/profile" rel="noopener" target="_blank">Dashboard - Microsoft 365 Dev Center</a> page and click on the kind of data pack you would like to add. You must have the “Users” sample data pack first but then you can also add Mail and Events as well as SharePoint data.

<a href="https://julieturner.net/wp-content/uploads/2021/01/SampleData.png"><img src="https://julieturner.net/wp-content/uploads/2021/01/SampleData-1024x148.png" alt="" width="1024" height="148" class="aligncenter size-large wp-image-1189" /></a>

By having these data packs, it can make testing various scenarios with your application significantly simpler as you can have up to twenty-five accounts playing distinct roles in your scenario.

<h2>Dev Tenant vs "<a href="https://cdx.transform.microsoft.com/" rel="noopener" target="_blank">Customer Digital Transform</a>" Tenants</h2>
Something that may be confusing to some is the difference between the dev tenants and “Customer Digital Transform” tenants. The latter are Microsoft 365 tenants that you can provision if you are someone providing sales or guidance to customers using Microsoft 365. They are extremely useful as these tenants are fully scaled out demo environments that can help you quickly and effectively communicate how Microsoft 365 can benefit a customer and their specific needs. These tenants however have a limited lifespan (between 3 months and 1 year) and after that time the tenant is decommissioned and there is no way to get them back. So, although once you have one of these demo tenants you can deploy and develop inside them, as they are fully functional, just like Cinderella when times up, time is up! As we said earlier, if you’re actively using dev tenants, they will auto renew every 90 days.

So, now that you're all up to speed, what are you waiting for?! Get your <a href="https://developer.microsoft.com/en-us/microsoft-365/dev-program" rel="noopener" target="_blank">dev tenant now</a> and get on your way to building some awesome solutions!

<em>This article was cross-posted on the <a href="https://techcommunity.microsoft.com/t5/microsoft-365-pnp-blog/what-is-a-dev-tenant-and-why-would-you-want-one/ba-p/2036610" rel="noopener" target="_blank">Microsoft 365 PnP Blog - Microsoft Tech community</a></em>]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>1187</wp:post_id>
      <wp:post_date>
        <![CDATA[2021-01-06 10:53:37]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2021-01-06 15:53:37]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2021-03-04 10:43:18]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2021-03-04 15:43:18]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[what-is-a-dev-tenant-and-why-would-you-want-one]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="sharepoint-online">
        <![CDATA[SharePoint Online]]>
      </category>
      <category domain="category" nicename="development">
        <![CDATA[Development]]>
      </category>
      <category domain="category" nicename="featured">
        <![CDATA[Featured]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_last_editor_used_jetpack]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[classic-editor]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1188]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:comment>
        <wp:comment_id>654</wp:comment_id>
        <wp:comment_author>
          <![CDATA[What is a “Dev Tenant” and why would you want one? &#8211; blog by @jfj1997]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://www.365forall.com/2021/02/what-is-a-dev-tenant-and-why-would-you-want-one-blog-by-jfj1997/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[50.62.208.112]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2021-02-10 03:52:21]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2021-02-10 08:52:21]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] What is a “Dev Tenant” and why would you want one? [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1612947141.4391810894012451171875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1612949523.6568050384521484375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>655</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Donal]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[dmccarthy@brightwork.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[51.171.100.110]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2021-02-10 08:30:32]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2021-02-10 13:30:32]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Julie - thanks for this timely post.

The Dev tenants (and the CDX tenants) are great for most scenarios, but I have been unable to add extra Dataverse capacity to either (without getting out the credit card). 
For example, try to create a new environment in Power Platform Admin, and you get the insufficient capacity message.
This means you can't do model-driven app development in the Dev Tenant, unless you stick to the default environment, which is not what we should be doing.
Do you have any suggestions as to how to get around this?

Thanks,
Donal]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1612963833.0072519779205322265625;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1612967248.8294761180877685546875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>656</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Julie Turner, MVP]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[julie@julieturner.net]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://julieturner.net</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[75.144.153.50]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2021-02-10 09:34:27]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2021-02-10 14:34:27]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Sadly Donal, I do not do any PowerPlatform development personally, so I have not had any occasion to have that need. I might suggest you ask this question on the TechCommunity post instead as with a wider audience there maybe someone will have a good answer for you. Also, I might try reaching out to an MVP who specializes in PowerPlatform to see if they have any ideas. A few that come to mind is  Paul Culmsee (@paulculmsee), Shane Young (@ShanesCows), and April Dunnam (@aprildunnam)]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1612967667.728931903839111328125;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_post_as]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[jetpack]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_avatar]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[https://s0.wp.com/wp-content/mu-plugins/highlander-comments/images/wplogo.png]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[hc_foreign_user_id]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[1]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>657</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Donal McCarthy]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[dmccarthy@brightwork.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://gravatar.com/dmcbrightwork</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[51.171.100.110]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2021-02-10 09:43:58]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2021-02-10 14:43:58]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Will do thanks - I've been searching for an answer for this for weeks and have come up empty so far.
I jumped when I saw the title of your post!]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>656</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1612968239.1318719387054443359375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1612968670.820166110992431640625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>658</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Sergio]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[sergio.cappelletti@gmail.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[151.55.72.117]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2021-02-25 05:16:31]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2021-02-25 10:16:31]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Donal,
here is what you are probably looking for:
How to enhance your “dev tenant” to unleash the full potential of the Power Platform (https://techcommunity.microsoft.com/t5/microsoft-365-pnp-blog/how-to-enhance-your-dev-tenant-to-unleash-the-full-potential-of/ba-p/2158336).
Ciao,
Sergio]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>657</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1614248191.8075520992279052734375;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1614261268.7005140781402587890625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>659</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Donal McCarthy]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[dmccarthy@brightwork.com]]>
        </wp:comment_author_email>
        <wp:comment_author_url>http://gravatar.com/dmcbrightwork</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[51.171.100.110]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2021-02-25 09:34:31]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2021-02-25 14:34:31]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[Hi Sergio - thanks for the reply.
We did look at the Power Apps Community Plan and ruled it out because of the individual use limitation. 
In saying that, I was not aware that you could add it the Dev Tenant.
I just followed the steps in the blog post you shared, and added the community plan to my Dev Tenant. While this would certainly be great for learning Power Apps, so it is an improvement over the previous situation, you still cannot create new environments, and thus use the tenant as a Dev Tenant for Power Apps (e.g. have the minimum Dev and Acceptance. I would be happy to pay for Power Apps in my Dev Tenant if I thought I would get the 10GB of capacity.]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[comment]]>
        </wp:comment_type>
        <wp:comment_parent>658</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1614263671.7041180133819580078125;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>662</wp:comment_id>
        <wp:comment_author>
          <![CDATA[Ask Sympraxis Anything - Sympraxis Consulting]]>
        </wp:comment_author>
        <wp:comment_author_email>
          <![CDATA[]]>
        </wp:comment_author_email>
        <wp:comment_author_url>https://sympraxisconsulting.com/2021/06/16/ask-sympraxis-anything/</wp:comment_author_url>
        <wp:comment_author_IP>
          <![CDATA[103.115.8.56]]>
        </wp:comment_author_IP>
        <wp:comment_date>
          <![CDATA[2021-07-16 05:10:26]]>
        </wp:comment_date>
        <wp:comment_date_gmt>
          <![CDATA[2021-07-16 10:10:26]]>
        </wp:comment_date_gmt>
        <wp:comment_content>
          <![CDATA[[&#8230;] to anyone as long as you use it. They are good for 3 months and auto-renew if you are using it. Julie has put together a great post on this. We strongly recommend that your production tenant be set up for Standard Release and that you set [&#8230;]]]>
        </wp:comment_content>
        <wp:comment_approved>
          <![CDATA[1]]>
        </wp:comment_approved>
        <wp:comment_type>
          <![CDATA[pingback]]>
        </wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_result]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[false]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:2:{s:4:"time";d:1626430227.944282054901123046875;s:5:"event";s:9:"check-ham";}]]>
          </wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
          <wp:meta_key>
            <![CDATA[akismet_history]]>
          </wp:meta_key>
          <wp:meta_value>
            <![CDATA[a:3:{s:4:"time";d:1626808173.13922595977783203125;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"jturnerwp";}]]>
          </wp:meta_value>
        </wp:commentmeta>
      </wp:comment>
    </item>
    <item>
      <title>
        <![CDATA[SharePoint App Catalog Development Tips]]>
      </title>
      <link>https://julieturner.net/2021/05/sharepoint-app-catalog-development-tips/</link>
      <pubDate>Mon, 03 May 2021 18:39:33 +0000</pubDate>
      <dc:creator>
        <![CDATA[jturnerwp]]>
      </dc:creator>
      <guid isPermaLink="false">https://julieturner.net/?p=1218</guid>
      <description></description>
      <content:encoded>
        <![CDATA[After several years of building SharePoint Framework solutions on an almost daily basis you get to the point where you’ve managed to find some things that work pretty well. I recently started a new project and after sharing them with the team realized that maybe these tips would be useful to others and so thought to consolidate them into a list.
<h2>Change the default view for the tenant app catalog</h2>
Probably not the oddest, but certainly in a top 10 oddest OOB settings in SharePoint, is the list view settings for the default view in the tenant app catalog for SharePoint apps which groups by Product ID. Definitely, a head scratcher. Luckily, the catalog is just a plain old (and still classic) SharePoint library.
Depending on which type of app catalog (tenant or site collection) and what I’m using it for I have a couple of different go-to views. For the tenant app catalog, I like to change the grouping from the "Product ID" field to the "Tenant Deployed" field and also sort by "Title" so that I can easily find a solution to check its version* or status.

<a href="https://julieturner.net/wp-content/uploads/2021/05/ModifyView.png"><img src="https://julieturner.net/wp-content/uploads/2021/05/ModifyView.png" alt="" width="444" height="247" class="aligncenter size-full wp-image-1232" /></a>

Also, did you know that you can "disable" a solution... yeah me either. This is especially useful for application customizers that you're not currently working on and don't want to have the overhead of running on the page if you're not serving it. If you "Edit" the solution in the tenant app catalog you can set the enabled property to `false` and it will no longer be loaded. So, it some of my development site collections I'll change the view to group by "Enabled" to group what solutions I have ready to go and which I need to enable before I can start working on them again.

<em>*Note on version. Unless you’re using the feature framework or changing something in one of the configuration files, the version of the solution (that is the version listed in package-solution.json) doesn't really affect anything. Regardless, I think it’s immensely useful in tracking what versions are deployed where, so I encourage it’s use in conjunction with the package.json version number. The pnp/spfx-generator has <a href="https://pnp.github.io/generator-spfx/usage/#npm-version" rel="noopener" target="_blank">a very nice "version feature"</a> that helps keep them all in sync, even if you don’t use the PnP generator, I recommend appropriating that feature and implementing it in your solution.</em>

<h2>Create a developer build</h2>
If you’re an SPFx user you’re accustomed to the command:

`gulp clean & gulp bundle --ship & gulp package-solution --ship`

Did you know that if you leave the --ship off the bundle and package-solution commands you get what I like to refer to as a "developer build"? Effectively it means that the build pipeline creates your manifest and the solution package (.sppkg) but internally the manifest is looking for your solution to be running on localhost, exactly like it is when using the workbench. If you then deploy that package, you will be able to add web parts to pages, or view application customizers without having to play around with query string parameters which saves a lot of time and headaches.
<h2>If you can’t use a developer tenant, use a site collection app catalog... maybe use one anyway.</h2>
From a previous post you know I (<a href="https://www.toddklindt.com/blog/Lists/Posts/Post.aspx?ID=884" rel="noopener" target="_blank">and Todd Klindt</a>) are huge proponents of the development tenant. When building solutions, especially web parts or single app part solutions where everything is self-contained (i.e. doesn’t need to pull information from various other areas in the tenant) this is a great choice. However, often you’ll be working on solutions that need to collate information from across your SharePoint environment or the entire tenant and you quickly get to a point that you need realistic data to validate your solution is working as expected. Enter, site collection app catalog.
If you’re not familiar with them <a href="https://docs.microsoft.com/en-us/sharepoint/dev/general-development/site-collection-app-catalog" rel="noopener" target="_blank">site collection app catalogs</a> are a very useful feature. I occasionally use them for production solutions when the solution is a one off "app" that will only be deployed in one site collection. There is a bit of a governance issue in that it’s not exactly obvious to everyone what site collections have an app catalog, that said, there is an somewhat hidden OOB way to find them:

`https://&lt;tenant-app-catalog-URL&gt;/Lists/SiteCollectionAppCatalogs/AllItems.aspx`

As a developer a site collection app catalog has another use. It turns out that if you deploy a solution (even a tenant wide deployed solution) to a site collection app catalog that is also deployed in the tenant app catalog the site collection app catalog version will take precedence. You get several benefits from this “feature” 
<ul>
	<li>Gives you granular control</li>
	<li>Allows you to develop against a production solution</li>
	<li>Gives you a way to do ALM lite... combine this with CI/CD processes using GitHub actions or AzureDevOps pipelines and it’s not bad for a shoestring solution</li>
</ul>
Ok, so let’s break these down. By creating "developer" site collections and corresponding site collection app catalogs you can effectively create little working silos for developers to continue to develop against production information without necessarily affecting that information. I only really recommend this for "consume" scenarios but many of the solutions I build fall into that category, and this becomes a very useful way to build and test a solution before deploying it as you can see what it's really going to look like.
Another use case for additional site collections and corresponding app catalogs is a "lite" version of a CI/CD pipeline. In addition to development silos, you can also create site collections meant for QA, staging, etc. and create a simple GitHub action to build and deploy the packages into those site collections for that purpose.

Here is an example, you might have a tenant wide deployed application customizer that builds a global navigation solution for a tenant. Version 1.0 is in production, and you need to make some modifications. You have two developers working on distinctive features of the solution. You want to have a QA step where select users review the solution and validate that it’s working properly and then you want a staging environment where you can verify that only the exact features are being deployed to production. You’re storing all your code in a private GitHub repo. For the GitHub repo you would have a main branch, plus a dev branch (or dev branch with feature branches) and then a branch for QA and a branch for staging. In SharePoint you would create a dev site, a QA site, and a staging site and for each of those sites you would enable a site collection app catalog.
Starting with the dev branch you would version the package.json and the package-solution.json based on whatever semantic version makes sense based on the update, let’s assume a minor update so the updated version will be 1.1. Now create a development build of that solution and deploy it to the site collection app catalog in the development site. Now both developers can work on the code, running gulp serve to view how their solution is behaving in the development site collection.
When the features are ready for QA the code can be merged onto the QA branch and a production build (including the --ship switch) can be deployed to the QA site’s site collection app catalog. Similarly, when QA is complete the code can be merged into the staging branch and a production build can be deployed to the staging site collection app catalog for final review before finally merging the code base back to the main branch for production deployment.
You go one step further by creating a simple GitHub action on merge into the QA and staging branch that can automatically deploy the <em>sppkg</em> into the site collection app catalog taking out the manual process of redeploying them. Unless you have some manual approval intervention, I might avoid creating an automatic deployment to production as it’s too easy to accidentally merge into the wrong branch thus breaking production. I’ve included a really simple example of the .yml file below.

<h2>Sample CI/CD GitHub action</h2>

 
<pre class="lang:yaml decode:true " title="Sample GitHub Action for deploying SPFx Solution" >name: Build and Deploy SPFX packages to QA environment

on: 
  push: 
    branches: 
      qa

jobs:
  build-and-deploy-webpart:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 10.x
    
    - name: Install from package-lock.json
      run: |
        npm ci
  
    - name: package
      run: |
        gulp dist

    - name: Office 365 CLI Login
      uses: pnp/action-cli-login@v1.0.0
      with:
        ADMIN_USERNAME:  ${{ secrets.SHAREPOINT_UID }}
        ADMIN_PASSWORD:  ${{ secrets.SHAREPOINT_PASSWORD }}

    - name: Deploy to locations-dev app catalog
      uses: pnp/action-cli-deploy@v1.0.0
      with:
        APP_FILE_PATH: sharepoint/solution/my-webpart.sppkg
        OVERWRITE: true
        SCOPE: sitecollection
        SITE_COLLECTION_URL: https://contoso.sharepoint.com/sites/myQASite</pre> 


I hope all these ideas helps others streamline and simplify their SharePoint Framework development lives.  Happy Coding!
]]>
      </content:encoded>
      <excerpt:encoded>
        <![CDATA[]]>
      </excerpt:encoded>
      <wp:post_id>1218</wp:post_id>
      <wp:post_date>
        <![CDATA[2021-05-03 13:39:33]]>
      </wp:post_date>
      <wp:post_date_gmt>
        <![CDATA[2021-05-03 18:39:33]]>
      </wp:post_date_gmt>
      <wp:post_modified>
        <![CDATA[2021-05-13 13:54:43]]>
      </wp:post_modified>
      <wp:post_modified_gmt>
        <![CDATA[2021-05-13 18:54:43]]>
      </wp:post_modified_gmt>
      <wp:comment_status>
        <![CDATA[open]]>
      </wp:comment_status>
      <wp:ping_status>
        <![CDATA[open]]>
      </wp:ping_status>
      <wp:post_name>
        <![CDATA[sharepoint-app-catalog-development-tips]]>
      </wp:post_name>
      <wp:status>
        <![CDATA[publish]]>
      </wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>
        <![CDATA[post]]>
      </wp:post_type>
      <wp:post_password>
        <![CDATA[]]>
      </wp:post_password>
      <wp:is_sticky>0</wp:is_sticky>
      <category domain="category" nicename="alm">
        <![CDATA[ALM]]>
      </category>
      <category domain="category" nicename="development">
        <![CDATA[Development]]>
      </category>
      <category domain="category" nicename="featured">
        <![CDATA[Featured]]>
      </category>
      <category domain="category" nicename="framework">
        <![CDATA[Framework]]>
      </category>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_last_editor_used_jetpack]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[classic-editor]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_edit_last]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_audio_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_video_embed]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_format_gallery_images]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[a:0:{}]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_spost_short_title]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[]]>
        </wp:meta_value>
      </wp:postmeta>
      <wp:postmeta>
        <wp:meta_key>
          <![CDATA[_thumbnail_id]]>
        </wp:meta_key>
        <wp:meta_value>
          <![CDATA[1222]]>
        </wp:meta_value>
      </wp:postmeta>
    </item>
  </channel>
</rss>